--- a/net/minecraft/client/renderer/texture/TextureMap.java
+++ b/net/minecraft/client/renderer/texture/TextureMap.java
@@ -41,7 +41,6 @@
     private int mipmapLevels;
     private final TextureAtlasSprite missingImage;
     private static final String __OBFID = "CL_00001058";
-    private static final String __OBFID = "CL_00001058";
 
     public TextureMap(String p_i46099_1_)
     {
@@ -89,8 +88,21 @@
 
     public void loadTextureAtlas(IResourceManager p_110571_1_)
     {
-        int var2 = Minecraft.getGLMaximumTextureSize();
-        Stitcher var3 = new Stitcher(var2, var2, true, 0, this.mipmapLevels);
+        Config.dbg("Multitexture: " + Config.isMultiTexture());
+
+        if (Config.isMultiTexture())
+        {
+            Iterator var2 = this.mapUploadedSprites.values().iterator();
+
+            while (var2.hasNext())
+            {
+                TextureAtlasSprite var3 = (TextureAtlasSprite)var2.next();
+                var3.deleteSpriteTexture();
+            }
+        }
+
+        int var21 = Minecraft.getGLMaximumTextureSize();
+        Stitcher var31 = new Stitcher(var21, var21, true, 0, this.mipmapLevels);
         this.mapUploadedSprites.clear();
         this.listAnimatedSprites.clear();
         int var4 = Integer.MAX_VALUE;
@@ -100,6 +112,8 @@
 
         while (true)
         {
+            Iterator it1;
+
             while (var6.hasNext())
             {
                 Entry var25 = (Entry)var6.next();
@@ -112,59 +126,59 @@
                     try
                     {
                         IResource var30 = p_110571_1_.getResource(var28);
-                        BufferedImage[] var31 = new BufferedImage[1 + this.mipmapLevels];
-                        var31[0] = TextureUtil.func_177053_a(var30.getInputStream());
-                        TextureMetadataSection var34 = (TextureMetadataSection)var30.getMetadata("texture");
+                        BufferedImage[] bufferedImages = new BufferedImage[1 + this.mipmapLevels];
+                        bufferedImages[0] = TextureUtil.func_177053_a(var30.getInputStream());
+                        TextureMetadataSection sheetWidth = (TextureMetadataSection)var30.getMetadata("texture");
 
-                        if (var34 != null)
+                        if (sheetWidth != null)
                         {
-                            List var19 = var34.getListMipmaps();
-                            int var36;
+                            List sheetHeight = sheetWidth.getListMipmaps();
+                            int listSprites;
 
-                            if (!var19.isEmpty())
+                            if (!sheetHeight.isEmpty())
                             {
-                                int var38 = var31[0].getWidth();
-                                var36 = var31[0].getHeight();
+                                int it = bufferedImages[0].getWidth();
+                                listSprites = bufferedImages[0].getHeight();
 
-                                if (MathHelper.roundUpToPowerOfTwo(var38) != var38 || MathHelper.roundUpToPowerOfTwo(var36) != var36)
+                                if (MathHelper.roundUpToPowerOfTwo(it) != it || MathHelper.roundUpToPowerOfTwo(listSprites) != listSprites)
                                 {
                                     throw new RuntimeException("Unable to load extra miplevels, source-texture is not power of two");
                                 }
                             }
 
-                            Iterator var381 = var19.iterator();
+                            it1 = sheetHeight.iterator();
 
-                            while (var381.hasNext())
+                            while (it1.hasNext())
                             {
-                                var36 = ((Integer)var381.next()).intValue();
+                                listSprites = ((Integer)it1.next()).intValue();
 
-                                if (var36 > 0 && var36 < var31.length - 1 && var31[var36] == null)
+                                if (listSprites > 0 && listSprites < bufferedImages.length - 1 && bufferedImages[listSprites] == null)
                                 {
-                                    ResourceLocation var17 = this.completeResourceLocation(var27, var36);
+                                    ResourceLocation tas = this.completeResourceLocation(var27, listSprites);
 
                                     try
                                     {
-                                        var31[var36] = TextureUtil.func_177053_a(p_110571_1_.getResource(var17).getInputStream());
+                                        bufferedImages[listSprites] = TextureUtil.func_177053_a(p_110571_1_.getResource(tas).getInputStream());
                                     }
-                                    catch (IOException var22)
+                                    catch (IOException var24)
                                     {
-                                        logger.error("Unable to load miplevel {} from: {}", new Object[] {Integer.valueOf(var36), var17, var22});
+                                        logger.error("Unable to load miplevel {} from: {}", new Object[] {Integer.valueOf(listSprites), tas, var24});
                                     }
                                 }
                             }
                         }
 
-                        AnimationMetadataSection var192 = (AnimationMetadataSection)var30.getMetadata("animation");
-                        var26.func_180598_a(var31, var192);
+                        AnimationMetadataSection sheetHeight1 = (AnimationMetadataSection)var30.getMetadata("animation");
+                        var26.func_180598_a(bufferedImages, sheetHeight1);
                     }
-                    catch (RuntimeException var23)
+                    catch (RuntimeException var251)
                     {
-                        logger.error("Unable to parse metadata from " + var28, var23);
+                        logger.error("Unable to parse metadata from " + var28, var251);
                         continue;
                     }
-                    catch (IOException var24)
+                    catch (IOException var261)
                     {
-                        logger.error("Using missing texture, unable to load " + var28 + ", " + var24.getClass().getName());
+                        logger.error("Using missing texture, unable to load " + var28 + ", " + var261.getClass().getName());
                         continue;
                     }
 
@@ -177,27 +191,27 @@
                         var5 = var301;
                     }
 
-                    var3.addSprite(var26);
+                    var31.addSprite(var26);
                 }
                 else if (!var26.load(p_110571_1_, var27))
                 {
                     var4 = Math.min(var4, Math.min(var26.getIconWidth(), var26.getIconHeight()));
-                    var3.addSprite(var26);
+                    var31.addSprite(var26);
                 }
             }
 
-            int var251 = Math.min(var4, var5);
-            int var261 = MathHelper.calculateLogBaseTwo(var251);
+            int var252 = Math.min(var4, var5);
+            int var262 = MathHelper.calculateLogBaseTwo(var252);
 
-            if (var261 < 0)
+            if (var262 < 0)
             {
-                var261 = 0;
+                var262 = 0;
             }
 
-            if (var261 < this.mipmapLevels)
+            if (var262 < this.mipmapLevels)
             {
-                logger.info("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", new Object[] {this.basePath, Integer.valueOf(this.mipmapLevels), Integer.valueOf(var261), Integer.valueOf(var251)});
-                this.mipmapLevels = var261;
+                logger.info("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", new Object[] {this.basePath, Integer.valueOf(this.mipmapLevels), Integer.valueOf(var262), Integer.valueOf(var252)});
+                this.mipmapLevels = var262;
             }
 
             Iterator var271 = this.mapRegisteredSprites.values().iterator();
@@ -210,90 +224,75 @@
                 {
                     var281.generateMipmaps(this.mipmapLevels);
                 }
-                catch (Throwable var21)
+                catch (Throwable var23)
                 {
-                    CrashReport var311 = CrashReport.makeCrashReport(var21, "Applying mipmap");
-                    CrashReportCategory var341 = var311.makeCategory("Sprite being mipmapped");
-                    var341.addCrashSectionCallable("Sprite name", new Callable()
+                    CrashReport var311 = CrashReport.makeCrashReport(var23, "Applying mipmap");
+                    CrashReportCategory sheetWidth1 = var311.makeCategory("Sprite being mipmapped");
+                    sheetWidth1.addCrashSectionCallable("Sprite name", new Callable()
                     {
                         private static final String __OBFID = "CL_00001059";
-                        private static final String __OBFID = "CL_00001059";
                         public String call()
                         {
                             return var281.getIconName();
                         }
-                        public Object call() throws Exception
-                        {
-                            return this.call();
-                        }
                     });
-                    var341.addCrashSectionCallable("Sprite size", new Callable()
+                    sheetWidth1.addCrashSectionCallable("Sprite size", new Callable()
                     {
                         private static final String __OBFID = "CL_00001060";
-                        private static final String __OBFID = "CL_00001060";
                         public String call()
                         {
                             return var281.getIconWidth() + " x " + var281.getIconHeight();
                         }
-                        public Object call() throws Exception
-                        {
-                            return this.call();
-                        }
                     });
-                    var341.addCrashSectionCallable("Sprite frames", new Callable()
+                    sheetWidth1.addCrashSectionCallable("Sprite frames", new Callable()
                     {
                         private static final String __OBFID = "CL_00001061";
-                        private static final String __OBFID = "CL_00001061";
                         public String call()
                         {
                             return var281.getFrameCount() + " frames";
                         }
-                        public Object call() throws Exception
-                        {
-                            return this.call();
-                        }
                     });
-                    var341.addCrashSection("Mipmap levels", Integer.valueOf(this.mipmapLevels));
+                    sheetWidth1.addCrashSection("Mipmap levels", Integer.valueOf(this.mipmapLevels));
                     throw new ReportedException(var311);
                 }
             }
 
             this.missingImage.generateMipmaps(this.mipmapLevels);
-            var3.addSprite(this.missingImage);
+            var31.addSprite(this.missingImage);
 
             try
             {
-                var3.doStitch();
+                var31.doStitch();
             }
-            catch (StitcherException var20)
+            catch (StitcherException var22)
             {
-                throw var20;
+                throw var22;
             }
 
-            logger.info("Created: {}x{} {}-atlas", new Object[] {Integer.valueOf(var3.getCurrentWidth()), Integer.valueOf(var3.getCurrentHeight()), this.basePath});
-            TextureUtil.func_180600_a(this.getGlTextureId(), this.mipmapLevels, var3.getCurrentWidth(), var3.getCurrentHeight());
+            logger.info("Created: {}x{} {}-atlas", new Object[] {Integer.valueOf(var31.getCurrentWidth()), Integer.valueOf(var31.getCurrentHeight()), this.basePath});
+            TextureUtil.func_180600_a(this.getGlTextureId(), this.mipmapLevels, var31.getCurrentWidth(), var31.getCurrentHeight());
             HashMap var282 = Maps.newHashMap(this.mapRegisteredSprites);
-            Iterator var302 = var3.getStichSlots().iterator();
+            Iterator var302 = var31.getStichSlots().iterator();
             TextureAtlasSprite var312;
 
             while (var302.hasNext())
             {
                 var312 = (TextureAtlasSprite)var302.next();
-                String var342 = var312.getIconName();
-                var282.remove(var342);
-                this.mapUploadedSprites.put(var342, var312);
+                String sheetWidth2 = var312.getIconName();
+                var282.remove(sheetWidth2);
+                this.mapUploadedSprites.put(sheetWidth2, var312);
 
                 try
                 {
                     TextureUtil.uploadTextureMipmap(var312.getFrameTextureData(0), var312.getIconWidth(), var312.getIconHeight(), var312.getOriginX(), var312.getOriginY(), false, false);
                 }
-                catch (Throwable var191)
+                catch (Throwable throwable)
                 {
-                    CrashReport var361 = CrashReport.makeCrashReport(var191, "Stitching texture atlas");
-                    CrashReportCategory var382 = var361.makeCategory("Texture being stitched together");
-                    var382.addCrashSection("Atlas path", this.basePath);
-                    var382.addCrashSection("Sprite", var312);
-                    throw new ReportedException(var361);
+                    CrashReport listSprites1 = CrashReport.makeCrashReport(throwable, "Stitching texture atlas");
+                    CrashReportCategory it2 = listSprites1.makeCategory("Texture being stitched together");
+                    it2.addCrashSection("Atlas path", this.basePath);
+                    it2.addCrashSection("Sprite", var312);
+                    throw new ReportedException(listSprites1);
                 }
 
                 if (var312.hasAnimationMetadata())
@@ -310,8 +309,41 @@
                 var312.copyFrom(this.missingImage);
             }
 
-            TextureUtil.missing168(this.basePath.replaceAll("/", "_"), this.getGlTextureId(), this.mipmapLevels, var3.getCurrentWidth(), var3.getCurrentHeight());
+            if (Config.isMultiTexture())
+            {
+                int sheetWidth3 = var31.getCurrentWidth();
+                int sheetHeight2 = var31.getCurrentHeight();
+                List listSprites2 = var31.getStichSlots();
+                it1 = listSprites2.iterator();
+
+                while (it1.hasNext())
+                {
+                    TextureAtlasSprite tas1 = (TextureAtlasSprite)it1.next();
+                    tas1.sheetWidth = sheetWidth3;
+                    tas1.sheetHeight = sheetHeight2;
+                    TextureAtlasSprite ss = tas1.spriteSingle;
+
+                    if (ss != null)
+                    {
+                        ss.sheetWidth = sheetWidth3;
+                        ss.sheetHeight = sheetHeight2;
+                        tas1.bindSpriteTexture();
+                        boolean texBlur = false;
+                        boolean texClamp = true;
+                        TextureUtil.uploadTextureMipmap(ss.getFrameTextureData(0), ss.getIconWidth(), ss.getIconHeight(), ss.getOriginX(), ss.getOriginY(), texBlur, texClamp);
+                    }
+                }
+
+                Config.getMinecraft().getTextureManager().bindTexture(locationBlocksTexture);
+            }
+
             Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPost, new Object[] {this});
+
+            if (Config.equals(System.getProperty("saveTextureMap"), "true"))
+            {
+                TextureUtil.missing168(this.basePath.replaceAll("/", "_"), this.getGlTextureId(), this.mipmapLevels, var31.getCurrentWidth(), var31.getCurrentHeight());
+            }
+
             return;
         }
     }
@@ -340,12 +372,35 @@
 
         while (var1.hasNext())
         {
-            TextureAtlasSprite var2 = (TextureAtlasSprite)var1.next();
+            TextureAtlasSprite it = (TextureAtlasSprite)var1.next();
+
+            if (this.isTerrainAnimationActive(it))
+            {
+                it.updateAnimation();
+            }
+        }
+
+        if (Config.isMultiTexture())
+        {
+            Iterator it1 = this.listAnimatedSprites.iterator();
 
-            if (this.isTerrainAnimationActive(var2))
+            while (it1.hasNext())
             {
-                var2.updateAnimation();
+                TextureAtlasSprite ts = (TextureAtlasSprite)it1.next();
+
+                if (this.isTerrainAnimationActive(ts))
+                {
+                    TextureAtlasSprite spriteSingle = ts.spriteSingle;
+
+                    if (spriteSingle != null)
+                    {
+                        ts.bindSpriteTexture();
+                        spriteSingle.updateAnimation();
+                    }
+                }
             }
+
+            TextureUtil.bindTexture(this.getGlTextureId());
         }
     }
 
