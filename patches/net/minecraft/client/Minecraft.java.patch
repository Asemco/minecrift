--- a/net/minecraft/client/Minecraft.java
+++ b/net/minecraft/client/Minecraft.java
@@ -9,6 +9,7 @@
 import java.awt.Graphics;
 import java.io.File;
 import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
 import java.nio.ByteBuffer;
 import java.text.DecimalFormat;
 import java.util.ArrayList;
@@ -16,105 +17,11 @@
 import java.util.Iterator;
 import java.util.List;
 import javax.swing.JPanel;
-import net.minecraft.src.AchievementList;
-import net.minecraft.src.AnvilSaveConverter;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.Block;
-import net.minecraft.src.CallableClientMemoryStats;
-import net.minecraft.src.CallableClientProfiler;
-import net.minecraft.src.CallableGLInfo;
-import net.minecraft.src.CallableLWJGLVersion;
-import net.minecraft.src.CallableModded;
-import net.minecraft.src.CallableParticleScreenName;
-import net.minecraft.src.CallableTexturePack;
-import net.minecraft.src.CallableTickingScreenName;
-import net.minecraft.src.CallableType2;
-import net.minecraft.src.CallableUpdatingScreenName;
-import net.minecraft.src.ColorizerFoliage;
-import net.minecraft.src.ColorizerGrass;
-import net.minecraft.src.CrashReport;
-import net.minecraft.src.CrashReportCategory;
-import net.minecraft.src.EffectRenderer;
-import net.minecraft.src.EntityBoat;
-import net.minecraft.src.EntityClientPlayerMP;
-import net.minecraft.src.EntityItemFrame;
-import net.minecraft.src.EntityList;
-import net.minecraft.src.EntityLiving;
-import net.minecraft.src.EntityMinecart;
-import net.minecraft.src.EntityPainting;
-import net.minecraft.src.EntityRenderer;
-import net.minecraft.src.EnumMovingObjectType;
-import net.minecraft.src.EnumOS;
-import net.minecraft.src.EnumOSHelper;
-import net.minecraft.src.EnumOptions;
-import net.minecraft.src.FontRenderer;
-import net.minecraft.src.GLAllocation;
-import net.minecraft.src.GameSettings;
-import net.minecraft.src.GameWindowListener;
-import net.minecraft.src.GuiAchievement;
-import net.minecraft.src.GuiChat;
-import net.minecraft.src.GuiConnecting;
-import net.minecraft.src.GuiGameOver;
-import net.minecraft.src.GuiIngame;
-import net.minecraft.src.GuiIngameMenu;
-import net.minecraft.src.GuiInventory;
-import net.minecraft.src.GuiMainMenu;
-import net.minecraft.src.GuiMemoryErrorScreen;
-import net.minecraft.src.GuiScreen;
-import net.minecraft.src.GuiSleepMP;
-import net.minecraft.src.HttpUtil;
-import net.minecraft.src.ILogAgent;
-import net.minecraft.src.INetworkManager;
-import net.minecraft.src.IPlayerUsage;
-import net.minecraft.src.ISaveFormat;
-import net.minecraft.src.ISaveHandler;
-import net.minecraft.src.IntegratedServer;
-import net.minecraft.src.Item;
-import net.minecraft.src.ItemRenderer;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.KeyBinding;
-import net.minecraft.src.LoadingScreenRenderer;
-import net.minecraft.src.LogAgent;
-import net.minecraft.src.MathHelper;
-import net.minecraft.src.MemoryConnection;
-import net.minecraft.src.MinecraftError;
-import net.minecraft.src.MinecraftFakeLauncher;
-import net.minecraft.src.MouseHelper;
-import net.minecraft.src.MovementInputFromOptions;
-import net.minecraft.src.MovingObjectPosition;
-import net.minecraft.src.NetClientHandler;
-import net.minecraft.src.OpenGlHelper;
-import net.minecraft.src.Packet3Chat;
-import net.minecraft.src.PlayerControllerMP;
-import net.minecraft.src.PlayerUsageSnooper;
-import net.minecraft.src.Profiler;
-import net.minecraft.src.ProfilerResult;
-import net.minecraft.src.RenderBlocks;
-import net.minecraft.src.RenderEngine;
-import net.minecraft.src.RenderGlobal;
-import net.minecraft.src.RenderManager;
-import net.minecraft.src.ReportedException;
-import net.minecraft.src.ScaledResolution;
-import net.minecraft.src.ScreenShotHelper;
-import net.minecraft.src.ServerData;
-import net.minecraft.src.Session;
-import net.minecraft.src.SoundManager;
-import net.minecraft.src.StatCollector;
-import net.minecraft.src.StatFileWriter;
-import net.minecraft.src.StatList;
-import net.minecraft.src.StatStringFormatKeyInv;
-import net.minecraft.src.StringTranslate;
-import net.minecraft.src.Tessellator;
-import net.minecraft.src.TextureManager;
-import net.minecraft.src.TexturePackList;
-import net.minecraft.src.ThreadClientSleep;
-import net.minecraft.src.ThreadDownloadResources;
-import net.minecraft.src.ThreadShutdown;
-import net.minecraft.src.Timer;
-import net.minecraft.src.WorldClient;
-import net.minecraft.src.WorldInfo;
-import net.minecraft.src.WorldRenderer;
-import net.minecraft.src.WorldSettings;
+
+import de.fruitfly.ovr.OculusRift;
+import de.fruitfly.ovr.IOculusRift;
+
+import net.minecraft.src.*;
 import org.lwjgl.LWJGLException;
 import org.lwjgl.Sys;
 import org.lwjgl.input.Keyboard;
@@ -127,6 +34,8 @@
 import org.lwjgl.opengl.GLContext;
 import org.lwjgl.opengl.PixelFormat;
 import org.lwjgl.util.glu.GLU;
+import com.mtbs3d.minecrift.VRRenderer;
+
 
 public abstract class Minecraft implements Runnable, IPlayerUsage
 {
@@ -145,8 +54,13 @@
 
     /** Instance of CrashReport. */
     private CrashReport crashReporter;
+    
+    /* Modified to fit in VR view */ 
     public int displayWidth;
     public int displayHeight;
+    
+    /* Actual size of the display buffer */
+    public int displayWidthVRFull;
     private Timer timer = new Timer(20.0F);
 
     /** Instance of PlayerUsageSnooper. */
@@ -183,6 +97,7 @@
     public GuiScreen currentScreen = null;
     public LoadingScreenRenderer loadingScreen;
     public EntityRenderer entityRenderer;
+    public VRRenderer vrRenderer;
 
     /** Reference to the download resources thread. */
     private ThreadDownloadResources downloadResourcesThread;
@@ -226,7 +141,7 @@
      * This is set to fpsCounter every debug screen update, and is shown on the debug screen. It's also sent as part of
      * the usage snooping.
      */
-    private static int debugFPS;
+    public static int debugFPS;
 
     /**
      * When you place a block, it's set to 6, decremented once per tick, when it's 0, you can place another block.
@@ -285,6 +200,9 @@
     /** Profiler currently displayed in the debug screen pie chart */
     private String debugProfilerName = "root";
 
+    /** Oculus Rift */
+    public IOculusRift oculusRift;
+
     public Minecraft(Canvas par1Canvas, MinecraftApplet par2MinecraftApplet, int par3, int par4, boolean par5)
     {
         StatList.nopInit();
@@ -294,7 +212,8 @@
         Packet3Chat.maxChatLength = 32767;
         this.startTimerHackThread();
         this.mcCanvas = par1Canvas;
-        this.displayWidth = par3;
+        this.displayWidthVRFull = par3;
+        this.displayWidth = par3/2;
         this.displayHeight = par4;
         this.fullscreen = par5;
         theMinecraft = this;
@@ -344,7 +263,7 @@
             if (var1 != null)
             {
                 var1.setColor(Color.BLACK);
-                var1.fillRect(0, 0, this.displayWidth, this.displayHeight);
+                var1.fillRect(0, 0, this.displayWidthVRFull, this.displayHeight);
                 var1.dispose();
             }
 
@@ -353,22 +272,23 @@
         else if (this.fullscreen)
         {
             Display.setFullscreen(true);
-            this.displayWidth = Display.getDisplayMode().getWidth();
+            this.displayWidthVRFull = Display.getDisplayMode().getWidth();
             this.displayHeight = Display.getDisplayMode().getHeight();
 
-            if (this.displayWidth <= 0)
+            if (this.displayWidthVRFull <= 0)
             {
-                this.displayWidth = 1;
+                this.displayWidthVRFull = 1;
             }
 
             if (this.displayHeight <= 0)
             {
                 this.displayHeight = 1;
             }
+            this.displayWidth = this.displayWidth/2;
         }
         else
         {
-            Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
+            Display.setDisplayMode(new DisplayMode(this.displayWidthVRFull, this.displayHeight));
         }
 
         Display.setTitle("Minecraft Minecraft 1.5.2");
@@ -413,7 +333,32 @@
 
         ColorizerGrass.setGrassBiomeColorizer(this.renderEngine.getTextureContents("/misc/grasscolor.png"));
         ColorizerFoliage.setFoliageBiomeColorizer(this.renderEngine.getTextureContents("/misc/foliagecolor.png"));
-        this.entityRenderer = new EntityRenderer(this);
+        if( gameSettings.useVR )
+        {
+        	
+            try {
+            	if( gameSettings.vrImplementation.equals("de.fruitfly.ovr.OculusRift"))
+            	{
+            		OculusRift.LoadLibrary(new File(new File(getMinecraftDir(),"bin"),"natives"));
+            	}
+
+    			oculusRift = (IOculusRift)Class.forName(gameSettings.vrImplementation).getConstructor().newInstance();
+    		} catch (Exception e) {
+    			//Yes, I am a bad person for catching Exception, sue me.
+    			e.printStackTrace();
+    		} 
+        	this.vrRenderer = new VRRenderer(this,oculusRift,guiAchievement);
+        	this.entityRenderer = this.vrRenderer;
+
+	        // Oculus init
+	        this.oculusRift.init();
+	        this.oculusRift.setIPD(this.gameSettings.ipd);
+
+        }
+        else
+        {
+        	this.entityRenderer = new EntityRenderer(this);
+        }
         RenderManager.instance.itemRenderer = new ItemRenderer(this);
         this.statFileWriter = new StatFileWriter(this.session, this.mcDataDir);
         AchievementList.openInventory.setStatStringFormatter(new StatStringFormatKeyInv(this));
@@ -436,7 +381,7 @@
         this.sndManager.loadSoundSettings(this.gameSettings);
         this.renderGlobal = new RenderGlobal(this, this.renderEngine);
         this.renderEngine.refreshTextureMaps();
-        GL11.glViewport(0, 0, this.displayWidth, this.displayHeight);
+        GL11.glViewport(0, 0, this.displayWidthVRFull, this.displayHeight);
         this.effectRenderer = new EffectRenderer(this.theWorld, this.renderEngine);
 
         try
@@ -628,21 +573,28 @@
         {
             this.setIngameNotInFocus();
             ScaledResolution var2 = new ScaledResolution(this.gameSettings, this.displayWidth, this.displayHeight);
-            int var3 = var2.getScaledWidth();
-            int var4 = var2.getScaledHeight();
-            ((GuiScreen)par1GuiScreen).setWorldAndResolution(this, var3, var4);
+            int width = var2.getScaledWidth();
+            int height = var2.getScaledHeight();
+            ((GuiScreen)par1GuiScreen).setWorldAndResolution(this, width, height);
             this.skipRenderWorld = false;
+
         }
         else
         {
             this.setIngameFocus();
         }
+
+        if ((par1GuiScreen instanceof GuiMainMenu && this.theWorld == null)      ||
+            (par1GuiScreen instanceof GuiDisconnected && this.theWorld == null))
+        {
+            this.setIngameNotInFocus();        // TODO: Ensure disconnected menu has mouse pointer!
+        }
     }
 
     /**
      * Checks for an OpenGL error. If there is one, prints the error ID and error string.
      */
-    private void checkGLError(String par1Str)
+    public void checkGLError(String par1Str)
     {
         int var2 = GL11.glGetError();
 
@@ -700,6 +652,12 @@
             this.sndManager.closeMinecraft();
             Mouse.destroy();
             Keyboard.destroy();
+
+            if( this.oculusRift != null )
+            {
+	            // De-init Oculus
+	            this.oculusRift.destroy();
+            }
         }
         finally
         {
@@ -869,7 +827,7 @@
                 this.toggleFullscreen();
             }
 
-            if (this.gameSettings.showDebugInfo && this.gameSettings.showDebugProfilerChart)
+            if (this.gameSettings.showDebugInfo  && this.gameSettings.showDebugProfilerChart)
             {
                 if (!this.mcProfiler.profilingEnabled)
                 {
@@ -885,7 +843,7 @@
                 this.prevFrameTime = System.nanoTime();
             }
 
-            this.guiAchievement.updateAchievementWindow();
+            //this.guiAchievement.updateAchievementWindow();
             this.mcProfiler.startSection("root");
             Thread.yield();
 
@@ -896,20 +854,21 @@
 
             this.screenshotListener();
 
-            if (this.mcCanvas != null && !this.fullscreen && (this.mcCanvas.getWidth() != this.displayWidth || this.mcCanvas.getHeight() != this.displayHeight))
+            if (this.mcCanvas != null && !this.fullscreen && (this.mcCanvas.getWidth() != this.displayWidthVRFull || this.mcCanvas.getHeight() != this.displayHeight))
             {
-                this.displayWidth = this.mcCanvas.getWidth();
+                this.displayWidthVRFull = this.mcCanvas.getWidth();
                 this.displayHeight = this.mcCanvas.getHeight();
 
-                if (this.displayWidth <= 0)
+                if (this.displayWidthVRFull <= 0)
                 {
-                    this.displayWidth = 1;
+                    this.displayWidthVRFull = 1;
                 }
 
                 if (this.displayHeight <= 0)
                 {
                     this.displayHeight = 1;
                 }
+                displayWidth = displayWidthVRFull/2;
 
                 this.resize(this.displayWidth, this.displayHeight);
             }
@@ -1192,12 +1151,11 @@
      */
     public void setIngameNotInFocus()
     {
-        if (this.inGameHasFocus)
-        {
-            KeyBinding.unPressAllKeys();
-            this.inGameHasFocus = false;
-            this.mouseHelper.ungrabMouseCursor();
-        }
+        KeyBinding.unPressAllKeys();
+        this.inGameHasFocus = false;
+        this.mouseHelper.grabMouseCursor();
+        //if( !gameSettings.useVR || this.theWorld == null ) //If we're in a world with the oculus, we're rendering in stereo, so keep mouse grabbed
+        //    this.mouseHelper.ungrabMouseCursor();
     }
 
     /**
@@ -1346,12 +1304,12 @@
             if (this.fullscreen)
             {
                 Display.setDisplayMode(Display.getDesktopDisplayMode());
-                this.displayWidth = Display.getDisplayMode().getWidth();
+                this.displayWidthVRFull = Display.getDisplayMode().getWidth();
                 this.displayHeight = Display.getDisplayMode().getHeight();
 
-                if (this.displayWidth <= 0)
+                if (this.displayWidthVRFull <= 0)
                 {
-                    this.displayWidth = 1;
+                    this.displayWidthVRFull = 1;
                 }
 
                 if (this.displayHeight <= 0)
@@ -1363,18 +1321,18 @@
             {
                 if (this.mcCanvas != null)
                 {
-                    this.displayWidth = this.mcCanvas.getWidth();
+                    this.displayWidthVRFull = this.mcCanvas.getWidth();
                     this.displayHeight = this.mcCanvas.getHeight();
                 }
                 else
                 {
-                    this.displayWidth = this.tempDisplayWidth;
+                    this.displayWidthVRFull = this.tempDisplayWidth;
                     this.displayHeight = this.tempDisplayHeight;
                 }
 
-                if (this.displayWidth <= 0)
+                if (this.displayWidthVRFull <= 0)
                 {
-                    this.displayWidth = 1;
+                    this.displayWidthVRFull = 1;
                 }
 
                 if (this.displayHeight <= 0)
@@ -1382,6 +1340,8 @@
                     this.displayHeight = 1;
                 }
             }
+            
+            this.displayWidth = displayWidthVRFull/2;
 
             if (this.currentScreen != null)
             {
@@ -1451,21 +1411,24 @@
             this.renderEngine.updateDynamicTextures();
         }
 
-        if (this.currentScreen == null && this.thePlayer != null)
+        if (this.theWorld == null)    // TODO: Only display if world null - otherwise display in render
         {
-            if (this.thePlayer.getHealth() <= 0)
+            if (this.currentScreen == null && this.thePlayer != null)
             {
-                this.displayGuiScreen((GuiScreen)null);
+                if (this.thePlayer.getHealth() <= 0)
+                {
+                    this.displayGuiScreen((GuiScreen)null);
+                }
+                else if (this.thePlayer.isPlayerSleeping() && this.theWorld != null)
+                {
+                    this.displayGuiScreen(new GuiSleepMP());
+                }
             }
-            else if (this.thePlayer.isPlayerSleeping() && this.theWorld != null)
+            else if (this.currentScreen != null && this.currentScreen instanceof GuiSleepMP && !this.thePlayer.isPlayerSleeping())
             {
-                this.displayGuiScreen(new GuiSleepMP());
+                this.displayGuiScreen((GuiScreen)null);
             }
         }
-        else if (this.currentScreen != null && this.currentScreen instanceof GuiSleepMP && !this.thePlayer.isPlayerSleeping())
-        {
-            this.displayGuiScreen((GuiScreen)null);
-        }
 
         if (this.currentScreen != null)
         {
@@ -1565,7 +1528,7 @@
                     }
                     else if (this.currentScreen != null)
                     {
-                        this.currentScreen.handleMouseInput();
+                        this.currentScreen.handleInput();
                     }
                 }
             }
@@ -1623,6 +1586,209 @@
                                 this.displayInGameMenu();
                             }
 
+                            if (gameSettings.useVR)
+                            {
+                                // TODO: Capture oculus key events
+
+                                //  Reinitialise head tracking
+                                if (Keyboard.getEventKey() == Keyboard.KEY_O && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    this.oculusRift.destroy();
+                                    this.oculusRift.init();
+                                    oculusRift.setIPD(this.gameSettings.ipd);
+                                }
+
+                                // Distortion on / off
+                                if (Keyboard.getEventKey() == Keyboard.KEY_P && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    // Chromatic ab correction
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        this.gameSettings.useChromaticAbCorrection = !this.gameSettings.useChromaticAbCorrection;
+                                        this.gameSettings.saveOptions();
+                                        this.vrRenderer._FBOInitialised = false; // Reinit FBO and shaders
+                                    }
+                                    else
+                                    {
+                                        this.gameSettings.useDistortion = !this.gameSettings.useDistortion;
+                                    }
+                                }
+
+                                // Supersampling on/off
+                                if (Keyboard.getEventKey() == Keyboard.KEY_B && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    // FSAA on/off
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        this.gameSettings.superSampleScaleFactor += 0.5f;
+                                        if (this.gameSettings.superSampleScaleFactor > 4.0f)
+                                        {
+                                            this.gameSettings.superSampleScaleFactor = 1.5f;
+                                        }
+                                        this.gameSettings.saveOptions();
+                                        this.vrRenderer._FBOInitialised = false;
+                                    }
+                                    else
+                                    {
+                                        this.gameSettings.useSupersample = !this.gameSettings.useSupersample;
+                                        this.gameSettings.saveOptions();
+                                        this.vrRenderer._FBOInitialised = false; // Reinit FBO and shaders
+                                    }
+                                }
+
+                                // Head tracking on / off
+                                if (Keyboard.getEventKey() == Keyboard.KEY_L && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        this.gameSettings.useHeadTrackPrediction = !this.gameSettings.useHeadTrackPrediction;
+
+                                        if (this.gameSettings.useHeadTrackPrediction)
+                                            oculusRift.setPrediction(0.03f, true);
+                                        else
+                                            oculusRift.setPrediction(0.03f, false);
+
+                                        this.gameSettings.saveOptions();
+                                    }
+                                    else
+                                    {
+                                        this.gameSettings.useHeadTracking = !this.gameSettings.useHeadTracking;
+                                    }
+                                }
+
+                                // Lock distance
+                                if (Keyboard.getEventKey() == Keyboard.KEY_U && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    // HUD scale
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        this.gameSettings.hudScale -= 0.01f;
+                                        if (this.gameSettings.hudScale < 0.15f)
+                                        {
+                                            this.gameSettings.hudScale = 1.25f;
+                                        }
+                                        this.gameSettings.saveOptions();
+                                    }
+                                    else
+                                    {
+                                        this.gameSettings.hudDistance -= 0.01f;
+                                        if (this.gameSettings.hudDistance < 0.15f)
+                                        {
+                                            this.gameSettings.hudDistance = 1.25f;
+                                        }
+                                        this.gameSettings.saveOptions();
+                                        //this.gameSettings.lockHud = !this.gameSettings.lockHud; // TOOD: HUD lock removed for now
+                                    }
+                                }
+
+                                // Hud opacity on / off
+                                if (Keyboard.getEventKey() == Keyboard.KEY_Y && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    gameSettings.useHudOpacity = !gameSettings.useHudOpacity;
+                                    this.gameSettings.saveOptions();
+                                }
+
+                                // Render headwear / ON/off
+                                if (Keyboard.getEventKey() == Keyboard.KEY_M && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    gameSettings.renderHeadWear = !gameSettings.renderHeadWear;
+                                    this.gameSettings.saveOptions();
+                                }
+
+                                // Allow mouse pitch
+                                if (Keyboard.getEventKey() == Keyboard.KEY_N && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    gameSettings.allowMousePitchInput = !gameSettings.allowMousePitchInput;
+                                    this.gameSettings.saveOptions();
+                                }
+
+                                // FOV+
+                                if (Keyboard.getEventKey() == Keyboard.KEY_PERIOD && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        // Distortion fit point
+                                        gameSettings.distortionFitPoint += 1;
+                                        if (gameSettings.distortionFitPoint > 14)
+                                            gameSettings.distortionFitPoint = 14;
+                                        this.gameSettings.saveOptions();
+                                        this.vrRenderer._FBOInitialised = false; // Reinit FBO and shaders
+                                    }
+                                    else
+                                    {
+                                        // FOV
+                                        gameSettings.fovScaleFactor += 0.001f;
+                                        this.gameSettings.saveOptions();
+                                    }
+                                }
+
+                                // FOV-
+                                if (Keyboard.getEventKey() == Keyboard.KEY_COMMA && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        // Distortion fit point
+                                        gameSettings.distortionFitPoint -= 1;
+                                        if (gameSettings.distortionFitPoint < 0)
+                                            gameSettings.distortionFitPoint = 0;
+                                        this.gameSettings.saveOptions();
+                                        this.vrRenderer._FBOInitialised = false; // Reinit FBO and shaders
+                                    }
+                                    else
+                                    {
+                                        // FOV
+                                        gameSettings.fovScaleFactor -= 0.001f;
+                                        this.gameSettings.saveOptions();
+                                    }
+                                }
+
+                                // Cycle head track sensitivity
+                                if (Keyboard.getEventKey() == Keyboard.KEY_V && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    this.gameSettings.headTrackSensitivity += 0.1f;
+                                    if (this.gameSettings.headTrackSensitivity > 4.05f)
+                                    {
+                                        this.gameSettings.headTrackSensitivity = 0.5f;
+                                    }
+                                    this.gameSettings.saveOptions();
+                                }
+
+                                // Increase IPD
+                                if (Keyboard.getEventKey() == Keyboard.KEY_EQUALS && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    float newIpd;
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        newIpd = this.gameSettings.ipd + 0.0001f;
+                                    }
+                                    else
+                                    {
+                                        newIpd = this.gameSettings.ipd + 0.0005f;
+                                    }
+                                    oculusRift.setIPD(newIpd);
+                                    this.gameSettings.ipd = newIpd;
+                                    this.gameSettings.saveOptions();
+                                }
+
+                                // Decrease IPD
+                                if (Keyboard.getEventKey() == Keyboard.KEY_MINUS && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    float newIpd;
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        newIpd = this.gameSettings.ipd - 0.0001f;
+                                    }
+                                    else
+                                    {
+                                        newIpd = this.gameSettings.ipd - 0.0005f;
+                                    }
+                                    oculusRift.setIPD(newIpd);
+                                    this.gameSettings.ipd = newIpd;
+                                    this.gameSettings.saveOptions();
+                                }
+                            }
+
+
                             if (Keyboard.getEventKey() == 31 && Keyboard.isKeyDown(61))
                             {
                                 this.forceReload();
@@ -1667,10 +1833,11 @@
                                 this.gameSettings.hideGUI = !this.gameSettings.hideGUI;
                             }
 
-                            if (Keyboard.getEventKey() == 61)
+                            if (Keyboard.getEventKey() == Keyboard.KEY_F3)
                             {
                                 this.gameSettings.showDebugInfo = !this.gameSettings.showDebugInfo;
                                 this.gameSettings.showDebugProfilerChart = GuiScreen.isShiftKeyDown();
+                                this.gameSettings.showOculusDebugInfo = GuiScreen.isCtrlKeyDown();
                             }
 
                             if (Keyboard.getEventKey() == 63)
@@ -2021,6 +2188,7 @@
 
             this.setServerData((ServerData)null);
             this.integratedServerIsRunning = false;
+            this.setIngameNotInFocus();
         }
 
         this.sndManager.playStreaming((String)null, 0.0F, 0.0F, 0.0F);
