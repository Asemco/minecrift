--- ./src/.minecraft_orig/net/minecraft/client/Minecraft.java	2013-05-22 01:14:06.679046000 -0500
+++ ./modsrc/minecraft/net/minecraft/client/Minecraft.java	2013-05-22 02:42:15.151096917 -0500
@@ -16,105 +16,10 @@
 import java.util.Iterator;
 import java.util.List;
 import javax.swing.JPanel;
-import net.minecraft.src.AchievementList;
-import net.minecraft.src.AnvilSaveConverter;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.Block;
-import net.minecraft.src.CallableClientMemoryStats;
-import net.minecraft.src.CallableClientProfiler;
-import net.minecraft.src.CallableGLInfo;
-import net.minecraft.src.CallableLWJGLVersion;
-import net.minecraft.src.CallableModded;
-import net.minecraft.src.CallableParticleScreenName;
-import net.minecraft.src.CallableTexturePack;
-import net.minecraft.src.CallableTickingScreenName;
-import net.minecraft.src.CallableType2;
-import net.minecraft.src.CallableUpdatingScreenName;
-import net.minecraft.src.ColorizerFoliage;
-import net.minecraft.src.ColorizerGrass;
-import net.minecraft.src.CrashReport;
-import net.minecraft.src.CrashReportCategory;
-import net.minecraft.src.EffectRenderer;
-import net.minecraft.src.EntityBoat;
-import net.minecraft.src.EntityClientPlayerMP;
-import net.minecraft.src.EntityItemFrame;
-import net.minecraft.src.EntityList;
-import net.minecraft.src.EntityLiving;
-import net.minecraft.src.EntityMinecart;
-import net.minecraft.src.EntityPainting;
-import net.minecraft.src.EntityRenderer;
-import net.minecraft.src.EnumMovingObjectType;
-import net.minecraft.src.EnumOS;
-import net.minecraft.src.EnumOSHelper;
-import net.minecraft.src.EnumOptions;
-import net.minecraft.src.FontRenderer;
-import net.minecraft.src.GLAllocation;
-import net.minecraft.src.GameSettings;
-import net.minecraft.src.GameWindowListener;
-import net.minecraft.src.GuiAchievement;
-import net.minecraft.src.GuiChat;
-import net.minecraft.src.GuiConnecting;
-import net.minecraft.src.GuiGameOver;
-import net.minecraft.src.GuiIngame;
-import net.minecraft.src.GuiIngameMenu;
-import net.minecraft.src.GuiInventory;
-import net.minecraft.src.GuiMainMenu;
-import net.minecraft.src.GuiMemoryErrorScreen;
-import net.minecraft.src.GuiScreen;
-import net.minecraft.src.GuiSleepMP;
-import net.minecraft.src.HttpUtil;
-import net.minecraft.src.ILogAgent;
-import net.minecraft.src.INetworkManager;
-import net.minecraft.src.IPlayerUsage;
-import net.minecraft.src.ISaveFormat;
-import net.minecraft.src.ISaveHandler;
-import net.minecraft.src.IntegratedServer;
-import net.minecraft.src.Item;
-import net.minecraft.src.ItemRenderer;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.KeyBinding;
-import net.minecraft.src.LoadingScreenRenderer;
-import net.minecraft.src.LogAgent;
-import net.minecraft.src.MathHelper;
-import net.minecraft.src.MemoryConnection;
-import net.minecraft.src.MinecraftError;
-import net.minecraft.src.MinecraftFakeLauncher;
-import net.minecraft.src.MouseHelper;
-import net.minecraft.src.MovementInputFromOptions;
-import net.minecraft.src.MovingObjectPosition;
-import net.minecraft.src.NetClientHandler;
-import net.minecraft.src.OpenGlHelper;
-import net.minecraft.src.Packet3Chat;
-import net.minecraft.src.PlayerControllerMP;
-import net.minecraft.src.PlayerUsageSnooper;
-import net.minecraft.src.Profiler;
-import net.minecraft.src.ProfilerResult;
-import net.minecraft.src.RenderBlocks;
-import net.minecraft.src.RenderEngine;
-import net.minecraft.src.RenderGlobal;
-import net.minecraft.src.RenderManager;
-import net.minecraft.src.ReportedException;
-import net.minecraft.src.ScaledResolution;
-import net.minecraft.src.ScreenShotHelper;
-import net.minecraft.src.ServerData;
-import net.minecraft.src.Session;
-import net.minecraft.src.SoundManager;
-import net.minecraft.src.StatCollector;
-import net.minecraft.src.StatFileWriter;
-import net.minecraft.src.StatList;
-import net.minecraft.src.StatStringFormatKeyInv;
-import net.minecraft.src.StringTranslate;
-import net.minecraft.src.Tessellator;
-import net.minecraft.src.TextureManager;
-import net.minecraft.src.TexturePackList;
-import net.minecraft.src.ThreadClientSleep;
-import net.minecraft.src.ThreadDownloadResources;
-import net.minecraft.src.ThreadShutdown;
-import net.minecraft.src.Timer;
-import net.minecraft.src.WorldClient;
-import net.minecraft.src.WorldInfo;
-import net.minecraft.src.WorldRenderer;
-import net.minecraft.src.WorldSettings;
+
+import de.fruitfly.ovr.EyeRenderParams;
+import de.fruitfly.ovr.OculusRift;
+import net.minecraft.src.*;
 import org.lwjgl.LWJGLException;
 import org.lwjgl.Sys;
 import org.lwjgl.input.Keyboard;
@@ -128,6 +33,8 @@
 import org.lwjgl.opengl.PixelFormat;
 import org.lwjgl.util.glu.GLU;
 
+import static java.lang.Math.ceil;
+
 public abstract class Minecraft implements Runnable, IPlayerUsage
 {
     /** A 10MiB preallocation to ensure the heap is reasonably sized. */
@@ -226,7 +133,7 @@
      * This is set to fpsCounter every debug screen update, and is shown on the debug screen. It's also sent as part of
      * the usage snooping.
      */
-    private static int debugFPS;
+    public static int debugFPS;
 
     /**
      * When you place a block, it's set to 6, decremented once per tick, when it's 0, you can place another block.
@@ -285,6 +192,10 @@
     /** Profiler currently displayed in the debug screen pie chart */
     private String debugProfilerName = "root";
 
+    /** Oculus Rift */
+    private OculusRift oculusRift;
+    public boolean _displayedInRender = false;
+
     public Minecraft(Canvas par1Canvas, MinecraftApplet par2MinecraftApplet, int par3, int par4, boolean par5)
     {
         StatList.nopInit();
@@ -300,6 +211,8 @@
         theMinecraft = this;
         TextureManager.init();
         this.guiAchievement = new GuiAchievement(this);
+
+        this.oculusRift = new OculusRift();
     }
 
     private void startTimerHackThread()
@@ -439,6 +352,10 @@
         GL11.glViewport(0, 0, this.displayWidth, this.displayHeight);
         this.effectRenderer = new EffectRenderer(this.theWorld, this.renderEngine);
 
+        // Oculus init
+        this.oculusRift.init();
+        this.oculusRift.setIPD(this.gameSettings.ipd);
+
         try
         {
             this.downloadResourcesThread = new ThreadDownloadResources(this.mcDataDir, this);
@@ -618,7 +535,7 @@
 
         if (par1GuiScreen instanceof GuiMainMenu)
         {
-            this.gameSettings.showDebugInfo = false;
+            this.gameSettings.showDebugInfo = 0;
             this.ingameGUI.getChatGUI().clearChatMessages();
         }
 
@@ -626,17 +543,35 @@
 
         if (par1GuiScreen != null)
         {
-            this.setIngameNotInFocus();
-            ScaledResolution var2 = new ScaledResolution(this.gameSettings, this.displayWidth, this.displayHeight);
-            int var3 = var2.getScaledWidth();
-            int var4 = var2.getScaledHeight();
-            ((GuiScreen)par1GuiScreen).setWorldAndResolution(this, var3, var4);
-            this.skipRenderWorld = false;
+            if (oculusRift.use && _displayedInRender)
+            {
+                this.setIngameNotInFocus(false); // TODO: Don't ungrab the mouse pointer
+                ScaledResolution var2 = new ScaledResolution(this.gameSettings, this.displayWidth, this.displayHeight);
+                int width = var2.getScaledWidth();
+                int height = var2.getScaledHeight();
+                ((GuiScreen)par1GuiScreen).setWorldAndResolution(this, width, height);
+                this.skipRenderWorld = false;
+            }
+            else
+            {
+                this.setIngameNotInFocus(true);
+                ScaledResolution var2 = new ScaledResolution(this.gameSettings, this.displayWidth, this.displayHeight);
+                int width = var2.getScaledWidth();
+                int height = var2.getScaledHeight();
+                ((GuiScreen)par1GuiScreen).setWorldAndResolution(this, width, height);
+                this.skipRenderWorld = false;
+            }
         }
         else
         {
             this.setIngameFocus();
         }
+
+        if ((par1GuiScreen instanceof GuiMainMenu && this.theWorld == null)      ||
+            (par1GuiScreen instanceof GuiDisconnected && this.theWorld == null))
+        {
+            this.setIngameNotInFocus(true);        // TODO: Ensure disconnected menu has mouse pointer!
+        }
     }
 
     /**
@@ -700,6 +635,9 @@
             this.sndManager.closeMinecraft();
             Mouse.destroy();
             Keyboard.destroy();
+
+            // De-init Oculus
+            this.oculusRift.destroy();
         }
         finally
         {
@@ -819,10 +757,11 @@
 
             long var6 = System.nanoTime();
             this.mcProfiler.startSection("tick");
+            boolean renderGUI = false;
 
             for (int var3 = 0; var3 < this.timer.elapsedTicks; ++var3)
             {
-                this.runTick();
+                renderGUI = this.runTick();
             }
 
             this.mcProfiler.endStartSection("preRenderErrors");
@@ -857,7 +796,7 @@
             if (!this.skipRenderWorld)
             {
                 this.mcProfiler.endStartSection("gameRenderer");
-                this.entityRenderer.updateCameraAndRender(this.timer.renderPartialTicks);
+                this.entityRenderer.updateCameraAndRender(this.timer.renderPartialTicks, this.oculusRift, this.guiAchievement, renderGUI);
                 this.mcProfiler.endSection();
             }
 
@@ -869,7 +808,7 @@
                 this.toggleFullscreen();
             }
 
-            if (this.gameSettings.showDebugInfo && this.gameSettings.showDebugProfilerChart)
+            if (this.gameSettings.showDebugInfo > 0 && this.gameSettings.showDebugProfilerChart)
             {
                 if (!this.mcProfiler.profilingEnabled)
                 {
@@ -885,7 +824,10 @@
                 this.prevFrameTime = System.nanoTime();
             }
 
-            this.guiAchievement.updateAchievementWindow();
+            if (!oculusRift.use)
+            {
+                this.guiAchievement.updateAchievementWindow(this.oculusRift, null, -1);
+            }
             this.mcProfiler.startSection("root");
             Thread.yield();
 
@@ -1192,21 +1134,28 @@
      */
     public void setIngameNotInFocus()
     {
-        if (this.inGameHasFocus)
-        {
+        setIngameNotInFocus(true);
+    }
+
+    public void setIngameNotInFocus(boolean ungrabMouse)
+    {
+       // if (this.inGameHasFocus)
+       // {
             KeyBinding.unPressAllKeys();
             this.inGameHasFocus = false;
-            this.mouseHelper.ungrabMouseCursor();
-        }
+            if (ungrabMouse) // TODO: Un grab mouse!
+                this.mouseHelper.ungrabMouseCursor();
+        //}
     }
 
     /**
      * Displays the ingame menu
      */
-    public void displayInGameMenu()
+    public void displayInGameMenu(boolean displayedInRender)
     {
         if (this.currentScreen == null)
         {
+            this._displayedInRender = displayedInRender;
             this.displayGuiScreen(new GuiIngameMenu());
 
             if (this.isSingleplayer() && !this.theIntegratedServer.getPublic())
@@ -1214,6 +1163,7 @@
                 this.sndManager.pauseAllSounds();
             }
         }
+        this._displayedInRender = false;
     }
 
     private void sendClickBlockToController(int par1, boolean par2)
@@ -1418,8 +1368,9 @@
     /**
      * Runs the current tick.
      */
-    public void runTick()
+    public boolean runTick()
     {
+        boolean renderGUI = false;
         if (this.rightClickDelayTimer > 0)
         {
             --this.rightClickDelayTimer;
@@ -1451,21 +1402,24 @@
             this.renderEngine.updateDynamicTextures();
         }
 
-        if (this.currentScreen == null && this.thePlayer != null)
+        if (this.theWorld == null)    // TODO: Only display if world null - otherwise display in render
         {
-            if (this.thePlayer.getHealth() <= 0)
+            if (this.currentScreen == null && this.thePlayer != null)
             {
-                this.displayGuiScreen((GuiScreen)null);
+                if (this.thePlayer.getHealth() <= 0)
+                {
+                    this.displayGuiScreen((GuiScreen)null);
+                }
+                else if (this.thePlayer.isPlayerSleeping() && this.theWorld != null)
+                {
+                    this.displayGuiScreen(new GuiSleepMP());
+                }
             }
-            else if (this.thePlayer.isPlayerSleeping() && this.theWorld != null)
+            else if (this.currentScreen != null && this.currentScreen instanceof GuiSleepMP && !this.thePlayer.isPlayerSleeping())
             {
-                this.displayGuiScreen(new GuiSleepMP());
+                this.displayGuiScreen((GuiScreen)null);
             }
         }
-        else if (this.currentScreen != null && this.currentScreen instanceof GuiSleepMP && !this.thePlayer.isPlayerSleeping())
-        {
-            this.displayGuiScreen((GuiScreen)null);
-        }
 
         if (this.currentScreen != null)
         {
@@ -1479,7 +1433,17 @@
         {
             try
             {
-                this.currentScreen.handleInput();
+                if (oculusRift.use && this.theWorld != null)
+                {
+                    this.entityRenderer.setCorrectedMouse(Mouse.getEventX(), Mouse.getEventY(), this.displayWidth, this.displayHeight);
+                    this.currentScreen._mouseX = this.entityRenderer.mouseX;
+                    this.currentScreen._mouseY = this.entityRenderer.mouseY;
+                    this.currentScreen.handleInput(this.displayWidth, this.displayHeight, true);        // TODO: Scale mouse input for stereo viewport
+                }
+                else
+                {
+                    this.currentScreen.handleInput(this.displayWidth, this.displayHeight, false);
+                }
             }
             catch (Throwable var6)
             {
@@ -1565,7 +1529,14 @@
                     }
                     else if (this.currentScreen != null)
                     {
-                        this.currentScreen.handleMouseInput();
+                        if (oculusRift.use && this.theWorld != null)
+                        {
+                            this.currentScreen.handleMouseInput(this.displayWidth / 2, this.displayHeight, true); // TODO: Scale mouse input
+                        }
+                        else
+                        {
+                            this.currentScreen.handleMouseInput(this.displayWidth, this.displayHeight, false);
+                        }
                     }
                 }
             }
@@ -1620,9 +1591,263 @@
                         {
                             if (Keyboard.getEventKey() == 1)
                             {
-                                this.displayInGameMenu();
+                                if (this.oculusRift.use)
+                                {
+                                    renderGUI = true;
+                                }
+                                else
+                                {
+                                    this.displayInGameMenu(false);
+                                }
+                            }
+
+                            if (oculusRift.use)
+                            {
+                                // TODO: Capture oculus key events
+
+                                //  Reinitialise head tracking
+                                if (Keyboard.getEventKey() == Keyboard.KEY_O && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    this.oculusRift.destroy();
+                                    this.oculusRift.init();
+                                    oculusRift.setIPD(this.gameSettings.ipd);
+                                }
+
+                                // Distortion on / off
+                                if (Keyboard.getEventKey() == Keyboard.KEY_P && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    // Chromatic ab correction
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        this.gameSettings.useChromaticAbCorrection = !this.gameSettings.useChromaticAbCorrection;
+                                        this.gameSettings.saveOptions();
+                                        this.entityRenderer._FBOInitialised = false; // Reinit FBO and shaders
+                                    }
+                                    else
+                                    {
+                                        this.gameSettings.useDistortion = !this.gameSettings.useDistortion;
+                                    }
+                                }
+
+                                // Supersampling on/off
+                                if (Keyboard.getEventKey() == Keyboard.KEY_B && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    // FSAA on/off
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        this.gameSettings.superSampleScaleFactor += 0.5f;
+                                        if (this.gameSettings.superSampleScaleFactor > 4.0f)
+                                        {
+                                            this.gameSettings.superSampleScaleFactor = 1.5f;
+                                        }
+                                        this.gameSettings.saveOptions();
+                                        this.entityRenderer._FBOInitialised = false;
+                                    }
+                                    else
+                                    {
+                                        this.gameSettings.useSupersample = !this.gameSettings.useSupersample;
+                                        this.gameSettings.saveOptions();
+                                        this.entityRenderer._FBOInitialised = false; // Reinit FBO and shaders                                    }
+                                    }
+                                }
+
+                                // Head tracking on / off
+                                if (Keyboard.getEventKey() == Keyboard.KEY_L && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        this.gameSettings.useHeadTrackPrediction = !this.gameSettings.useHeadTrackPrediction;
+
+                                        if (this.gameSettings.useHeadTrackPrediction)
+                                            oculusRift.setPrediction(0.03f, true);
+                                        else
+                                            oculusRift.setPrediction(0.03f, false);
+
+                                        this.gameSettings.saveOptions();
+                                    }
+                                    else
+                                    {
+                                        this.gameSettings.useHeadTracking = !this.gameSettings.useHeadTracking;
+                                    }
+                                }
+
+                                // Lock distance
+                                if (Keyboard.getEventKey() == Keyboard.KEY_U && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    // HUD scale
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        this.gameSettings.hudScale -= 0.01f;
+                                        if (this.gameSettings.hudScale < 0.15f)
+                                        {
+                                            this.gameSettings.hudScale = 1.25f;
+                                        }
+                                        this.gameSettings.saveOptions();
+                                    }
+                                    else
+                                    {
+                                        this.gameSettings.hudDistance -= 0.01f;
+                                        if (this.gameSettings.hudDistance < 0.15f)
+                                        {
+                                            this.gameSettings.hudDistance = 1.25f;
+                                        }
+                                        this.gameSettings.saveOptions();
+                                        //this.gameSettings.lockHud = !this.gameSettings.lockHud; // TOOD: HUD lock removed for now
+                                    }
+                                }
+
+                                // Hud opacity on / off
+                                if (Keyboard.getEventKey() == Keyboard.KEY_Y && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    gameSettings.useHudOpacity = !gameSettings.useHudOpacity;
+                                    this.gameSettings.saveOptions();
+                                }
+
+                                // Render headwear / ON/off
+                                if (Keyboard.getEventKey() == Keyboard.KEY_M && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    gameSettings.renderHeadWear = !gameSettings.renderHeadWear;
+                                    this.gameSettings.saveOptions();
+                                }
+
+                                // Allow mouse pitch
+                                if (Keyboard.getEventKey() == Keyboard.KEY_N && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    gameSettings.allowMousePitchInput = !gameSettings.allowMousePitchInput;
+                                    this.gameSettings.saveOptions();
+                                }
+
+//                                float change = 0.2f;
+//
+//                                // Yaw change
+//                                if (Keyboard.getEventKey() == Keyboard.KEY_H && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+//                                {
+//                                    System.out.println("Yaw change");
+//                                    if (oculusRift.testYawAngleDelta == 0.0f)
+//                                    {
+//                                        oculusRift.testYawAngleDelta = change;
+//                                    }
+//                                    else if (oculusRift.testYawAngleDelta > 0.0f)
+//                                    {
+//                                        oculusRift.testYawAngleDelta = -change;
+//                                    }
+//                                    else
+//                                    {
+//                                        oculusRift.testYawAngleDelta = 0.0f;
+//                                    }
+//                                }
+//
+//                                // Pitch change
+//                                if (Keyboard.getEventKey() == Keyboard.KEY_J && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+//                                {
+//                                    System.out.println("Pitch change");
+//                                    if (oculusRift.testPitchAngleDelta == 0.0f)
+//                                    {
+//                                        oculusRift.testPitchAngleDelta = change;
+//                                    }
+//                                    else if (oculusRift.testPitchAngleDelta > 0.0f)
+//                                    {
+//                                        oculusRift.testPitchAngleDelta = -change;
+//                                    }
+//                                    else
+//                                    {
+//                                        oculusRift.testPitchAngleDelta = 0.0f;
+//                                    }
+//                                }
+//
+//                                // Roll change
+//                                if (Keyboard.getEventKey() == Keyboard.KEY_K && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+//                                {
+//                                    System.out.println("Roll change");
+//                                    if (oculusRift.testRollAngleDelta == 0.0f)
+//                                    {
+//                                        oculusRift.testRollAngleDelta = change;
+//                                    }
+//                                    else if (oculusRift.testRollAngleDelta > 0.0f)
+//                                    {
+//                                        oculusRift.testRollAngleDelta = -change;
+//                                    }
+//                                    else
+//                                    {
+//                                        oculusRift.testRollAngleDelta = 0.0f;
+//                                    }
+//                                }
+////
+//                                if (Keyboard.getEventKey() == Keyboard.KEY_NUMPAD0 && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+//                                {
+//                                    this.gameSettings.useSupersample = !this.gameSettings.useSupersample;
+//                                    this.entityRenderer._FBOInitialised = false;
+//                                }
+//
+//                                if (Keyboard.getEventKey() == Keyboard.KEY_NUMPAD2 && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+//                                {
+//                                    oculusRift.useMipMaps = !oculusRift.useMipMaps;
+//                                }
+
+                                // Increase IPD
+                                if (Keyboard.getEventKey() == Keyboard.KEY_EQUALS && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    float newIpd;
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        newIpd = this.gameSettings.ipd + 0.0001f;
+                                    }
+                                    else
+                                    {
+                                        newIpd = this.gameSettings.ipd + 0.0005f;
+                                    }
+                                    oculusRift.setIPD(newIpd);
+                                    this.gameSettings.ipd = newIpd;
+                                    this.gameSettings.saveOptions();
+                                }
+
+                                // Decrease IPD
+                                if (Keyboard.getEventKey() == Keyboard.KEY_MINUS && Keyboard.isKeyDown(Keyboard.KEY_LCONTROL))
+                                {
+                                    float newIpd;
+                                    if (Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+                                    {
+                                        newIpd = this.gameSettings.ipd - 0.0001f;
+                                    }
+                                    else
+                                    {
+                                        newIpd = this.gameSettings.ipd - 0.0005f;
+                                    }
+                                    oculusRift.setIPD(newIpd);
+                                    this.gameSettings.ipd = newIpd;
+                                    this.gameSettings.saveOptions();
+                                }
+
+//                                // Increase player height
+//                                if (Keyboard.getEventKey() == Keyboard.KEY_ADD && Keyboard.isKeyDown(Keyboard.KEY_LMENU))    // LALT
+//                                {
+//                                    float currentEyeHeight = oculusRift.getEyeHeight();
+//                                    if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT))
+//                                    {
+//                                        oculusRift.setEyeHeight(currentEyeHeight + 0.01f);
+//                                    }
+//                                    else
+//                                    {
+//                                        oculusRift.setEyeHeight(currentEyeHeight + 0.001f);
+//                                    }
+//                                }
+//
+//                                // Decrease player height
+//                                if (Keyboard.getEventKey() == Keyboard.KEY_SUBTRACT && Keyboard.isKeyDown(Keyboard.KEY_LMENU))
+//                                {
+//                                    float currentEyeHeight = oculusRift.getEyeHeight();
+//                                    if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT))
+//                                    {
+//                                        oculusRift.setEyeHeight(currentEyeHeight - 0.01f);
+//                                    }
+//                                    else
+//                                    {
+//                                        oculusRift.setEyeHeight(currentEyeHeight - 0.001f);
+//                                    }
+//                                }
                             }
 
+
                             if (Keyboard.getEventKey() == 31 && Keyboard.isKeyDown(61))
                             {
                                 this.forceReload();
@@ -1667,10 +1892,14 @@
                                 this.gameSettings.hideGUI = !this.gameSettings.hideGUI;
                             }
 
-                            if (Keyboard.getEventKey() == 61)
+                            if (Keyboard.getEventKey() == Keyboard.KEY_F3)
                             {
-                                this.gameSettings.showDebugInfo = !this.gameSettings.showDebugInfo;
+                                this.gameSettings.showDebugInfo++;
                                 this.gameSettings.showDebugProfilerChart = GuiScreen.isShiftKeyDown();
+                                if (this.gameSettings.showDebugInfo > 2)
+                                {
+                                    this.gameSettings.showDebugInfo = 0;
+                                }
                             }
 
                             if (Keyboard.getEventKey() == 63)
@@ -1699,7 +1928,7 @@
                             }
                         }
 
-                        if (this.gameSettings.showDebugInfo && this.gameSettings.showDebugProfilerChart)
+                        if (this.gameSettings.showDebugInfo > 0 && this.gameSettings.showDebugProfilerChart)
                         {
                             if (Keyboard.getEventKey() == 11)
                             {
@@ -1883,6 +2112,8 @@
 
         this.mcProfiler.endSection();
         this.systemTime = getSystemTime();
+
+        return renderGUI;
     }
 
     /**
