--- a/net/minecraft/client/main/Main.java
+++ b/net/minecraft/client/main/Main.java
@@ -2,6 +2,8 @@
 
 import com.google.common.collect.HashMultimap;
 import com.google.gson.Gson;
+import cpw.mods.fml.relauncher.Side;
+import cpw.mods.fml.relauncher.SideOnly;
 import java.io.File;
 import java.lang.reflect.ParameterizedType;
 import java.net.Authenticator;
@@ -9,6 +11,8 @@
 import java.net.PasswordAuthentication;
 import java.net.Proxy;
 import java.net.Proxy.Type;
+import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -21,6 +25,7 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.util.Session;
 
+@SideOnly(Side.CLIENT)
 public class Main
 {
     private static final java.lang.reflect.Type field_152370_a = new ParameterizedType()
@@ -44,7 +49,7 @@
                     return null;
                 }
             }
-                                                };
+            };
         }
         public java.lang.reflect.Type getRawType()
         {
@@ -57,90 +62,118 @@
     };
     private static final String __OBFID = "CL_00001461";
 
+    /** MINECRIFT FORGE **/
+    public static String[] sanitiseParams(String[] p_main_0_) {
+
+        List<String> sanitisedParams = new ArrayList<String>();
+        for (int i = 0; i < p_main_0_.length; i++) {
+            String key = p_main_0_[i];
+            i++;
+            if (i < p_main_0_.length) {
+                String value = p_main_0_[i];
+                boolean alreadyPresent = false;
+                for (String curVal : sanitisedParams){
+                    if (curVal.contains(key)){
+                        alreadyPresent = true;
+                        break;
+                    }
+                }
+                if (!alreadyPresent) {
+                    sanitisedParams.add(key);
+                    sanitisedParams.add(value);
+                }
+            }
+        }
+        return sanitisedParams.toArray(new String[0]);
+    }
+
     public static void main(String[] p_main_0_)
     {
+        p_main_0_ = sanitiseParams(p_main_0_);
+        System.out.println("MAIN ARGS (sanitised): " + Arrays.asList(p_main_0_).toString());
+    /** END MINECRIFT FORGE **/
         System.setProperty("java.net.preferIPv4Stack", "true");
-        OptionParser var1 = new OptionParser();
-        var1.allowsUnrecognizedOptions();
-        var1.accepts("demo");
-        var1.accepts("fullscreen");
-        ArgumentAcceptingOptionSpec var2 = var1.accepts("server").withRequiredArg();
-        ArgumentAcceptingOptionSpec var3 = var1.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(Integer.valueOf(25565), new Integer[0]);
-        ArgumentAcceptingOptionSpec var4 = var1.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File("."), new File[0]);
-        ArgumentAcceptingOptionSpec var5 = var1.accepts("assetsDir").withRequiredArg().ofType(File.class);
-        ArgumentAcceptingOptionSpec var6 = var1.accepts("resourcePackDir").withRequiredArg().ofType(File.class);
-        ArgumentAcceptingOptionSpec var7 = var1.accepts("proxyHost").withRequiredArg();
-        ArgumentAcceptingOptionSpec var8 = var1.accepts("proxyPort").withRequiredArg().defaultsTo("8080", new String[0]).ofType(Integer.class);
-        ArgumentAcceptingOptionSpec var9 = var1.accepts("proxyUser").withRequiredArg();
-        ArgumentAcceptingOptionSpec var10 = var1.accepts("proxyPass").withRequiredArg();
-        ArgumentAcceptingOptionSpec var11 = var1.accepts("username").withRequiredArg().defaultsTo("Player" + Minecraft.getSystemTime() % 1000L, new String[0]);
-        ArgumentAcceptingOptionSpec var12 = var1.accepts("uuid").withRequiredArg();
-        ArgumentAcceptingOptionSpec var13 = var1.accepts("accessToken").withRequiredArg().required();
-        ArgumentAcceptingOptionSpec var14 = var1.accepts("version").withRequiredArg().required();
-        ArgumentAcceptingOptionSpec var15 = var1.accepts("width").withRequiredArg().ofType(Integer.class).defaultsTo(Integer.valueOf(854), new Integer[0]);
-        ArgumentAcceptingOptionSpec var16 = var1.accepts("height").withRequiredArg().ofType(Integer.class).defaultsTo(Integer.valueOf(480), new Integer[0]);
-        ArgumentAcceptingOptionSpec var17 = var1.accepts("userProperties").withRequiredArg().required();
-        ArgumentAcceptingOptionSpec var18 = var1.accepts("assetIndex").withRequiredArg();
-        ArgumentAcceptingOptionSpec var19 = var1.accepts("userType").withRequiredArg().defaultsTo("legacy", new String[0]);
-        NonOptionArgumentSpec var20 = var1.nonOptions();
-        OptionSet var21 = var1.parse(p_main_0_);
-        List var22 = var21.valuesOf(var20);
-        String var23 = (String)var21.valueOf(var7);
-        Proxy var24 = Proxy.NO_PROXY;
+        OptionParser optionparser = new OptionParser();
+        optionparser.allowsUnrecognizedOptions();
+        optionparser.accepts("demo");
+        optionparser.accepts("fullscreen");
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec = optionparser.accepts("server").withRequiredArg();
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec1 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(Integer.valueOf(25565), new Integer[0]);
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec2 = optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File("."), new File[0]);
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec3 = optionparser.accepts("assetsDir").withRequiredArg().ofType(File.class);
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec4 = optionparser.accepts("resourcePackDir").withRequiredArg().ofType(File.class);
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec5 = optionparser.accepts("proxyHost").withRequiredArg();
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec6 = optionparser.accepts("proxyPort").withRequiredArg().defaultsTo("8080", new String[0]).ofType(Integer.class);
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec7 = optionparser.accepts("proxyUser").withRequiredArg();
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec8 = optionparser.accepts("proxyPass").withRequiredArg();
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec9 = optionparser.accepts("username").withRequiredArg().defaultsTo("Player" + Minecraft.getSystemTime() % 1000L, new String[0]);
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec10 = optionparser.accepts("uuid").withRequiredArg();
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec11 = optionparser.accepts("accessToken").withRequiredArg().required();
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec12 = optionparser.accepts("version").withRequiredArg().required();
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec13 = optionparser.accepts("width").withRequiredArg().ofType(Integer.class).defaultsTo(Integer.valueOf(854), new Integer[0]);
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec14 = optionparser.accepts("height").withRequiredArg().ofType(Integer.class).defaultsTo(Integer.valueOf(480), new Integer[0]);
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec15 = optionparser.accepts("userProperties").withRequiredArg().required();
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec16 = optionparser.accepts("assetIndex").withRequiredArg();
+        ArgumentAcceptingOptionSpec argumentacceptingoptionspec17 = optionparser.accepts("userType").withRequiredArg().defaultsTo("legacy", new String[0]);
+        NonOptionArgumentSpec nonoptionargumentspec = optionparser.nonOptions();
+        OptionSet optionset = optionparser.parse(p_main_0_);
+        List list = optionset.valuesOf(nonoptionargumentspec);
+        String s = (String)optionset.valueOf(argumentacceptingoptionspec5);
+        Proxy proxy = Proxy.NO_PROXY;
 
-        if (var23 != null)
+        if (s != null)
         {
             try
             {
-                var24 = new Proxy(Type.SOCKS, new InetSocketAddress(var23, ((Integer)var21.valueOf(var8)).intValue()));
+                proxy = new Proxy(Type.SOCKS, new InetSocketAddress(s, ((Integer)optionset.valueOf(argumentacceptingoptionspec6)).intValue()));
             }
-            catch (Exception var41)
+            catch (Exception exception)
             {
                 ;
             }
         }
 
-        final String var25 = (String)var21.valueOf(var9);
-        final String var26 = (String)var21.valueOf(var10);
+        final String s1 = (String)optionset.valueOf(argumentacceptingoptionspec7);
+        final String s2 = (String)optionset.valueOf(argumentacceptingoptionspec8);
 
-        if (!var24.equals(Proxy.NO_PROXY) && func_110121_a(var25) && func_110121_a(var26))
+        if (!proxy.equals(Proxy.NO_PROXY) && func_110121_a(s1) && func_110121_a(s2))
         {
             Authenticator.setDefault(new Authenticator()
             {
                 private static final String __OBFID = "CL_00000829";
                 protected PasswordAuthentication getPasswordAuthentication()
                 {
-                    return new PasswordAuthentication(var25, var26.toCharArray());
+                    return new PasswordAuthentication(s1, s2.toCharArray());
                 }
             });
         }
 
-        int var27 = ((Integer)var21.valueOf(var15)).intValue();
-        int var28 = ((Integer)var21.valueOf(var16)).intValue();
-        boolean var29 = var21.has("fullscreen");
-        boolean var30 = var21.has("demo");
-        String var31 = (String)var21.valueOf(var14);
-        HashMultimap var32 = HashMultimap.create();
-        Iterator var33 = ((Map)(new Gson()).fromJson((String)var21.valueOf(var17), field_152370_a)).entrySet().iterator();
-
-        while (var33.hasNext())
-        {
-            Entry var34 = (Entry)var33.next();
-            var32.putAll(var34.getKey(), (Iterable)var34.getValue());
-        }
-
-        File var42 = (File)var21.valueOf(var4);
-        File var43 = var21.has(var5) ? (File)var21.valueOf(var5) : new File(var42, "assets/");
-        File var35 = var21.has(var6) ? (File)var21.valueOf(var6) : new File(var42, "resourcepacks/");
-        String var36 = var21.has(var12) ? (String)var12.value(var21) : (String)var11.value(var21);
-        String var37 = var21.has(var18) ? (String)var18.value(var21) : null;
-        Session var38 = new Session((String)var11.value(var21), var36, (String)var13.value(var21), (String)var19.value(var21));
-        Minecraft var39 = new Minecraft(var38, var27, var28, var29, var30, var42, var43, var35, var24, var31, var32, var37);
-        String var40 = (String)var21.valueOf(var2);
+        int i = ((Integer)optionset.valueOf(argumentacceptingoptionspec13)).intValue();
+        int j = ((Integer)optionset.valueOf(argumentacceptingoptionspec14)).intValue();
+        boolean flag = optionset.has("fullscreen");
+        boolean flag1 = optionset.has("demo");
+        String s3 = (String)optionset.valueOf(argumentacceptingoptionspec12);
+        HashMultimap hashmultimap = HashMultimap.create();
+        Iterator iterator = ((Map)(new Gson()).fromJson((String)optionset.valueOf(argumentacceptingoptionspec15), field_152370_a)).entrySet().iterator();
+
+        while (iterator.hasNext())
+        {
+            Entry entry = (Entry)iterator.next();
+            hashmultimap.putAll(entry.getKey(), (Iterable)entry.getValue());
+        }
+
+        File file2 = (File)optionset.valueOf(argumentacceptingoptionspec2);
+        File file3 = optionset.has(argumentacceptingoptionspec3) ? (File)optionset.valueOf(argumentacceptingoptionspec3) : new File(file2, "assets/");
+        File file1 = optionset.has(argumentacceptingoptionspec4) ? (File)optionset.valueOf(argumentacceptingoptionspec4) : new File(file2, "resourcepacks/");
+        String s4 = optionset.has(argumentacceptingoptionspec10) ? (String)argumentacceptingoptionspec10.value(optionset) : (String)argumentacceptingoptionspec9.value(optionset);
+        String s5 = optionset.has(argumentacceptingoptionspec16) ? (String)argumentacceptingoptionspec16.value(optionset) : null;
+        Session session = new Session((String)argumentacceptingoptionspec9.value(optionset), s4, (String)argumentacceptingoptionspec11.value(optionset), (String)argumentacceptingoptionspec17.value(optionset));
+        Minecraft minecraft = new Minecraft(session, i, j, flag, flag1, file2, file3, file1, proxy, s3, hashmultimap, s5);
+        String s6 = (String)optionset.valueOf(argumentacceptingoptionspec);
 
-        if (var40 != null)
+        if (s6 != null)
         {
-            var39.setServer(var40, ((Integer)var21.valueOf(var3)).intValue());
+            minecraft.setServer(s6, ((Integer)optionset.valueOf(argumentacceptingoptionspec1)).intValue());
         }
 
         Runtime.getRuntime().addShutdownHook(new Thread("Client Shutdown Thread")
@@ -152,17 +185,17 @@
             }
         });
 
-        if (!var22.isEmpty())
+        if (!list.isEmpty())
         {
-            System.out.println("Completely ignored arguments: " + var22);
+            System.out.println("Completely ignored arguments: " + list);
         }
 
         Thread.currentThread().setName("Client thread");
-        var39.run();
+        minecraft.run();
     }
 
     private static boolean func_110121_a(String p_110121_0_)
     {
         return p_110121_0_ != null && !p_110121_0_.isEmpty();
     }
-}
+}
\ No newline at end of file
