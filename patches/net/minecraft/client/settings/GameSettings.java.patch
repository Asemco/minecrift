--- a/net/minecraft/client/settings/GameSettings.java
+++ b/net/minecraft/client/settings/GameSettings.java
@@ -2,17 +2,20 @@
 
 import com.google.common.collect.Maps;
 import com.google.gson.Gson;
-import java.io.BufferedReader;
+
 import java.io.File;
 import java.io.FileReader;
 import java.io.FileWriter;
-import java.io.PrintWriter;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
+
+import com.mtbs3d.minecrift.settings.profile.ProfileManager;
+import com.mtbs3d.minecrift.settings.profile.ProfileReader;
+import com.mtbs3d.minecrift.settings.profile.ProfileWriter;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.audio.SoundCategory;
 import net.minecraft.client.gui.GuiNewChat;
@@ -38,6 +41,7 @@
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.json.JSONObject;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
@@ -80,7 +84,9 @@
     /** Advanced OpenGL */
     public boolean advancedOpengl;
     public boolean fboEnable = true;
-    public int limitFramerate = 120;
+    /** MINECRIFT **/
+    public int limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
+    /** END MINECRIFT **/
     public boolean fancyGraphics = true;
 
     /** Smooth Lighting */
@@ -107,12 +113,10 @@
     public int ofAutoSaveTicks = 4000;
     public boolean ofLagometer = false;
     public boolean ofProfiler = false;
-    public boolean ofShowFps = false;
     public boolean ofWeather = true;
     public boolean ofSky = true;
     public boolean ofStars = true;
     public boolean ofSunMoon = true;
-    public int ofVignette = 0;
     public int ofChunkUpdates = 1;
     public int ofChunkLoading = 0;
     public boolean ofChunkUpdatesDynamic = false;
@@ -131,7 +135,7 @@
     public int ofConnectedTextures = 2;
     public boolean ofNaturalTextures = false;
     public boolean ofFastMath = false;
-    public boolean ofFastRender = false;
+    public boolean ofFastRender = true;
     public int ofTranslucentBlocks = 2;
     public int ofAnimatedWater = 0;
     public int ofAnimatedLava = 0;
@@ -277,88 +281,33 @@
 
     public GameSettings(Minecraft par1Minecraft, File par2File)
     {
-        this.chatVisibility = EntityPlayer.EnumChatVisibility.FULL;
-        this.chatColours = true;
-        this.chatLinks = true;
-        this.chatLinksPrompt = true;
-        this.chatOpacity = 1.0F;
-        this.snooperEnabled = true;
-        this.enableVsync = true;
-        this.pauseOnLostFocus = true;
-        this.showCape = true;
-        this.heldItemTooltips = true;
-        this.chatScale = 1.0F;
-        this.chatWidth = 1.0F;
-        this.chatHeightUnfocused = 0.44366196F;
-        this.chatHeightFocused = 1.0F;
-        this.showInventoryAchievementHint = true;
-        this.mipmapLevels = 4;
-        this.anisotropicFiltering = 1;
-        this.mapSoundLevels = Maps.newEnumMap(SoundCategory.class);
-        this.streamBytesPerPixel = 0.5F;
-        this.streamMicVolume = 1.0F;
-        this.streamGameVolume = 1.0F;
-        this.streamKbps = 0.5412844F;
-        this.streamFps = 0.31690142F;
-        this.streamCompression = 1;
-        this.streamSendMetadata = true;
-        this.streamPreferredServer = "";
-        this.streamChatEnabled = 0;
-        this.streamChatUserFilter = 0;
-        this.streamMicToggleBehavior = 0;
-        this.keyBindForward = new KeyBinding("key.forward", 17, "key.categories.movement");
-        this.keyBindLeft = new KeyBinding("key.left", 30, "key.categories.movement");
-        this.keyBindBack = new KeyBinding("key.back", 31, "key.categories.movement");
-        this.keyBindRight = new KeyBinding("key.right", 32, "key.categories.movement");
-        this.keyBindJump = new KeyBinding("key.jump", 57, "key.categories.movement");
-        this.keyBindSneak = new KeyBinding("key.sneak", 42, "key.categories.movement");
-        this.keyBindInventory = new KeyBinding("key.inventory", 18, "key.categories.inventory");
-        this.keyBindUseItem = new KeyBinding("key.use", -99, "key.categories.gameplay");
-        this.keyBindDrop = new KeyBinding("key.drop", 16, "key.categories.gameplay");
-        this.keyBindAttack = new KeyBinding("key.attack", -100, "key.categories.gameplay");
-        this.keyBindPickBlock = new KeyBinding("key.pickItem", -98, "key.categories.gameplay");
-        this.keyBindSprint = new KeyBinding("key.sprint", 29, "key.categories.gameplay");
-        this.keyBindChat = new KeyBinding("key.chat", 20, "key.categories.multiplayer");
-        this.keyBindPlayerList = new KeyBinding("key.playerlist", 15, "key.categories.multiplayer");
-        this.keyBindCommand = new KeyBinding("key.command", 53, "key.categories.multiplayer");
-        this.keyBindScreenshot = new KeyBinding("key.screenshot", 60, "key.categories.misc");
-        this.keyBindTogglePerspective = new KeyBinding("key.togglePerspective", 63, "key.categories.misc");
-        this.keyBindSmoothCamera = new KeyBinding("key.smoothCamera", 0, "key.categories.misc");
-        this.keyBindFullscreen = new KeyBinding("key.fullscreen", 87, "key.categories.misc");
-        this.keyBindStreamStartStop = new KeyBinding("key.streamStartStop", 64, "key.categories.stream");
-        this.keyBindStreamPauseUnpause = new KeyBinding("key.streamPauseUnpause", 65, "key.categories.stream");
-        this.keyBindStreamCommercials = new KeyBinding("key.streamCommercial", 0, "key.categories.stream");
-        this.keyBindStreamToggleMic = new KeyBinding("key.streamToggleMic", 0, "key.categories.stream");
-        this.keyBindsHotbar = new KeyBinding[] {new KeyBinding("key.hotbar.1", 2, "key.categories.inventory"), new KeyBinding("key.hotbar.2", 3, "key.categories.inventory"), new KeyBinding("key.hotbar.3", 4, "key.categories.inventory"), new KeyBinding("key.hotbar.4", 5, "key.categories.inventory"), new KeyBinding("key.hotbar.5", 6, "key.categories.inventory"), new KeyBinding("key.hotbar.6", 7, "key.categories.inventory"), new KeyBinding("key.hotbar.7", 8, "key.categories.inventory"), new KeyBinding("key.hotbar.8", 9, "key.categories.inventory"), new KeyBinding("key.hotbar.9", 10, "key.categories.inventory")};
-        this.keyBindings = (KeyBinding[])((KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.keyBindCommand, this.keyBindScreenshot, this.keyBindTogglePerspective, this.keyBindSmoothCamera, this.keyBindSprint, this.keyBindStreamStartStop, this.keyBindStreamPauseUnpause, this.keyBindStreamCommercials, this.keyBindStreamToggleMic, this.keyBindFullscreen}, this.keyBindsHotbar));
-        this.difficulty = EnumDifficulty.NORMAL;
-        this.lastServer = "";
-        this.noclipRate = 1.0F;
-        this.debugCamRate = 1.0F;
-        this.fovSetting = 70.0F;
-        this.language = "en_US";
-        this.forceUnicodeFont = false;
+        /** MINECRIFT **/
         this.mc = par1Minecraft;
-        this.optionsFile = new File(par2File, "options.txt");
-        this.optionsFileOF = new File(par2File, "optionsof.txt");
-        this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
-        this.ofKeyBindZoom = new KeyBinding("Zoom", 29, "key.categories.misc");
-        this.keyBindings = (KeyBinding[])((KeyBinding[])ArrayUtils.add(this.keyBindings, this.ofKeyBindZoom));
+        init();
+        resetSettings(null, false);
         GameSettings.Options.RENDER_DISTANCE.setValueMax(32.0F);
-        this.renderDistanceChunks = par1Minecraft.isJava64bit() ? 12 : 8;
+        this.renderDistanceChunks = par1Minecraft.isJava64bit() ? 8 : 8;
         this.loadOptions();
         Config.initGameSettings(this);
     }
 
     public GameSettings()
     {
+        init();
+    }
+
+    private void init()
+    {
+        /** END MINECRIFT **/
         this.chatVisibility = EntityPlayer.EnumChatVisibility.FULL;
         this.chatColours = true;
         this.chatLinks = true;
         this.chatLinksPrompt = true;
         this.chatOpacity = 1.0F;
         this.snooperEnabled = true;
-        this.enableVsync = true;
+        /** MINECRIFT */
+        this.enableVsync = false;
+        /** END MINECRIFT **/
         this.pauseOnLostFocus = true;
         this.showCape = true;
         this.heldItemTooltips = true;
@@ -476,14 +425,16 @@
 
         if (par1EnumOptions == GameSettings.Options.FRAMERATE_LIMIT)
         {
-            this.limitFramerate = (int)par2;
+            /** MINECRIFT **/
+            this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
             this.enableVsync = false;
 
             if (this.limitFramerate <= 0)
             {
                 this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
-                this.enableVsync = true;
+                this.enableVsync = false;
             }
+            /** END MINECRIFT **/
 
             this.updateVSync();
         }
@@ -832,11 +783,6 @@
             this.ofLagometer = !this.ofLagometer;
         }
 
-        if (par1EnumOptions == GameSettings.Options.SHOW_FPS)
-        {
-            this.ofShowFps = !this.ofShowFps;
-        }
-
         if (par1EnumOptions == GameSettings.Options.AUTOSAVE_TICKS)
         {
             this.ofAutoSaveTicks *= 10;
@@ -891,16 +837,6 @@
             this.ofSunMoon = !this.ofSunMoon;
         }
 
-        if (par1EnumOptions == GameSettings.Options.VIGNETTE)
-        {
-            ++this.ofVignette;
-
-            if (this.ofVignette > 2)
-            {
-                this.ofVignette = 0;
-            }
-        }
-
         if (par1EnumOptions == GameSettings.Options.CHUNK_UPDATES)
         {
             ++this.ofChunkUpdates;
@@ -1027,13 +963,6 @@
         if (par1EnumOptions == GameSettings.Options.FAST_RENDER)
         {
             this.ofFastRender = !this.ofFastRender;
-
-            if (this.ofFastRender)
-            {
-                this.mc.entityRenderer.stopUseShader();
-            }
-
-            Config.updateFramebufferSize();
             this.mc.renderGlobal.loadRenderers();
         }
 
@@ -1257,8 +1186,11 @@
 
         if (par1EnumOptions == GameSettings.Options.ENABLE_VSYNC)
         {
-            this.enableVsync = !this.enableVsync;
-            Display.setVSyncEnabled(this.enableVsync);
+            /** MINECRIFT **/
+            this.enableVsync = false;
+			// Don't update Vsync - need to be off
+            Display.setVSyncEnabled(this.enableVsync); 
+			/** END MINECRIFT */
         }
 
         this.saveOptions();
@@ -1638,10 +1570,6 @@
         {
             return this.ofLagometer ? var2 + "ON" : var2 + "OFF";
         }
-        else if (par1EnumOptions == GameSettings.Options.SHOW_FPS)
-        {
-            return this.ofShowFps ? var2 + "ON" : var2 + "OFF";
-        }
         else if (par1EnumOptions == GameSettings.Options.AUTOSAVE_TICKS)
         {
             return this.ofAutoSaveTicks <= 40 ? var2 + "Default (2s)" : (this.ofAutoSaveTicks <= 400 ? var2 + "20s" : (this.ofAutoSaveTicks <= 4000 ? var2 + "3min" : var2 + "30min"));
@@ -1690,20 +1618,6 @@
         {
             return this.ofSunMoon ? var2 + "ON" : var2 + "OFF";
         }
-        else if (par1EnumOptions == GameSettings.Options.VIGNETTE)
-        {
-            switch (this.ofVignette)
-            {
-                case 1:
-                    return var2 + "Fast";
-
-                case 2:
-                    return var2 + "Fancy";
-
-                default:
-                    return var2 + "Default";
-            }
-        }
         else if (par1EnumOptions == GameSettings.Options.CHUNK_UPDATES)
         {
             return var2 + this.ofChunkUpdates;
@@ -1874,16 +1788,24 @@
     /**
      * Loads the options from the options file. It appears that this has replaced the previous 'loadOptions'
      */
+    /** MINECRIFT **/
     public void loadOptions()
     {
+        loadOptions(null); // Use current profile
+    }
+
+    public void loadOptions(JSONObject theProfile)
+    {
+    /** END MINECRIFT **/
         try
         {
-            if (!this.optionsFile.exists())
+            /** MINECRIFT **/
+            if (this.optionsFile == null || !this.optionsFile.exists())
             {
-                return;
+                //return;
             }
-
-            BufferedReader var9 = new BufferedReader(new FileReader(this.optionsFile));
+            ProfileReader var9 = new ProfileReader(ProfileManager.PROFILE_SET_MC, theProfile);
+            /** END MINECRIFT **/
             String var2 = "";
             this.mapSoundLevels.clear();
 
@@ -1955,14 +1877,16 @@
 
                     if (var8[0].equals("maxFps"))
                     {
-                        this.limitFramerate = Integer.parseInt(var8[1]);
+                        /** MINECRIFT **/
+                        this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
                         this.enableVsync = false;
 
                         if (this.limitFramerate <= 0)
                         {
                             this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
-                            this.enableVsync = true;
+                            this.enableVsync = false;
                         }
+                        /** END MINECRIFT **/
 
                         this.updateVSync();
                     }
@@ -2060,8 +1984,10 @@
 
                     if (var8[0].equals("enableVsync"))
                     {
-                        this.enableVsync = var8[1].equals("true");
+                        /** MINECRIFT **/
+                        this.enableVsync = false;//var8[1].equals("true");
                         this.updateVSync();
+                        /** END MINECRIFT **/
                     }
 
                     if (var8[0].equals("hideServerAddress"))
@@ -2255,21 +2181,28 @@
     /**
      * Saves the options to the options file.
      */
+    /** MINECRIFT **/
     public void saveOptions()
     {
+        saveOptions(null); // Use current profile
+    }
+
+    public void saveOptions(JSONObject theProfile)
+    {
         if (Reflector.FMLClientHandler.exists())
         {
             Object var6 = Reflector.call(Reflector.FMLClientHandler_instance, new Object[0]);
 
             if (var6 != null && Reflector.callBoolean(var6, Reflector.FMLClientHandler_isLoading, new Object[0]))
             {
-                return;
+                //return;  // Always continue to save settings
             }
         }
 
         try
         {
-            PrintWriter var81 = new PrintWriter(new FileWriter(this.optionsFile));
+            ProfileWriter var81 = new ProfileWriter(ProfileManager.PROFILE_SET_MC, theProfile);
+    /** END MINECRIFT **/
             var81.println("invertYMouse:" + this.invertMouse);
             var81.println("mouseSensitivity:" + this.mouseSensitivity);
             var81.println("fov:" + (this.fovSetting - 70.0F) / 40.0F);
@@ -2385,23 +2318,29 @@
         return this.renderDistanceChunks >= 4 && this.clouds;
     }
 
+    /** MINECRIFT **/
     public void loadOfOptions()
     {
+        loadOfOptions(null); // Use current profile
+    }
+
+    public void loadOfOptions(JSONObject theProfile)
+    {
+    /** END MINECRIFT **/
         try
         {
             File exception = this.optionsFileOF;
-
-            if (!exception.exists())
+            /** MINECRIFT **/
+            if (exception == null || !exception.exists())
             {
                 exception = this.optionsFile;
             }
-
-            if (!exception.exists())
+            if (exception == null || !exception.exists())
             {
-                return;
+                //return;
             }
-
-            BufferedReader bufferedreader = new BufferedReader(new FileReader(exception));
+            ProfileReader bufferedreader = new ProfileReader(ProfileManager.PROFILE_SET_OF);
+            /** END MINECRIFT **/
             String s = "";
 
             while ((s = bufferedreader.readLine()) != null)
@@ -2618,11 +2557,6 @@
                         this.ofLagometer = Boolean.valueOf(exception1[1]).booleanValue();
                     }
 
-                    if (exception1[0].equals("ofShowFps") && exception1.length >= 2)
-                    {
-                        this.ofShowFps = Boolean.valueOf(exception1[1]).booleanValue();
-                    }
-
                     if (exception1[0].equals("ofAutoSaveTicks") && exception1.length >= 2)
                     {
                         this.ofAutoSaveTicks = Integer.valueOf(exception1[1]).intValue();
@@ -2661,12 +2595,6 @@
                         this.ofSunMoon = Boolean.valueOf(exception1[1]).booleanValue();
                     }
 
-                    if (exception1[0].equals("ofVignette") && exception1.length >= 2)
-                    {
-                        this.ofVignette = Integer.valueOf(exception1[1]).intValue();
-                        this.ofVignette = Config.limit(this.ofVignette, 0, 2);
-                    }
-
                     if (exception1[0].equals("ofChunkUpdates") && exception1.length >= 2)
                     {
                         this.ofChunkUpdates = Integer.valueOf(exception1[1]).intValue();
@@ -2802,11 +2730,20 @@
         }
     }
 
+    /** MINECRIFT **/
     public void saveOfOptions()
     {
+        saveOfOptions(null); // Use current profile
+    }
+
+    public void saveOfOptions(JSONObject theProfile)
+    {
+    /** END MINECRIFT **/
         try
         {
-            PrintWriter exception = new PrintWriter(new FileWriter(this.optionsFileOF));
+            /** MINECRIFT **/
+            ProfileWriter exception = new ProfileWriter(ProfileManager.PROFILE_SET_OF, theProfile);
+            /** END MINECRIFT **/
             exception.println("ofRenderDistanceChunks:" + this.renderDistanceChunks);
             exception.println("ofFogType:" + this.ofFogType);
             exception.println("ofFogStart:" + this.ofFogStart);
@@ -2842,7 +2779,6 @@
             exception.println("ofAnimatedItems:" + this.ofAnimatedItems);
             exception.println("ofRainSplash:" + this.ofRainSplash);
             exception.println("ofLagometer:" + this.ofLagometer);
-            exception.println("ofShowFps:" + this.ofShowFps);
             exception.println("ofAutoSaveTicks:" + this.ofAutoSaveTicks);
             exception.println("ofBetterGrass:" + this.ofBetterGrass);
             exception.println("ofConnectedTextures:" + this.ofConnectedTextures);
@@ -2850,7 +2786,6 @@
             exception.println("ofSky:" + this.ofSky);
             exception.println("ofStars:" + this.ofStars);
             exception.println("ofSunMoon:" + this.ofSunMoon);
-            exception.println("ofVignette:" + this.ofVignette);
             exception.println("ofChunkUpdates:" + this.ofChunkUpdates);
             exception.println("ofChunkLoading:" + this.ofChunkLoading);
             exception.println("ofChunkUpdatesDynamic:" + this.ofChunkUpdatesDynamic);
@@ -2882,8 +2817,15 @@
         }
     }
 
+    /** MINECRIFT **/
     public void resetSettings()
     {
+        resetSettings(null, true); // Use current profile
+    }
+
+    public void resetSettings(JSONObject theProfile, boolean save)
+    {
+    /** END MINECRIFT **/
         this.renderDistanceChunks = 8;
         this.viewBobbing = true;
         this.anaglyph = false;
@@ -2912,7 +2854,7 @@
         this.ofSmoothWorld = Config.isSingleProcessor();
         this.ofLazyChunkLoading = Config.isSingleProcessor();
         this.ofFastMath = false;
-        this.ofFastRender = false;
+        this.ofFastRender = true;
         this.ofTranslucentBlocks = 2;
         this.ofAoLevel = 1.0F;
         this.ofAaLevel = 0;
@@ -2925,13 +2867,11 @@
         this.ofBetterGrass = 3;
         this.ofAutoSaveTicks = 4000;
         this.ofLagometer = false;
-        this.ofShowFps = false;
         this.ofProfiler = false;
         this.ofWeather = true;
         this.ofSky = true;
         this.ofStars = true;
         this.ofSunMoon = true;
-        this.ofVignette = 0;
         this.ofChunkUpdates = 1;
         this.ofChunkLoading = 0;
         this.ofChunkUpdatesDynamic = false;
@@ -2966,17 +2906,38 @@
         this.ofAnimatedTerrain = true;
         this.ofAnimatedItems = true;
         this.ofAnimatedTextures = true;
-        this.mc.renderGlobal.updateCapes();
-        this.updateWaterOpacity();
-        this.mc.renderGlobal.setAllRenderersVisible();
-        this.mc.refreshResources();
-        this.saveOptions();
+
+        /** MINECRIFT **/
+
+        // Set reasonable Optifine / game defaults
+
+        this.limitFramerate = (int) GameSettings.Options.FRAMERATE_LIMIT.getValueMax(); // No frame limit
+        this.enableVsync = false;       // VSYNC OFF
+        this.ofChunkLoading = 1;        // Smooth chunk loading
+        this.renderDistanceChunks = 8;  // Reasonable render distance for 75+ fps
+        this.ofFogType = 2;             // Fancy fog to prevent draw distance changes in edge of FOV
+        this.anisotropicFiltering = 16;
+        this.ofMipmapType = 3;
+        this.ofFastMath = true;
+
+        if (this.mc.renderGlobal != null) {
+            this.mc.renderGlobal.updateCapes();
+            this.updateWaterOpacity();
+            this.mc.renderGlobal.setAllRenderersVisible();
+            this.mc.refreshResources();
+        }
+        if (save) {
+            this.saveOptions(theProfile);
+        }
+        /** END MINECRIFT **/
     }
 
     public void updateVSync()
     {
-        Display.setVSyncEnabled(this.enableVsync);
-    }
+		/** MINECRIFT */ // Always needs to be off
+        Display.setVSyncEnabled(false);
+		/** END MINECRIFT */
+	}
 
     private void updateWaterOpacity()
     {
@@ -3104,53 +3065,51 @@
         ANIMATED_PORTAL("ANIMATED_PORTAL", 59, "", 999, "Portal Animated", false, false),
         AO_LEVEL("AO_LEVEL", 60, "", 999, "Smooth Lighting Level", true, false),
         LAGOMETER("LAGOMETER", 61, "", 999, "Lagometer", false, false),
-        SHOW_FPS("SHOW_FPS", 62, "", 999, "Show FPS", false, false),
-        AUTOSAVE_TICKS("AUTOSAVE_TICKS", 63, "", 999, "Autosave", false, false),
-        BETTER_GRASS("BETTER_GRASS", 64, "", 999, "Better Grass", false, false),
-        ANIMATED_REDSTONE("ANIMATED_REDSTONE", 65, "", 999, "Redstone Animated", false, false),
-        ANIMATED_EXPLOSION("ANIMATED_EXPLOSION", 66, "", 999, "Explosion Animated", false, false),
-        ANIMATED_FLAME("ANIMATED_FLAME", 67, "", 999, "Flame Animated", false, false),
-        ANIMATED_SMOKE("ANIMATED_SMOKE", 68, "", 999, "Smoke Animated", false, false),
-        WEATHER("WEATHER", 69, "", 999, "Weather", false, false),
-        SKY("SKY", 70, "", 999, "Sky", false, false),
-        STARS("STARS", 71, "", 999, "Stars", false, false),
-        SUN_MOON("SUN_MOON", 72, "", 999, "Sun & Moon", false, false),
-        VIGNETTE("VIGNETTE", 73, "", 999, "Vignette", false, false),
-        CHUNK_UPDATES("CHUNK_UPDATES", 74, "", 999, "Chunk Updates", false, false),
-        CHUNK_UPDATES_DYNAMIC("CHUNK_UPDATES_DYNAMIC", 75, "", 999, "Dynamic Updates", false, false),
-        TIME("TIME", 76, "", 999, "Time", false, false),
-        CLEAR_WATER("CLEAR_WATER", 77, "", 999, "Clear Water", false, false),
-        SMOOTH_WORLD("SMOOTH_WORLD", 78, "", 999, "Smooth World", false, false),
-        DEPTH_FOG("DEPTH_FOG", 79, "", 999, "Depth Fog", false, false),
-        VOID_PARTICLES("VOID_PARTICLES", 80, "", 999, "Void Particles", false, false),
-        WATER_PARTICLES("WATER_PARTICLES", 81, "", 999, "Water Particles", false, false),
-        RAIN_SPLASH("RAIN_SPLASH", 82, "", 999, "Rain Splash", false, false),
-        PORTAL_PARTICLES("PORTAL_PARTICLES", 83, "", 999, "Portal Particles", false, false),
-        POTION_PARTICLES("POTION_PARTICLES", 84, "", 999, "Potion Particles", false, false),
-        PROFILER("PROFILER", 85, "", 999, "Debug Profiler", false, false),
-        DRIPPING_WATER_LAVA("DRIPPING_WATER_LAVA", 86, "", 999, "Dripping Water/Lava", false, false),
-        BETTER_SNOW("BETTER_SNOW", 87, "", 999, "Better Snow", false, false),
-        FULLSCREEN_MODE("FULLSCREEN_MODE", 88, "", 999, "Fullscreen Mode", false, false),
-        ANIMATED_TERRAIN("ANIMATED_TERRAIN", 89, "", 999, "Terrain Animated", false, false),
-        ANIMATED_ITEMS("ANIMATED_ITEMS", 90, "", 999, "Items Animated", false, false),
-        SWAMP_COLORS("SWAMP_COLORS", 91, "", 999, "Swamp Colors", false, false),
-        RANDOM_MOBS("RANDOM_MOBS", 92, "", 999, "Random Mobs", false, false),
-        SMOOTH_BIOMES("SMOOTH_BIOMES", 93, "", 999, "Smooth Biomes", false, false),
-        CUSTOM_FONTS("CUSTOM_FONTS", 94, "", 999, "Custom Fonts", false, false),
-        CUSTOM_COLORS("CUSTOM_COLORS", 95, "", 999, "Custom Colors", false, false),
-        SHOW_CAPES("SHOW_CAPES", 96, "", 999, "Show Capes", false, false),
-        CONNECTED_TEXTURES("CONNECTED_TEXTURES", 97, "", 999, "Connected Textures", false, false),
-        AA_LEVEL("AA_LEVEL", 98, "", 999, "Antialiasing", false, false),
-        ANIMATED_TEXTURES("ANIMATED_TEXTURES", 99, "", 999, "Textures Animated", false, false),
-        NATURAL_TEXTURES("NATURAL_TEXTURES", 100, "", 999, "Natural Textures", false, false),
-        CHUNK_LOADING("CHUNK_LOADING", 101, "", 999, "Chunk Loading", false, false),
-        HELD_ITEM_TOOLTIPS("HELD_ITEM_TOOLTIPS", 102, "", 999, "Held Item Tooltips", false, false),
-        DROPPED_ITEMS("DROPPED_ITEMS", 103, "", 999, "Dropped Items", false, false),
-        LAZY_CHUNK_LOADING("LAZY_CHUNK_LOADING", 104, "", 999, "Lazy Chunk Loading", false, false),
-        CUSTOM_SKY("CUSTOM_SKY", 105, "", 999, "Custom Sky", false, false),
-        FAST_MATH("FAST_MATH", 106, "", 999, "Fast Math", false, false),
-        FAST_RENDER("FAST_RENDER", 107, "", 999, "Fast Render", false, false),
-        TRANSLUCENT_BLOCKS("TRANSLUCENT_BLOCKS", 108, "", 999, "Translucent Blocks", false, false);
+        AUTOSAVE_TICKS("AUTOSAVE_TICKS", 62, "", 999, "Autosave", false, false),
+        BETTER_GRASS("BETTER_GRASS", 63, "", 999, "Better Grass", false, false),
+        ANIMATED_REDSTONE("ANIMATED_REDSTONE", 64, "", 999, "Redstone Animated", false, false),
+        ANIMATED_EXPLOSION("ANIMATED_EXPLOSION", 65, "", 999, "Explosion Animated", false, false),
+        ANIMATED_FLAME("ANIMATED_FLAME", 66, "", 999, "Flame Animated", false, false),
+        ANIMATED_SMOKE("ANIMATED_SMOKE", 67, "", 999, "Smoke Animated", false, false),
+        WEATHER("WEATHER", 68, "", 999, "Weather", false, false),
+        SKY("SKY", 69, "", 999, "Sky", false, false),
+        STARS("STARS", 70, "", 999, "Stars", false, false),
+        SUN_MOON("SUN_MOON", 71, "", 999, "Sun & Moon", false, false),
+        CHUNK_UPDATES("CHUNK_UPDATES", 72, "", 999, "Chunk Updates", false, false),
+        CHUNK_UPDATES_DYNAMIC("CHUNK_UPDATES_DYNAMIC", 73, "", 999, "Dynamic Updates", false, false),
+        TIME("TIME", 74, "", 999, "Time", false, false),
+        CLEAR_WATER("CLEAR_WATER", 75, "", 999, "Clear Water", false, false),
+        SMOOTH_WORLD("SMOOTH_WORLD", 76, "", 999, "Smooth World", false, false),
+        DEPTH_FOG("DEPTH_FOG", 77, "", 999, "Depth Fog", false, false),
+        VOID_PARTICLES("VOID_PARTICLES", 78, "", 999, "Void Particles", false, false),
+        WATER_PARTICLES("WATER_PARTICLES", 79, "", 999, "Water Particles", false, false),
+        RAIN_SPLASH("RAIN_SPLASH", 80, "", 999, "Rain Splash", false, false),
+        PORTAL_PARTICLES("PORTAL_PARTICLES", 81, "", 999, "Portal Particles", false, false),
+        POTION_PARTICLES("POTION_PARTICLES", 82, "", 999, "Potion Particles", false, false),
+        PROFILER("PROFILER", 83, "", 999, "Debug Profiler", false, false),
+        DRIPPING_WATER_LAVA("DRIPPING_WATER_LAVA", 84, "", 999, "Dripping Water/Lava", false, false),
+        BETTER_SNOW("BETTER_SNOW", 85, "", 999, "Better Snow", false, false),
+        FULLSCREEN_MODE("FULLSCREEN_MODE", 86, "", 999, "Fullscreen Mode", false, false),
+        ANIMATED_TERRAIN("ANIMATED_TERRAIN", 87, "", 999, "Terrain Animated", false, false),
+        ANIMATED_ITEMS("ANIMATED_ITEMS", 88, "", 999, "Items Animated", false, false),
+        SWAMP_COLORS("SWAMP_COLORS", 89, "", 999, "Swamp Colors", false, false),
+        RANDOM_MOBS("RANDOM_MOBS", 90, "", 999, "Random Mobs", false, false),
+        SMOOTH_BIOMES("SMOOTH_BIOMES", 91, "", 999, "Smooth Biomes", false, false),
+        CUSTOM_FONTS("CUSTOM_FONTS", 92, "", 999, "Custom Fonts", false, false),
+        CUSTOM_COLORS("CUSTOM_COLORS", 93, "", 999, "Custom Colors", false, false),
+        SHOW_CAPES("SHOW_CAPES", 94, "", 999, "Show Capes", false, false),
+        CONNECTED_TEXTURES("CONNECTED_TEXTURES", 95, "", 999, "Connected Textures", false, false),
+        AA_LEVEL("AA_LEVEL", 96, "", 999, "Antialiasing", false, false),
+        ANIMATED_TEXTURES("ANIMATED_TEXTURES", 97, "", 999, "Textures Animated", false, false),
+        NATURAL_TEXTURES("NATURAL_TEXTURES", 98, "", 999, "Natural Textures", false, false),
+        CHUNK_LOADING("CHUNK_LOADING", 99, "", 999, "Chunk Loading", false, false),
+        HELD_ITEM_TOOLTIPS("HELD_ITEM_TOOLTIPS", 100, "", 999, "Held Item Tooltips", false, false),
+        DROPPED_ITEMS("DROPPED_ITEMS", 101, "", 999, "Dropped Items", false, false),
+        LAZY_CHUNK_LOADING("LAZY_CHUNK_LOADING", 102, "", 999, "Lazy Chunk Loading", false, false),
+        CUSTOM_SKY("CUSTOM_SKY", 103, "", 999, "Custom Sky", false, false),
+        FAST_MATH("FAST_MATH", 104, "", 999, "Fast Math", false, false),
+        FAST_RENDER("FAST_RENDER", 105, "", 999, "Fast Render", false, false),
+        TRANSLUCENT_BLOCKS("TRANSLUCENT_BLOCKS", 106, "", 999, "Translucent Blocks", false, false);
         private final boolean enumFloat;
         private final boolean enumBoolean;
         private final String enumString;
@@ -3160,8 +3119,7 @@
         private static final GameSettings.Options[] $VALUES = new GameSettings.Options[]{INVERT_MOUSE, SENSITIVITY, FOV, GAMMA, SATURATION, RENDER_DISTANCE, VIEW_BOBBING, ANAGLYPH, ADVANCED_OPENGL, FRAMERATE_LIMIT, FBO_ENABLE, DIFFICULTY, GRAPHICS, AMBIENT_OCCLUSION, GUI_SCALE, RENDER_CLOUDS, PARTICLES, CHAT_VISIBILITY, CHAT_COLOR, CHAT_LINKS, CHAT_OPACITY, CHAT_LINKS_PROMPT, SNOOPER_ENABLED, USE_FULLSCREEN, ENABLE_VSYNC, SHOW_CAPE, TOUCHSCREEN, CHAT_SCALE, CHAT_WIDTH, CHAT_HEIGHT_FOCUSED, CHAT_HEIGHT_UNFOCUSED, MIPMAP_LEVELS, ANISOTROPIC_FILTERING, FORCE_UNICODE_FONT, STREAM_BYTES_PER_PIXEL, STREAM_VOLUME_MIC, STREAM_VOLUME_SYSTEM, STREAM_KBPS, STREAM_FPS, STREAM_COMPRESSION, STREAM_SEND_METADATA, STREAM_CHAT_ENABLED, STREAM_CHAT_USER_FILTER, STREAM_MIC_TOGGLE_BEHAVIOR};
         private static final String __OBFID = "CL_00000653";
 
-        private static final GameSettings.Options[] $VALUES$ = new GameSettings.Options[]{INVERT_MOUSE, SENSITIVITY, FOV, GAMMA, SATURATION, RENDER_DISTANCE, VIEW_BOBBING, ANAGLYPH, ADVANCED_OPENGL, FRAMERATE_LIMIT, FBO_ENABLE, DIFFICULTY, GRAPHICS, AMBIENT_OCCLUSION, GUI_SCALE, RENDER_CLOUDS, PARTICLES, CHAT_VISIBILITY, CHAT_COLOR, CHAT_LINKS, CHAT_OPACITY, CHAT_LINKS_PROMPT, SNOOPER_ENABLED, USE_FULLSCREEN, ENABLE_VSYNC, SHOW_CAPE, TOUCHSCREEN, CHAT_SCALE, CHAT_WIDTH, CHAT_HEIGHT_FOCUSED, CHAT_HEIGHT_UNFOCUSED, MIPMAP_LEVELS, ANISOTROPIC_FILTERING, FORCE_UNICODE_FONT, STREAM_BYTES_PER_PIXEL, STREAM_VOLUME_MIC, STREAM_VOLUME_SYSTEM, STREAM_KBPS, STREAM_FPS, STREAM_COMPRESSION, STREAM_SEND_METADATA, STREAM_CHAT_ENABLED, STREAM_CHAT_USER_FILTER, STREAM_MIC_TOGGLE_BEHAVIOR, FOG_FANCY, FOG_START, MIPMAP_TYPE, LOAD_FAR, PRELOADED_CHUNKS, SMOOTH_FPS, CLOUDS, CLOUD_HEIGHT, TREES, GRASS, RAIN, WATER, ANIMATED_WATER, ANIMATED_LAVA, ANIMATED_FIRE, ANIMATED_PORTAL, AO_LEVEL, LAGOMETER, SHOW_FPS, AUTOSAVE_TICKS, BETTER_GRASS, ANIMATED_REDSTONE, ANIMATED_EXPLOSION, ANIMATED_FLAME, ANIMATED_SMOKE, WEATHER, SKY, STARS, SUN_MOON, VIGNETTE, CHUNK_UPDATES, CHUNK_UPDATES_DYNAMIC, TIME, CLEAR_WATER, SMOOTH_WORLD, DEPTH_FOG, VOID_PARTICLES, WATER_PARTICLES, RAIN_SPLASH, PORTAL_PARTICLES, POTION_PARTICLES, PROFILER, DRIPPING_WATER_LAVA, BETTER_SNOW, FULLSCREEN_MODE, ANIMATED_TERRAIN, ANIMATED_ITEMS, SWAMP_COLORS, RANDOM_MOBS, SMOOTH_BIOMES, CUSTOM_FONTS, CUSTOM_COLORS, SHOW_CAPES, CONNECTED_TEXTURES, AA_LEVEL, ANIMATED_TEXTURES, NATURAL_TEXTURES, CHUNK_LOADING, HELD_ITEM_TOOLTIPS, DROPPED_ITEMS, LAZY_CHUNK_LOADING, CUSTOM_SKY, FAST_MATH, FAST_RENDER, TRANSLUCENT_BLOCKS};
-
+        private static final GameSettings.Options[] $VALUES$ = new GameSettings.Options[]{INVERT_MOUSE, SENSITIVITY, FOV, GAMMA, SATURATION, RENDER_DISTANCE, VIEW_BOBBING, ANAGLYPH, ADVANCED_OPENGL, FRAMERATE_LIMIT, FBO_ENABLE, DIFFICULTY, GRAPHICS, AMBIENT_OCCLUSION, GUI_SCALE, RENDER_CLOUDS, PARTICLES, CHAT_VISIBILITY, CHAT_COLOR, CHAT_LINKS, CHAT_OPACITY, CHAT_LINKS_PROMPT, SNOOPER_ENABLED, USE_FULLSCREEN, ENABLE_VSYNC, SHOW_CAPE, TOUCHSCREEN, CHAT_SCALE, CHAT_WIDTH, CHAT_HEIGHT_FOCUSED, CHAT_HEIGHT_UNFOCUSED, MIPMAP_LEVELS, ANISOTROPIC_FILTERING, FORCE_UNICODE_FONT, STREAM_BYTES_PER_PIXEL, STREAM_VOLUME_MIC, STREAM_VOLUME_SYSTEM, STREAM_KBPS, STREAM_FPS, STREAM_COMPRESSION, STREAM_SEND_METADATA, STREAM_CHAT_ENABLED, STREAM_CHAT_USER_FILTER, STREAM_MIC_TOGGLE_BEHAVIOR, FOG_FANCY, FOG_START, MIPMAP_TYPE, LOAD_FAR, PRELOADED_CHUNKS, SMOOTH_FPS, CLOUDS, CLOUD_HEIGHT, TREES, GRASS, RAIN, WATER, ANIMATED_WATER, ANIMATED_LAVA, ANIMATED_FIRE, ANIMATED_PORTAL, AO_LEVEL, LAGOMETER, AUTOSAVE_TICKS, BETTER_GRASS, ANIMATED_REDSTONE, ANIMATED_EXPLOSION, ANIMATED_FLAME, ANIMATED_SMOKE, WEATHER, SKY, STARS, SUN_MOON, CHUNK_UPDATES, CHUNK_UPDATES_DYNAMIC, TIME, CLEAR_WATER, SMOOTH_WORLD, DEPTH_FOG, VOID_PARTICLES, WATER_PARTICLES, RAIN_SPLASH, PORTAL_PARTICLES, POTION_PARTICLES, PROFILER, DRIPPING_WATER_LAVA, BETTER_SNOW, FULLSCREEN_MODE, ANIMATED_TERRAIN, ANIMATED_ITEMS, SWAMP_COLORS, RANDOM_MOBS, SMOOTH_BIOMES, CUSTOM_FONTS, CUSTOM_COLORS, SHOW_CAPES, CONNECTED_TEXTURES, AA_LEVEL, ANIMATED_TEXTURES, NATURAL_TEXTURES, CHUNK_LOADING, HELD_ITEM_TOOLTIPS, DROPPED_ITEMS, LAZY_CHUNK_LOADING, CUSTOM_SKY, FAST_MATH, FAST_RENDER, TRANSLUCENT_BLOCKS};
 
         public static GameSettings.Options getEnumOptions(int par0)
         {
@@ -3181,12 +3139,12 @@
             return null;
         }
 
-        private Options(String p_i46438_1_, int p_i46438_2_, String par1Str, int par2, String par3Str, boolean par4, boolean par5)
+        private Options(String p_i46429_1_, int p_i46429_2_, String par1Str, int par2, String par3Str, boolean par4, boolean par5)
         {
-            this(p_i46438_1_, p_i46438_2_, par1Str, par2, par3Str, par4, par5, 0.0F, 1.0F, 0.0F);
+            this(p_i46429_1_, p_i46429_2_, par1Str, par2, par3Str, par4, par5, 0.0F, 1.0F, 0.0F);
         }
 
-        private Options(String p_i46439_1_, int p_i46439_2_, String p_i45004_1_, int p_i45004_2_, String p_i45004_3_, boolean p_i45004_4_, boolean p_i45004_5_, float p_i45004_6_, float p_i45004_7_, float p_i45004_8_)
+        private Options(String p_i46430_1_, int p_i46430_2_, String p_i45004_1_, int p_i45004_2_, String p_i45004_3_, boolean p_i45004_4_, boolean p_i45004_5_, float p_i45004_6_, float p_i45004_7_, float p_i45004_8_)
         {
             this.enumString = p_i45004_3_;
             this.enumFloat = p_i45004_4_;
@@ -3252,9 +3210,9 @@
             return p_148264_1_;
         }
 
-        private Options(String p_i46440_1_, int p_i46440_2_, String p_i45005_1_, int p_i45005_2_, String p_i45005_3_, boolean p_i45005_4_, boolean p_i45005_5_, float p_i45005_6_, float p_i45005_7_, float p_i45005_8_, Object p_i45005_9_)
+        private Options(String p_i46431_1_, int p_i46431_2_, String p_i45005_1_, int p_i45005_2_, String p_i45005_3_, boolean p_i45005_4_, boolean p_i45005_5_, float p_i45005_6_, float p_i45005_7_, float p_i45005_8_, Object p_i45005_9_)
         {
-            this(p_i46440_1_, p_i46440_2_, p_i45005_1_, p_i45005_2_, p_i45005_3_, p_i45005_4_, p_i45005_5_, p_i45005_6_, p_i45005_7_, p_i45005_8_);
+            this(p_i46431_1_, p_i46431_2_, p_i45005_1_, p_i45005_2_, p_i45005_3_, p_i45005_4_, p_i45005_5_, p_i45005_6_, p_i45005_7_, p_i45005_8_);
         }
 
         Options(String x0, int x1, String x2, int x3, String x4, boolean x5, boolean x6, float x7, float x8, float x9, Object x10, Object x11)
