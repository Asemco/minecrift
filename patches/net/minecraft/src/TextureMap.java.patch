--- a/net/minecraft/src/TextureMap.java
+++ b/net/minecraft/src/TextureMap.java
@@ -2,18 +2,12 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import java.awt.Color;
-import java.awt.Graphics2D;
-import java.awt.image.BufferedImage;
-import java.io.File;
 import java.io.IOException;
-import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import javax.imageio.ImageIO;
 
 public class TextureMap extends AbstractTexture implements TickableTextureObject, IconRegister
 {
@@ -24,33 +18,14 @@
     private final Map mapUploadedSprites = Maps.newHashMap();
 
     /** 0 = terrain.png, 1 = items.png */
-    public final int textureType;
-    public final String basePath;
+    private final int textureType;
+    private final String basePath;
     private final TextureAtlasSprite missingImage = new TextureAtlasSprite("missingno");
-    public static TextureMap textureMapBlocks = null;
-    public static TextureMap textureMapItems = null;
-    private TextureAtlasSprite[] iconGrid = null;
-    private int iconGridSize = -1;
-    private int iconGridCountX = -1;
-    private int iconGridCountY = -1;
-    private double iconGridSizeU = -1.0D;
-    private double iconGridSizeV = -1.0D;
 
     public TextureMap(int par1, String par2Str)
     {
         this.textureType = par1;
         this.basePath = par2Str;
-
-        if (this.textureType == 0)
-        {
-            textureMapBlocks = this;
-        }
-
-        if (this.textureType == 0)
-        {
-            textureMapItems = this;
-        }
-
         this.registerIcons();
     }
 
@@ -59,7 +34,6 @@
         this.missingImage.setFramesTextureData(Lists.newArrayList(new int[][] {TextureUtil.missingTextureData}));
         this.missingImage.setIconWidth(16);
         this.missingImage.setIconHeight(16);
-        this.missingImage.setIndexInMap(0);
     }
 
     public void loadTexture(ResourceManager par1ResourceManager) throws IOException
@@ -70,166 +44,106 @@
 
     public void loadTextureAtlas(ResourceManager par1ResourceManager)
     {
-        Config.dbg("Loading texture map: " + this.basePath);
-        WrUpdates.finishCurrentUpdate();
-        Iterator var2 = this.mapUploadedSprites.values().iterator();
-
-        while (var2.hasNext())
-        {
-            TextureAtlasSprite var3 = (TextureAtlasSprite)var2.next();
-            var3.deleteOwnTexture();
-        }
-
-        this.registerIcons();
-        Collection var21 = this.mapRegisteredSprites.values();
-        this.iconGridSize = this.getStandardTileSize(var21);
-        Config.dbg("Icon grid size: " + this.basePath + ", " + this.iconGridSize);
-        int var22 = Minecraft.getGLMaximumTextureSize();
-        Stitcher var4 = new Stitcher(var22, var22, true);
-        var4.minTileDimension = this.iconGridSize;
+        int var2 = Minecraft.getGLMaximumTextureSize();
+        Stitcher var3 = new Stitcher(var2, var2, true);
         this.mapUploadedSprites.clear();
         this.listAnimatedSprites.clear();
-        Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPre, new Object[] {this});
-        Iterator var5 = this.mapRegisteredSprites.entrySet().iterator();
+        Iterator var4 = this.mapRegisteredSprites.entrySet().iterator();
 
-        while (var5.hasNext())
+        while (var4.hasNext())
         {
-            Entry var6 = (Entry)var5.next();
-            ResourceLocation var7 = new ResourceLocation((String)var6.getKey());
-            TextureAtlasSprite var8 = (TextureAtlasSprite)var6.getValue();
-            ResourceLocation var9 = new ResourceLocation(var7.getResourceDomain(), String.format("%s/%s%s", new Object[] {this.basePath, var7.getResourcePath(), ".png"}));
-
-            if (this.isAbsoluteLocation(var7))
-            {
-                var9 = new ResourceLocation(var7.getResourceDomain(), var7.getResourcePath() + ".png");
-            }
+            Entry var5 = (Entry)var4.next();
+            ResourceLocation var6 = new ResourceLocation((String)var5.getKey());
+            TextureAtlasSprite var7 = (TextureAtlasSprite)var5.getValue();
+            ResourceLocation var8 = new ResourceLocation(var6.getResourceDomain(), String.format("%s/%s%s", new Object[] {this.basePath, var6.getResourcePath(), ".png"}));
 
             try
             {
-                if (!var8.load(par1ResourceManager, var9))
-                {
-                    continue;
-                }
+                var7.loadSprite(par1ResourceManager.getResource(var8));
             }
-            catch (RuntimeException var19)
+            catch (RuntimeException var13)
             {
-                Minecraft.getMinecraft().getLogAgent().logSevere(String.format("Unable to parse animation metadata from %s: %s", new Object[] {var9, var19.getMessage()}));
+                Minecraft.getMinecraft().getLogAgent().logSevere(String.format("Unable to parse animation metadata from %s: %s", new Object[] {var8, var13.getMessage()}));
                 continue;
             }
-            catch (IOException var20)
+            catch (IOException var14)
             {
-                Minecraft.getMinecraft().getLogAgent().logSevere("Using missing texture, unable to load: " + var9);
+                Minecraft.getMinecraft().getLogAgent().logSevere("Using missing texture, unable to load: " + var8);
                 continue;
             }
 
-            var4.addSprite(var8);
+            var3.addSprite(var7);
         }
 
-        var4.addSprite(this.missingImage);
+        var3.addSprite(this.missingImage);
 
         try
         {
-            var4.doStitch();
+            var3.doStitch();
         }
-        catch (StitcherException var17)
+        catch (StitcherException var12)
         {
-            throw var17;
+            throw var12;
         }
 
-        Config.dbg("Texture size: " + this.basePath + ", " + var4.getCurrentWidth() + "x" + var4.getCurrentHeight());
-        int var23 = var4.getCurrentWidth();
-        int var24 = var4.getCurrentHeight();
-        BufferedImage var25 = null;
+        TextureUtil.allocateTexture(this.getGlTextureId(), var3.getCurrentWidth(), var3.getCurrentHeight());
+        HashMap var15 = Maps.newHashMap(this.mapRegisteredSprites);
+        Iterator var16 = var3.getStichSlots().iterator();
+        TextureAtlasSprite var17;
 
-        if (System.getProperty("saveTextureMap", "false").equalsIgnoreCase("true"))
+        while (var16.hasNext())
         {
-            var25 = this.makeDebugImage(var23, var24);
-        }
-
-        TextureUtil.allocateTexture(this.getGlTextureId(), var4.getCurrentWidth(), var4.getCurrentHeight());
-        boolean var26 = Config.isUseMipmaps() && this.textureType == 0;
-        TextureUtils.setupTexture(var23, var24, this.iconGridSize, var26);
-        HashMap var10 = Maps.newHashMap(this.mapRegisteredSprites);
-        Iterator var11 = var4.getStichSlots().iterator();
-        TextureAtlasSprite var12;
-
-        while (var11.hasNext())
-        {
-            var12 = (TextureAtlasSprite)var11.next();
-            String var13 = var12.getIconName();
-            var10.remove(var13);
-            this.mapUploadedSprites.put(var13, var12);
+            var17 = (TextureAtlasSprite)var16.next();
+            String var18 = var17.getIconName();
+            var15.remove(var18);
+            this.mapUploadedSprites.put(var18, var17);
 
             try
             {
-                var12.sheetWidth = var23;
-                var12.sheetHeight = var24;
-                boolean var27 = Config.isUseMipmaps() && this.textureType == 0;
-                var12.setMipmapActive(var27);
-                var12.uploadFrameTexture();
-
-                if (Config.isMultiTexture())
-                {
-                    var12.bindUploadOwnTexture();
-                    TextureUtil.bindTexture(this.getGlTextureId());
-                }
-
-                if (var25 != null)
-                {
-                    this.addDebugSprite(var12, var25);
-                }
+                TextureUtil.uploadTextureSub(var17.getFrameTextureData(0), var17.getIconWidth(), var17.getIconHeight(), var17.getOriginX(), var17.getOriginY(), false, false);
             }
-            catch (Throwable var18)
+            catch (Throwable var11)
             {
-                CrashReport var15 = CrashReport.makeCrashReport(var18, "Stitching texture atlas");
-                CrashReportCategory var16 = var15.makeCategory("Texture being stitched together");
-                var16.addCrashSection("Atlas path", this.basePath);
-                var16.addCrashSection("Sprite", var12);
-                throw new ReportedException(var15);
+                CrashReport var9 = CrashReport.makeCrashReport(var11, "Stitching texture atlas");
+                CrashReportCategory var10 = var9.makeCategory("Texture being stitched together");
+                var10.addCrashSection("Atlas path", this.basePath);
+                var10.addCrashSection("Sprite", var17);
+                throw new ReportedException(var9);
             }
 
-            if (var12.hasAnimationMetadata())
+            if (var17.hasAnimationMetadata())
             {
-                this.listAnimatedSprites.add(var12);
+                this.listAnimatedSprites.add(var17);
             }
             else
             {
-                var12.clearFramesTextureData();
+                var17.clearFramesTextureData();
             }
         }
 
-        var11 = var10.values().iterator();
-
-        while (var11.hasNext())
-        {
-            var12 = (TextureAtlasSprite)var11.next();
-            var12.copyFrom(this.missingImage);
-        }
-
-        this.updateIconGrid(var23, var24);
+        var16 = var15.values().iterator();
 
-        if (var25 != null)
+        while (var16.hasNext())
         {
-            this.writeDebugImage(var25, "debug_" + this.basePath.replace('/', '_') + ".png");
+            var17 = (TextureAtlasSprite)var16.next();
+            var17.copyFrom(this.missingImage);
         }
-
-        Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPost, new Object[] {this});
     }
 
     private void registerIcons()
     {
         this.mapRegisteredSprites.clear();
-        int var1;
         int var2;
+        int var3;
 
         if (this.textureType == 0)
         {
-            Block[] var3 = Block.blocksList;
-            var1 = var3.length;
+            Block[] var1 = Block.blocksList;
+            var2 = var1.length;
 
-            for (var2 = 0; var2 < var1; ++var2)
+            for (var3 = 0; var3 < var2; ++var3)
             {
-                Block var4 = var3[var2];
+                Block var4 = var1[var3];
 
                 if (var4 != null)
                 {
@@ -239,15 +153,14 @@
 
             Minecraft.getMinecraft().renderGlobal.registerDestroyBlockIcons(this);
             RenderManager.instance.updateIcons(this);
-            ConnectedTextures.updateIcons(this);
         }
 
         Item[] var5 = Item.itemsList;
-        var1 = var5.length;
+        var2 = var5.length;
 
-        for (var2 = 0; var2 < var1; ++var2)
+        for (var3 = 0; var3 < var2; ++var3)
         {
-            Item var6 = var5[var2];
+            Item var6 = var5[var3];
 
             if (var6 != null && var6.getSpriteNumber() == this.textureType)
             {
@@ -276,34 +189,8 @@
         while (var1.hasNext())
         {
             TextureAtlasSprite var2 = (TextureAtlasSprite)var1.next();
-
-            if (this.textureType == 0)
-            {
-                if (!this.isTerrainAnimationActive(var2))
-                {
-                    continue;
-                }
-            }
-            else if (this.textureType == 1 && !Config.isAnimatedItems())
-            {
-                continue;
-            }
-
             var2.updateAnimation();
         }
-
-        if (Config.isMultiTexture())
-        {
-            for (int var4 = 0; var4 < this.listAnimatedSprites.size(); ++var4)
-            {
-                TextureAtlasSprite var3 = (TextureAtlasSprite)this.listAnimatedSprites.get(var4);
-
-                if (this.isTerrainAnimationActive(var3))
-                {
-                    var3.uploadOwnAnimation();
-                }
-            }
-        }
     }
 
     public Icon registerIcon(String par1Str)
@@ -311,16 +198,10 @@
         if (par1Str == null)
         {
             (new RuntimeException("Don\'t register null!")).printStackTrace();
-            par1Str = "null";
         }
 
         Object var2 = (TextureAtlasSprite)this.mapRegisteredSprites.get(par1Str);
 
-        if (var2 == null && this.textureType == 1 && Reflector.ModLoader_getCustomAnimationLogic.exists())
-        {
-            var2 = Reflector.call(Reflector.ModLoader_getCustomAnimationLogic, new Object[] {par1Str});
-        }
-
         if (var2 == null)
         {
             if (this.textureType == 1)
@@ -344,12 +225,6 @@
             }
 
             this.mapRegisteredSprites.put(par1Str, var2);
-
-            if (var2 instanceof TextureAtlasSprite)
-            {
-                TextureAtlasSprite var3 = (TextureAtlasSprite)var2;
-                var3.setIndexInMap(this.mapRegisteredSprites.size());
-            }
         }
 
         return (Icon)var2;
@@ -364,211 +239,4 @@
     {
         this.updateAnimations();
     }
-
-    public TextureAtlasSprite getTextureExtry(String name)
-    {
-        return (TextureAtlasSprite)this.mapRegisteredSprites.get(name);
-    }
-
-    public boolean setTextureEntry(String name, TextureAtlasSprite entry)
-    {
-        if (!this.mapRegisteredSprites.containsKey(name))
-        {
-            this.mapRegisteredSprites.put(name, entry);
-            entry.setIndexInMap(this.mapRegisteredSprites.size());
-            return true;
-        }
-        else
-        {
-            return false;
-        }
-    }
-
-    private boolean isAbsoluteLocation(ResourceLocation loc)
-    {
-        String name = loc.getResourcePath().toLowerCase();
-        return name.startsWith("mcpatcher/") || name.startsWith("optifine/");
-    }
-
-    public TextureAtlasSprite getIconSafe(String name)
-    {
-        return (TextureAtlasSprite)this.mapRegisteredSprites.get(name);
-    }
-
-    private int getStandardTileSize(Collection icons)
-    {
-        int[] sizeCounts = new int[16];
-        Iterator mostUsedPo2 = icons.iterator();
-        int value;
-        int count;
-
-        while (mostUsedPo2.hasNext())
-        {
-            TextureAtlasSprite mostUsedCount = (TextureAtlasSprite)mostUsedPo2.next();
-
-            if (mostUsedCount != null)
-            {
-                value = TextureUtils.getPowerOfTwo(mostUsedCount.getWidth());
-                count = TextureUtils.getPowerOfTwo(mostUsedCount.getHeight());
-                int po2 = Math.max(value, count);
-
-                if (po2 < sizeCounts.length)
-                {
-                    ++sizeCounts[po2];
-                }
-            }
-        }
-
-        int var8 = 4;
-        int var9 = 0;
-
-        for (value = 0; value < sizeCounts.length; ++value)
-        {
-            count = sizeCounts[value];
-
-            if (count > var9)
-            {
-                var8 = value;
-                var9 = count;
-            }
-        }
-
-        if (var8 < 4)
-        {
-            var8 = 4;
-        }
-
-        value = TextureUtils.twoToPower(var8);
-        return value;
-    }
-
-    private void updateIconGrid(int sheetWidth, int sheetHeight)
-    {
-        this.iconGridCountX = -1;
-        this.iconGridCountY = -1;
-        this.iconGrid = null;
-
-        if (this.iconGridSize > 0)
-        {
-            this.iconGridCountX = sheetWidth / this.iconGridSize;
-            this.iconGridCountY = sheetHeight / this.iconGridSize;
-            this.iconGrid = new TextureAtlasSprite[this.iconGridCountX * this.iconGridCountY];
-            this.iconGridSizeU = 1.0D / (double)this.iconGridCountX;
-            this.iconGridSizeV = 1.0D / (double)this.iconGridCountY;
-            Iterator it = this.mapUploadedSprites.values().iterator();
-
-            while (it.hasNext())
-            {
-                TextureAtlasSprite ts = (TextureAtlasSprite)it.next();
-                double uMin = (double)Math.min(ts.getMinU(), ts.getMaxU());
-                double vMin = (double)Math.min(ts.getMinV(), ts.getMaxV());
-                double uMax = (double)Math.max(ts.getMinU(), ts.getMaxU());
-                double vMax = (double)Math.max(ts.getMinV(), ts.getMaxV());
-                int iuMin = (int)(uMin / this.iconGridSizeU);
-                int ivMin = (int)(vMin / this.iconGridSizeV);
-                int iuMax = (int)(uMax / this.iconGridSizeU);
-                int ivMax = (int)(vMax / this.iconGridSizeV);
-
-                for (int iu = iuMin; iu <= iuMax; ++iu)
-                {
-                    if (iu >= 0 && iu < this.iconGridCountX)
-                    {
-                        for (int iv = ivMin; iv <= ivMax; ++iv)
-                        {
-                            if (iv >= 0 && iv < this.iconGridCountX)
-                            {
-                                int index = iv * this.iconGridCountX + iu;
-                                this.iconGrid[index] = ts;
-                            }
-                            else
-                            {
-                                Config.warn("Invalid grid V: " + iv + ", icon: " + ts.getIconName());
-                            }
-                        }
-                    }
-                    else
-                    {
-                        Config.warn("Invalid grid U: " + iu + ", icon: " + ts.getIconName());
-                    }
-                }
-            }
-        }
-    }
-
-    public TextureAtlasSprite getIconByUV(double u, double v)
-    {
-        if (this.iconGrid == null)
-        {
-            return null;
-        }
-        else
-        {
-            int iu = (int)(u / this.iconGridSizeU);
-            int iv = (int)(v / this.iconGridSizeV);
-            int index = iv * this.iconGridCountX + iu;
-            return index >= 0 && index <= this.iconGrid.length ? this.iconGrid[index] : null;
-        }
-    }
-
-    public TextureAtlasSprite getMissingSprite()
-    {
-        return this.missingImage;
-    }
-
-    public int getMaxTextureIndex()
-    {
-        return this.mapRegisteredSprites.size();
-    }
-
-    private boolean isTerrainAnimationActive(TextureAtlasSprite ts)
-    {
-        return ts != TextureUtils.iconWaterStill && ts != TextureUtils.iconWaterFlow ? (ts != TextureUtils.iconLavaStill && ts != TextureUtils.iconLavaFlow ? (ts != TextureUtils.iconFireLayer0 && ts != TextureUtils.iconFireLayer1 ? (ts == TextureUtils.iconPortal ? Config.isAnimatedPortal() : Config.isAnimatedTerrain()) : Config.isAnimatedFire()) : Config.isAnimatedLava()) : Config.isAnimatedWater();
-    }
-
-    public void loadTextureSafe(ResourceManager rm)
-    {
-        try
-        {
-            this.loadTexture(rm);
-        }
-        catch (IOException var3)
-        {
-            Config.warn("Error loading texture map: " + this.basePath);
-            var3.printStackTrace();
-        }
-    }
-
-    private BufferedImage makeDebugImage(int sheetWidth, int sheetHeight)
-    {
-        BufferedImage image = new BufferedImage(sheetWidth, sheetHeight, 2);
-        Graphics2D g = image.createGraphics();
-        g.setPaint(new Color(255, 255, 0));
-        g.fillRect(0, 0, image.getWidth(), image.getHeight());
-        return image;
-    }
-
-    private void addDebugSprite(TextureAtlasSprite ts, BufferedImage image)
-    {
-        if (ts.getFrameCount() < 1)
-        {
-            Config.warn("Debug sprite has no data: " + ts.getIconName());
-        }
-        else
-        {
-            int[] data = ts.getFrameTextureData(0);
-            image.setRGB(ts.getOriginX(), ts.getOriginY(), ts.getIconWidth(), ts.getIconHeight(), data, 0, ts.getIconWidth());
-        }
-    }
-
-    private void writeDebugImage(BufferedImage image, String pngPath)
-    {
-        try
-        {
-            ImageIO.write(image, "png", new File(Config.getMinecraft().mcDataDir, pngPath));
-        }
-        catch (Exception var4)
-        {
-            var4.printStackTrace();
-        }
-    }
 }
