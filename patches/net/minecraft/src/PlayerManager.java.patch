--- a/net/minecraft/src/PlayerManager.java
+++ b/net/minecraft/src/PlayerManager.java
@@ -20,18 +20,14 @@
      * can also that chunk
      */
     private final List chunkWatcherWithPlayers = new ArrayList();
-
-    /** This field is using when chunk should be processed (every 8000 ticks) */
-    private final List playerInstanceList = new ArrayList();
+    private final List field_111193_e = new ArrayList();
     public CompactArrayList chunkCoordsNotLoaded = new CompactArrayList(100, 0.8F);
 
     /**
      * Number of chunks the server sends to the client. Valid 3<=x<=15. In server.properties.
      */
     private int playerViewRadius;
-
-    /** time what is using to check if InhabitedTime should be calculated */
-    private long previousTotalWorldTime;
+    private long field_111192_g;
 
     /** x, z direction vectors: east, south, west, north */
     private final int[][] xzDirectionsConst = new int[][] {{1, 0}, {0, 1}, { -1, 0}, {0, -1}};
@@ -68,15 +64,15 @@
         int var3;
         PlayerInstance var4;
 
-        if (var1 - this.previousTotalWorldTime > 8000L)
+        if (var1 - this.field_111192_g > 8000L)
         {
-            this.previousTotalWorldTime = var1;
+            this.field_111192_g = var1;
 
-            for (var3 = 0; var3 < this.playerInstanceList.size(); ++var3)
+            for (var3 = 0; var3 < this.field_111193_e.size(); ++var3)
             {
-                var4 = (PlayerInstance)this.playerInstanceList.get(var3);
+                var4 = (PlayerInstance)this.field_111193_e.get(var3);
                 var4.sendChunkUpdate();
-                var4.processChunk();
+                var4.func_111194_a();
             }
         }
         else
@@ -167,12 +163,12 @@
         }
     }
 
-    public PlayerInstance getOrCreateChunkWatcher(int par1, int par2, boolean par3)
+    private PlayerInstance getOrCreateChunkWatcher(int par1, int par2, boolean par3)
     {
         return this.getOrCreateChunkWatcher(par1, par2, par3, false);
     }
 
-    public PlayerInstance getOrCreateChunkWatcher(int par1, int par2, boolean par3, boolean lazy)
+    private PlayerInstance getOrCreateChunkWatcher(int par1, int par2, boolean par3, boolean lazy)
     {
         long var4 = (long)par1 + 2147483647L | (long)par2 + 2147483647L << 32;
         PlayerInstance var6 = (PlayerInstance)this.playerInstances.getValueByKey(var4);
@@ -181,7 +177,7 @@
         {
             var6 = new PlayerInstance(this, par1, par2, lazy);
             this.playerInstances.add(var4, var6);
-            this.playerInstanceList.add(var6);
+            this.field_111193_e.add(var6);
         }
 
         return var6;
@@ -397,12 +393,9 @@
         return par0PlayerManager.playerInstances;
     }
 
-    /**
-     * Returns player instances as list
-     */
-    static List getChunkWatcherList(PlayerManager par0PlayerManager)
+    static List func_111191_d(PlayerManager par0PlayerManager)
     {
-        return par0PlayerManager.playerInstanceList;
+        return par0PlayerManager.field_111193_e;
     }
 
     static List getChunkWatchersWithPlayers(PlayerManager par0PlayerManager)
