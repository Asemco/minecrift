--- a/net/minecraft/src/Tessellator.java
+++ b/net/minecraft/src/Tessellator.java
@@ -5,7 +5,6 @@
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 import java.nio.ShortBuffer;
-import java.util.Arrays;
 import org.lwjgl.opengl.ARBVertexBufferObject;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GLContext;
@@ -81,31 +80,31 @@
     private boolean isColorDisabled;
 
     /** The draw mode currently being used by the tessellator. */
-    public int drawMode;
+    private int drawMode;
 
     /**
      * An offset to be applied along the x-axis for all vertices in this draw call.
      */
-    public double xOffset;
+    private double xOffset;
 
     /**
      * An offset to be applied along the y-axis for all vertices in this draw call.
      */
-    public double yOffset;
+    private double yOffset;
 
     /**
      * An offset to be applied along the z-axis for all vertices in this draw call.
      */
-    public double zOffset;
+    private double zOffset;
 
     /** The normal to be applied to the face being drawn. */
     private int normal;
 
     /** The static instance of the Tessellator. */
-    public static Tessellator instance = new Tessellator(524288);
+    public static final Tessellator instance = new Tessellator(2097152);
 
     /** Whether this tessellator is currently in draw mode. */
-    public boolean isDrawing;
+    private boolean isDrawing;
 
     /** Whether we are currently using VBO or not. */
     private boolean useVBO;
@@ -120,47 +119,13 @@
     private int vboIndex;
 
     /** Number of vertex buffer objects allocated for use. */
-    private int vboCount;
+    private int vboCount = 10;
 
     /** The size of the buffers used (in integers). */
     private int bufferSize;
-    private boolean renderingChunk;
-    private static boolean littleEndianByteOrder = ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN;
-    public static boolean renderingWorldRenderer = false;
-    public boolean defaultTexture;
-    public int textureID;
-    public boolean autoGrow;
-    private VertexData[] vertexDatas;
-    private boolean[] drawnIcons;
-    private TextureAtlasSprite[] vertexQuadIcons;
-
-    public Tessellator()
-    {
-        this(65536);
-        this.defaultTexture = false;
-    }
-
-    public Tessellator(int par1)
-    {
-        this.renderingChunk = false;
-        this.defaultTexture = true;
-        this.textureID = 0;
-        this.autoGrow = true;
-        this.vertexDatas = null;
-        this.drawnIcons = new boolean[256];
-        this.vertexQuadIcons = null;
-        this.vertexCount = 0;
-        this.hasColor = false;
-        this.hasTexture = false;
-        this.hasBrightness = false;
-        this.hasNormals = false;
-        this.rawBufferIndex = 0;
-        this.addedVertices = 0;
-        this.isColorDisabled = false;
-        this.isDrawing = false;
-        this.useVBO = false;
-        this.vboIndex = 0;
-        this.vboCount = 10;
+
+    private Tessellator(int par1)
+    {
         this.bufferSize = par1;
         this.byteBuffer = GLAllocation.createDirectByteBuffer(par1 * 4);
         this.intBuffer = this.byteBuffer.asIntBuffer();
@@ -174,95 +139,6 @@
             this.vertexBuffers = GLAllocation.createDirectIntBuffer(this.vboCount);
             ARBVertexBufferObject.glGenBuffersARB(this.vertexBuffers);
         }
-
-        this.vertexDatas = new VertexData[4];
-
-        for (int var2 = 0; var2 < this.vertexDatas.length; ++var2)
-        {
-            this.vertexDatas[var2] = new VertexData();
-        }
-    }
-
-    private void draw(int startQuadVertex, int endQuadVertex)
-    {
-        int vxQuadCount = endQuadVertex - startQuadVertex;
-
-        if (vxQuadCount > 0)
-        {
-            int startVertex = startQuadVertex * 4;
-            int vxCount = vxQuadCount * 4;
-
-            if (this.useVBO)
-            {
-                throw new IllegalStateException("VBO not implemented");
-            }
-            else
-            {
-                this.floatBuffer.position(3);
-                GL11.glTexCoordPointer(2, 32, this.floatBuffer);
-                OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
-                this.shortBuffer.position(14);
-                GL11.glTexCoordPointer(2, 32, this.shortBuffer);
-                GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
-                OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-                this.byteBuffer.position(20);
-                GL11.glColorPointer(4, true, 32, this.byteBuffer);
-                this.floatBuffer.position(0);
-                GL11.glVertexPointer(3, 32, this.floatBuffer);
-
-                if (this.drawMode == 7 && convertQuadsToTriangles)
-                {
-                    GL11.glDrawArrays(GL11.GL_TRIANGLES, startVertex, vxCount);
-                }
-                else
-                {
-                    GL11.glDrawArrays(this.drawMode, startVertex, vxCount);
-                }
-            }
-        }
-    }
-
-    private int drawForIcon(TextureAtlasSprite icon, int startQuadPos)
-    {
-        icon.bindOwnTexture();
-        int firstRegionEnd = -1;
-        int lastPos = -1;
-        int numQuads = this.addedVertices / 4;
-
-        for (int i = startQuadPos; i < numQuads; ++i)
-        {
-            TextureAtlasSprite ts = this.vertexQuadIcons[i];
-
-            if (ts == icon)
-            {
-                if (lastPos < 0)
-                {
-                    lastPos = i;
-                }
-            }
-            else if (lastPos >= 0)
-            {
-                this.draw(lastPos, i);
-                lastPos = -1;
-
-                if (firstRegionEnd < 0)
-                {
-                    firstRegionEnd = i;
-                }
-            }
-        }
-
-        if (lastPos >= 0)
-        {
-            this.draw(lastPos, numQuads);
-        }
-
-        if (firstRegionEnd < 0)
-        {
-            firstRegionEnd = numQuads;
-        }
-
-        return firstRegionEnd;
     }
 
     /**
@@ -277,197 +153,131 @@
         else
         {
             this.isDrawing = false;
-            int var1;
 
             if (this.vertexCount > 0)
             {
-                if (this.renderingChunk && Config.isMultiTexture())
-                {
-                    this.intBuffer.clear();
-                    this.intBuffer.put(this.rawBuffer, 0, this.rawBufferIndex);
-                    this.byteBuffer.position(0);
-                    this.byteBuffer.limit(this.rawBufferIndex * 4);
-                    GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
-                    GL11.glEnableClientState(GL11.GL_COLOR_ARRAY);
-                    GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
-                    var1 = TextureMap.textureMapBlocks.getMaxTextureIndex();
+                this.intBuffer.clear();
+                this.intBuffer.put(this.rawBuffer, 0, this.rawBufferIndex);
+                this.byteBuffer.position(0);
+                this.byteBuffer.limit(this.rawBufferIndex * 4);
+
+                if (this.useVBO)
+                {
+                    this.vboIndex = (this.vboIndex + 1) % this.vboCount;
+                    ARBVertexBufferObject.glBindBufferARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB, this.vertexBuffers.get(this.vboIndex));
+                    ARBVertexBufferObject.glBufferDataARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB, this.byteBuffer, ARBVertexBufferObject.GL_STREAM_DRAW_ARB);
+                }
 
-                    if (this.drawnIcons.length < var1)
+                if (this.hasTexture)
+                {
+                    if (this.useVBO)
                     {
-                        this.drawnIcons = new boolean[var1 + 1];
+                        GL11.glTexCoordPointer(2, GL11.GL_FLOAT, 32, 12L);
                     }
-
-                    Arrays.fill(this.drawnIcons, false);
-
-                    if (this.vertexQuadIcons == null)
+                    else
                     {
-                        this.vertexQuadIcons = new TextureAtlasSprite[this.bufferSize / 4];
+                        this.floatBuffer.position(3);
+                        GL11.glTexCoordPointer(2, 32, this.floatBuffer);
                     }
 
-                    int var2 = 0;
-                    int var3 = -1;
-                    int var4 = this.addedVertices / 4;
+                    GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
+                }
 
-                    for (int var5 = 0; var5 < var4; ++var5)
-                    {
-                        TextureAtlasSprite var6 = this.vertexQuadIcons[var5];
-                        int var7 = var6.getIndexInMap();
+                if (this.hasBrightness)
+                {
+                    OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
 
-                        if (!this.drawnIcons[var7])
-                        {
-                            if (var6 == TextureUtils.iconGrassSideOverlay)
-                            {
-                                if (var3 < 0)
-                                {
-                                    var3 = var5;
-                                }
-                            }
-                            else
-                            {
-                                var5 = this.drawForIcon(var6, var5) - 1;
-                                ++var2;
-                                this.drawnIcons[var7] = true;
-                            }
-                        }
+                    if (this.useVBO)
+                    {
+                        GL11.glTexCoordPointer(2, GL11.GL_SHORT, 32, 28L);
                     }
-
-                    if (var3 >= 0)
+                    else
                     {
-                        this.drawForIcon((TextureAtlasSprite)TextureUtils.iconGrassSideOverlay, var3);
+                        this.shortBuffer.position(14);
+                        GL11.glTexCoordPointer(2, 32, this.shortBuffer);
                     }
 
-                    GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
-                    OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
-                    GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
+                    GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
                     OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-                    GL11.glDisableClientState(GL11.GL_COLOR_ARRAY);
-                    GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
                 }
-                else
-                {
-                    this.intBuffer.clear();
-                    this.intBuffer.put(this.rawBuffer, 0, this.rawBufferIndex);
-                    this.byteBuffer.position(0);
-                    this.byteBuffer.limit(this.rawBufferIndex * 4);
 
+                if (this.hasColor)
+                {
                     if (this.useVBO)
                     {
-                        this.vboIndex = (this.vboIndex + 1) % this.vboCount;
-                        ARBVertexBufferObject.glBindBufferARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB, this.vertexBuffers.get(this.vboIndex));
-                        ARBVertexBufferObject.glBufferDataARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB, this.byteBuffer, ARBVertexBufferObject.GL_STREAM_DRAW_ARB);
-                    }
-
-                    if (this.hasTexture)
-                    {
-                        if (this.useVBO)
-                        {
-                            GL11.glTexCoordPointer(2, GL11.GL_FLOAT, 32, 12L);
-                        }
-                        else
-                        {
-                            this.floatBuffer.position(3);
-                            GL11.glTexCoordPointer(2, 32, this.floatBuffer);
-                        }
-
-                        GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
+                        GL11.glColorPointer(4, GL11.GL_UNSIGNED_BYTE, 32, 20L);
                     }
-
-                    if (this.hasBrightness)
-                    {
-                        OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
-
-                        if (this.useVBO)
-                        {
-                            GL11.glTexCoordPointer(2, GL11.GL_SHORT, 32, 28L);
-                        }
-                        else
-                        {
-                            this.shortBuffer.position(14);
-                            GL11.glTexCoordPointer(2, 32, this.shortBuffer);
-                        }
-
-                        GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
-                        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-                    }
-
-                    if (this.hasColor)
+                    else
                     {
-                        if (this.useVBO)
-                        {
-                            GL11.glColorPointer(4, GL11.GL_UNSIGNED_BYTE, 32, 20L);
-                        }
-                        else
-                        {
-                            this.byteBuffer.position(20);
-                            GL11.glColorPointer(4, true, 32, this.byteBuffer);
-                        }
-
-                        GL11.glEnableClientState(GL11.GL_COLOR_ARRAY);
+                        this.byteBuffer.position(20);
+                        GL11.glColorPointer(4, true, 32, this.byteBuffer);
                     }
 
-                    if (this.hasNormals)
-                    {
-                        if (this.useVBO)
-                        {
-                            GL11.glNormalPointer(GL11.GL_UNSIGNED_BYTE, 32, 24L);
-                        }
-                        else
-                        {
-                            this.byteBuffer.position(24);
-                            GL11.glNormalPointer(32, this.byteBuffer);
-                        }
-
-                        GL11.glEnableClientState(GL11.GL_NORMAL_ARRAY);
-                    }
+                    GL11.glEnableClientState(GL11.GL_COLOR_ARRAY);
+                }
 
+                if (this.hasNormals)
+                {
                     if (this.useVBO)
                     {
-                        GL11.glVertexPointer(3, GL11.GL_FLOAT, 32, 0L);
+                        GL11.glNormalPointer(GL11.GL_UNSIGNED_BYTE, 32, 24L);
                     }
                     else
                     {
-                        this.floatBuffer.position(0);
-                        GL11.glVertexPointer(3, 32, this.floatBuffer);
+                        this.byteBuffer.position(24);
+                        GL11.glNormalPointer(32, this.byteBuffer);
                     }
 
-                    GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
+                    GL11.glEnableClientState(GL11.GL_NORMAL_ARRAY);
+                }
 
-                    if (this.drawMode == 7 && convertQuadsToTriangles)
-                    {
-                        GL11.glDrawArrays(GL11.GL_TRIANGLES, 0, this.vertexCount);
-                    }
-                    else
-                    {
-                        GL11.glDrawArrays(this.drawMode, 0, this.vertexCount);
-                    }
+                if (this.useVBO)
+                {
+                    GL11.glVertexPointer(3, GL11.GL_FLOAT, 32, 0L);
+                }
+                else
+                {
+                    this.floatBuffer.position(0);
+                    GL11.glVertexPointer(3, 32, this.floatBuffer);
+                }
 
-                    GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
+                GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
 
-                    if (this.hasTexture)
-                    {
-                        GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
-                    }
+                if (this.drawMode == 7 && convertQuadsToTriangles)
+                {
+                    GL11.glDrawArrays(GL11.GL_TRIANGLES, 0, this.vertexCount);
+                }
+                else
+                {
+                    GL11.glDrawArrays(this.drawMode, 0, this.vertexCount);
+                }
 
-                    if (this.hasBrightness)
-                    {
-                        OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
-                        GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
-                        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-                    }
+                GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
 
-                    if (this.hasColor)
-                    {
-                        GL11.glDisableClientState(GL11.GL_COLOR_ARRAY);
-                    }
+                if (this.hasTexture)
+                {
+                    GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
+                }
 
-                    if (this.hasNormals)
-                    {
-                        GL11.glDisableClientState(GL11.GL_NORMAL_ARRAY);
-                    }
+                if (this.hasBrightness)
+                {
+                    OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
+                    GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
+                    OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
+                }
+
+                if (this.hasColor)
+                {
+                    GL11.glDisableClientState(GL11.GL_COLOR_ARRAY);
+                }
+
+                if (this.hasNormals)
+                {
+                    GL11.glDisableClientState(GL11.GL_NORMAL_ARRAY);
                 }
             }
 
-            var1 = this.rawBufferIndex * 4;
+            int var1 = this.rawBufferIndex * 4;
             this.reset();
             return var1;
         }
@@ -603,7 +413,7 @@
 
             this.hasColor = true;
 
-            if (littleEndianByteOrder)
+            if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
             {
                 this.color = par4 << 24 | par3 << 16 | par2 << 8 | par1;
             }
@@ -619,76 +429,8 @@
      */
     public void addVertexWithUV(double par1, double par3, double par5, double par7, double par9)
     {
-        if (this.renderingChunk && Config.isMultiTexture())
-        {
-            int var11 = this.addedVertices % 4;
-            VertexData var12 = this.vertexDatas[var11];
-            var12.x = par1;
-            var12.y = par3;
-            var12.z = par5;
-            var12.u = par7;
-            var12.v = par9;
-            var12.color = this.color;
-            var12.brightness = this.brightness;
-
-            if (var11 != 3)
-            {
-                ++this.addedVertices;
-            }
-            else
-            {
-                this.addedVertices -= 3;
-                double var13 = (this.vertexDatas[0].u + this.vertexDatas[1].u + this.vertexDatas[2].u + this.vertexDatas[3].u) / 4.0D;
-                double var15 = (this.vertexDatas[0].v + this.vertexDatas[1].v + this.vertexDatas[2].v + this.vertexDatas[3].v) / 4.0D;
-                TextureAtlasSprite var17 = TextureMap.textureMapBlocks.getIconByUV(var13, var15);
-
-                if (var17 == null)
-                {
-                    var17 = TextureMap.textureMapBlocks.getMissingSprite();
-                }
-
-                double var18 = (double)var17.baseU;
-                double var20 = (double)var17.baseV;
-
-                if (this.vertexQuadIcons == null)
-                {
-                    this.vertexQuadIcons = new TextureAtlasSprite[this.bufferSize / 4];
-                }
-
-                int var22 = this.addedVertices;
-                this.vertexQuadIcons[var22 / 4] = var17;
-                int var23 = var17.sheetWidth / var17.getIconWidth();
-                int var24 = var17.sheetHeight / var17.getIconHeight();
-                int var25 = this.color;
-                int var26 = this.brightness;
-
-                for (int var27 = 0; var27 < 4; ++var27)
-                {
-                    VertexData var28 = this.vertexDatas[var27];
-                    par1 = var28.x;
-                    par3 = var28.y;
-                    par5 = var28.z;
-                    par7 = var28.u;
-                    par9 = var28.v;
-                    par7 -= var18;
-                    par9 -= var20;
-                    par7 *= (double)var23;
-                    par9 *= (double)var24;
-                    this.color = var28.color;
-                    this.brightness = var28.brightness;
-                    this.setTextureUV(par7, par9);
-                    this.addVertex(par1, par3, par5);
-                }
-
-                this.color = var25;
-                this.brightness = var26;
-            }
-        }
-        else
-        {
-            this.setTextureUV(par7, par9);
-            this.addVertex(par1, par3, par5);
-        }
+        this.setTextureUV(par7, par9);
+        this.addVertex(par1, par3, par5);
     }
 
     /**
@@ -697,53 +439,33 @@
      */
     public void addVertex(double par1, double par3, double par5)
     {
-        if (this.autoGrow && this.rawBufferIndex >= this.bufferSize - 32)
-        {
-            Config.dbg("Expand tessellator buffer, old: " + this.bufferSize + ", new: " + this.bufferSize * 2);
-            this.bufferSize *= 2;
-            int[] var7 = new int[this.bufferSize];
-            System.arraycopy(this.rawBuffer, 0, var7, 0, this.rawBuffer.length);
-            this.rawBuffer = var7;
-            this.byteBuffer = GLAllocation.createDirectByteBuffer(this.bufferSize * 4);
-            this.intBuffer = this.byteBuffer.asIntBuffer();
-            this.floatBuffer = this.byteBuffer.asFloatBuffer();
-            this.shortBuffer = this.byteBuffer.asShortBuffer();
-
-            if (this.vertexQuadIcons != null)
-            {
-                TextureAtlasSprite[] var8 = new TextureAtlasSprite[this.bufferSize / 4];
-                System.arraycopy(this.vertexQuadIcons, 0, var8, 0, this.vertexQuadIcons.length);
-                this.vertexQuadIcons = var8;
-            }
-        }
-
         ++this.addedVertices;
 
         if (this.drawMode == 7 && convertQuadsToTriangles && this.addedVertices % 4 == 0)
         {
-            for (int var9 = 0; var9 < 2; ++var9)
+            for (int var7 = 0; var7 < 2; ++var7)
             {
-                int var10 = 8 * (3 - var9);
+                int var8 = 8 * (3 - var7);
 
                 if (this.hasTexture)
                 {
-                    this.rawBuffer[this.rawBufferIndex + 3] = this.rawBuffer[this.rawBufferIndex - var10 + 3];
-                    this.rawBuffer[this.rawBufferIndex + 4] = this.rawBuffer[this.rawBufferIndex - var10 + 4];
+                    this.rawBuffer[this.rawBufferIndex + 3] = this.rawBuffer[this.rawBufferIndex - var8 + 3];
+                    this.rawBuffer[this.rawBufferIndex + 4] = this.rawBuffer[this.rawBufferIndex - var8 + 4];
                 }
 
                 if (this.hasBrightness)
                 {
-                    this.rawBuffer[this.rawBufferIndex + 7] = this.rawBuffer[this.rawBufferIndex - var10 + 7];
+                    this.rawBuffer[this.rawBufferIndex + 7] = this.rawBuffer[this.rawBufferIndex - var8 + 7];
                 }
 
                 if (this.hasColor)
                 {
-                    this.rawBuffer[this.rawBufferIndex + 5] = this.rawBuffer[this.rawBufferIndex - var10 + 5];
+                    this.rawBuffer[this.rawBufferIndex + 5] = this.rawBuffer[this.rawBufferIndex - var8 + 5];
                 }
 
-                this.rawBuffer[this.rawBufferIndex + 0] = this.rawBuffer[this.rawBufferIndex - var10 + 0];
-                this.rawBuffer[this.rawBufferIndex + 1] = this.rawBuffer[this.rawBufferIndex - var10 + 1];
-                this.rawBuffer[this.rawBufferIndex + 2] = this.rawBuffer[this.rawBufferIndex - var10 + 2];
+                this.rawBuffer[this.rawBufferIndex + 0] = this.rawBuffer[this.rawBufferIndex - var8 + 0];
+                this.rawBuffer[this.rawBufferIndex + 1] = this.rawBuffer[this.rawBufferIndex - var8 + 1];
+                this.rawBuffer[this.rawBufferIndex + 2] = this.rawBuffer[this.rawBufferIndex - var8 + 2];
                 ++this.vertexCount;
                 this.rawBufferIndex += 8;
             }
@@ -776,7 +498,7 @@
         this.rawBufferIndex += 8;
         ++this.vertexCount;
 
-        if (!this.autoGrow && this.addedVertices % 4 == 0 && this.rawBufferIndex >= this.bufferSize - 32)
+        if (this.vertexCount % 4 == 0 && this.rawBufferIndex >= this.bufferSize - 32)
         {
             this.draw();
             this.isDrawing = true;
@@ -844,14 +566,4 @@
         this.yOffset += (double)par2;
         this.zOffset += (double)par3;
     }
-
-    public boolean isRenderingChunk()
-    {
-        return this.renderingChunk;
-    }
-
-    public void setRenderingChunk(boolean renderingChunk)
-    {
-        this.renderingChunk = renderingChunk;
-    }
 }
