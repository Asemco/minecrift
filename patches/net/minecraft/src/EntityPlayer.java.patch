--- a/net/minecraft/src/EntityPlayer.java
+++ b/net/minecraft/src/EntityPlayer.java
@@ -114,10 +114,10 @@
         this.fireResistance = 20;
     }
 
-    protected void applyEntityAttributes()
+    protected void func_110147_ax()
     {
-        super.applyEntityAttributes();
-        this.getAttributeMap().func_111150_b(SharedMonsterAttributes.attackDamage).setAttribute(1.0D);
+        super.func_110147_ax();
+        this.func_110140_aT().func_111150_b(SharedMonsterAttributes.field_111264_e).func_111128_a(1.0D);
     }
 
     protected void entityInit()
@@ -407,7 +407,7 @@
      */
     protected boolean isMovementBlocked()
     {
-        return this.getHealth() <= 0.0F || this.isPlayerSleeping();
+        return this.func_110143_aJ() <= 0.0F || this.isPlayerSleeping();
     }
 
     /**
@@ -427,7 +427,7 @@
         {
             if (!this.worldObj.isRemote)
             {
-                this.dismountEntity(this.ridingEntity);
+                this.func_110145_l(this.ridingEntity);
             }
 
             if (this.ridingEntity != null)
@@ -483,7 +483,7 @@
         this.yOffset = 1.62F;
         this.setSize(0.6F, 1.8F);
         super.preparePlayerToSpawn();
-        this.setHealth(this.getMaxHealth());
+        this.setEntityHealth(this.func_110138_aP());
         this.deathTime = 0;
     }
 
@@ -504,7 +504,7 @@
             --this.flyToggleTimer;
         }
 
-        if (this.worldObj.difficultySetting == 0 && this.getHealth() < this.getMaxHealth() && this.worldObj.getGameRules().getGameRuleBooleanValue("naturalRegeneration") && this.ticksExisted % 20 * 12 == 0)
+        if (this.worldObj.difficultySetting == 0 && this.func_110143_aJ() < this.func_110138_aP() && this.worldObj.getGameRules().getGameRuleBooleanValue("naturalRegeneration") && this.ticksExisted % 20 * 12 == 0)
         {
             this.heal(1.0F);
         }
@@ -512,11 +512,11 @@
         this.inventory.decrementAnimations();
         this.prevCameraYaw = this.cameraYaw;
         super.onLivingUpdate();
-        AttributeInstance var1 = this.getEntityAttribute(SharedMonsterAttributes.movementSpeed);
+        AttributeInstance var1 = this.func_110148_a(SharedMonsterAttributes.field_111263_d);
 
         if (!this.worldObj.isRemote)
         {
-            var1.setAttribute((double)this.capabilities.getWalkSpeed());
+            var1.func_111128_a((double)this.capabilities.getWalkSpeed());
         }
 
         this.jumpMovementFactor = this.speedInAir;
@@ -526,7 +526,7 @@
             this.jumpMovementFactor = (float)((double)this.jumpMovementFactor + (double)this.speedInAir * 0.3D);
         }
 
-        this.setAIMoveSpeed((float)var1.getAttributeValue());
+        this.setAIMoveSpeed((float)var1.func_111126_e());
         float var2 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
         float var3 = (float)Math.atan(-this.motionY * 0.20000000298023224D) * 15.0F;
 
@@ -535,12 +535,12 @@
             var2 = 0.1F;
         }
 
-        if (!this.onGround || this.getHealth() <= 0.0F)
+        if (!this.onGround || this.func_110143_aJ() <= 0.0F)
         {
             var2 = 0.0F;
         }
 
-        if (this.onGround || this.getHealth() <= 0.0F)
+        if (this.onGround || this.func_110143_aJ() <= 0.0F)
         {
             var3 = 0.0F;
         }
@@ -548,7 +548,7 @@
         this.cameraYaw += (var2 - this.cameraYaw) * 0.4F;
         this.cameraPitch += (var3 - this.cameraPitch) * 0.8F;
 
-        if (this.getHealth() > 0.0F)
+        if (this.func_110143_aJ() > 0.0F)
         {
             AxisAlignedBB var4 = null;
 
@@ -646,12 +646,12 @@
     public void addToPlayerScore(Entity par1Entity, int par2)
     {
         this.addScore(par2);
-        Collection var3 = this.getWorldScoreboard().func_96520_a(ScoreObjectiveCriteria.totalKillCount);
+        Collection var3 = this.getWorldScoreboard().func_96520_a(ScoreObjectiveCriteria.field_96640_e);
 
         if (par1Entity instanceof EntityPlayer)
         {
             this.addStat(StatList.playerKillsStat, 1);
-            var3.addAll(this.getWorldScoreboard().func_96520_a(ScoreObjectiveCriteria.playerKillCount));
+            var3.addAll(this.getWorldScoreboard().func_96520_a(ScoreObjectiveCriteria.field_96639_d));
         }
         else
         {
@@ -874,7 +874,7 @@
 
     public void displayGUIHopperMinecart(EntityMinecartHopper par1EntityMinecartHopper) {}
 
-    public void displayGUIHorse(EntityHorse par1EntityHorse, IInventory par2IInventory) {}
+    public void func_110298_a(EntityHorse par1EntityHorse, IInventory par2IInventory) {}
 
     public void displayGUIEnchantment(int par1, int par2, int par3, String par4Str) {}
 
@@ -918,7 +918,7 @@
         {
             this.entityAge = 0;
 
-            if (this.getHealth() <= 0.0F)
+            if (this.func_110143_aJ() <= 0.0F)
             {
                 return false;
             }
@@ -967,11 +967,11 @@
         }
     }
 
-    public boolean canAttackPlayer(EntityPlayer par1EntityPlayer)
+    public boolean func_96122_a(EntityPlayer par1EntityPlayer)
     {
         Team var2 = this.getTeam();
         Team var3 = par1EntityPlayer.getTeam();
-        return var2 == null ? true : (!var2.isSameTeam(var3) ? true : var2.getAllowFriendlyFire());
+        return var2 == null ? true : (!var2.func_142054_a(var3) ? true : var2.func_96665_g());
     }
 
     protected void damageArmor(float par1)
@@ -987,11 +987,7 @@
         return this.inventory.getTotalArmorValue();
     }
 
-    /**
-     * When searching for vulnerable players, if a player is invisible, the return value of this is the chance of seeing
-     * them anyway.
-     */
-    public float getArmorVisibility()
+    public float func_82243_bO()
     {
         int var1 = 0;
         ItemStack[] var2 = this.inventory.armorInventory;
@@ -1026,14 +1022,14 @@
             par2 = this.applyArmorCalculations(par1DamageSource, par2);
             par2 = this.applyPotionDamageCalculations(par1DamageSource, par2);
             float var3 = par2;
-            par2 = Math.max(par2 - this.getAbsorptionAmount(), 0.0F);
-            this.setAbsorptionAmount(this.getAbsorptionAmount() - (var3 - par2));
+            par2 = Math.max(par2 - this.func_110139_bj(), 0.0F);
+            this.func_110149_m(this.func_110139_bj() - (var3 - par2));
 
             if (par2 != 0.0F)
             {
                 this.addExhaustion(par1DamageSource.getHungerDamage());
-                float var4 = this.getHealth();
-                this.setHealth(this.getHealth() - par2);
+                float var4 = this.func_110143_aJ();
+                this.setEntityHealth(this.func_110143_aJ() - par2);
                 this.func_110142_aN().func_94547_a(par1DamageSource, var4, par2);
             }
         }
@@ -1076,7 +1072,7 @@
         ItemStack var2 = this.getCurrentEquippedItem();
         ItemStack var3 = var2 != null ? var2.copy() : null;
 
-        if (!par1Entity.interactFirst(this))
+        if (!par1Entity.func_130002_c(this))
         {
             if (var2 != null && par1Entity instanceof EntityLivingBase)
             {
@@ -1148,9 +1144,9 @@
     {
         if (par1Entity.canAttackWithItem())
         {
-            if (!par1Entity.hitByEntity(this))
+            if (!par1Entity.func_85031_j(this))
             {
-                float var2 = (float)this.getEntityAttribute(SharedMonsterAttributes.attackDamage).getAttributeValue();
+                float var2 = (float)this.func_110148_a(SharedMonsterAttributes.field_111264_e).func_111126_e();
                 int var3 = 0;
                 float var4 = 0.0F;
 
@@ -1211,7 +1207,7 @@
                             this.triggerAchievement(AchievementList.overkill);
                         }
 
-                        this.setLastAttacker(par1Entity);
+                        this.func_130011_c(par1Entity);
 
                         if (par1Entity instanceof EntityLivingBase)
                         {
@@ -1350,15 +1346,12 @@
                 case 0:
                     var7 = 0.9F;
                     break;
-
                 case 1:
                     var10 = 0.1F;
                     break;
-
                 case 2:
                     var7 = 0.1F;
                     break;
-
                 case 3:
                     var10 = 0.9F;
             }
@@ -1394,15 +1387,12 @@
             case 0:
                 this.field_71089_bV = -1.8F;
                 break;
-
             case 1:
                 this.field_71079_bU = 1.8F;
                 break;
-
             case 2:
                 this.field_71089_bV = 1.8F;
                 break;
-
             case 3:
                 this.field_71079_bU = -1.8F;
         }
@@ -1502,13 +1492,10 @@
             {
                 case 0:
                     return 90.0F;
-
                 case 1:
                     return 0.0F;
-
                 case 2:
                     return 270.0F;
-
                 case 3:
                     return 180.0F;
             }
@@ -1654,7 +1641,7 @@
      */
     public float getAIMoveSpeed()
     {
-        return (float)this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).getAttributeValue();
+        return (float)this.func_110148_a(SharedMonsterAttributes.field_111263_d).func_111126_e();
     }
 
     /**
@@ -1929,7 +1916,7 @@
      */
     public boolean shouldHeal()
     {
-        return this.getHealth() > 0.0F && this.getHealth() < this.getMaxHealth();
+        return this.func_110143_aJ() > 0.0F && this.func_110143_aJ() < this.func_110138_aP();
     }
 
     /**
@@ -2037,7 +2024,7 @@
         if (par2)
         {
             this.inventory.copyInventory(par1EntityPlayer.inventory);
-            this.setHealth(par1EntityPlayer.getHealth());
+            this.setEntityHealth(par1EntityPlayer.func_110143_aJ());
             this.foodStats = par1EntityPlayer.foodStats;
             this.experienceLevel = par1EntityPlayer.experienceLevel;
             this.experienceTotal = par1EntityPlayer.experienceTotal;
@@ -2084,7 +2071,7 @@
         return this.username;
     }
 
-    public World getEntityWorld()
+    public World func_130014_f_()
     {
         return this.worldObj;
     }
@@ -2121,12 +2108,7 @@
         this.inventory.armorInventory[par1] = par2ItemStack;
     }
 
-    /**
-     * Only used by renderer in EntityLivingBase subclasses.\nDetermines if an entity is visible or not to a specfic
-     * player, if the entity is normally invisible.\nFor EntityLivingBase subclasses, returning false when invisible
-     * will render the entity semitransparent.
-     */
-    public boolean isInvisibleToPlayer(EntityPlayer par1EntityPlayer)
+    public boolean func_98034_c(EntityPlayer par1EntityPlayer)
     {
         if (!this.isInvisible())
         {
@@ -2149,7 +2131,7 @@
         return this.getHideCape(1);
     }
 
-    public boolean isPushedByWater()
+    public boolean func_96092_aw()
     {
         return !this.capabilities.isFlying;
     }
@@ -2172,7 +2154,7 @@
         return ScorePlayerTeam.formatPlayerName(this.getTeam(), this.username);
     }
 
-    public void setAbsorptionAmount(float par1)
+    public void func_110149_m(float par1)
     {
         if (par1 < 0.0F)
         {
@@ -2182,8 +2164,8 @@
         this.getDataWatcher().updateObject(17, Float.valueOf(par1));
     }
 
-    public float getAbsorptionAmount()
+    public float func_110139_bj()
     {
-        return this.getDataWatcher().getWatchableObjectFloat(17);
+        return this.getDataWatcher().func_111145_d(17);
     }
 }
