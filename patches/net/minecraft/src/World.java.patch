--- a/net/minecraft/src/World.java
+++ b/net/minecraft/src/World.java
@@ -750,7 +750,7 @@
                     }
 
                     var9.addCrashSectionCallable("Source block type", new CallableLvl1(this, par4));
-                    CrashReportCategory.addBlockCrashInfo(var9, par1, par2, par3, var5, var10);
+                    CrashReportCategory.func_85068_a(var9, par1, par2, par3, var5, var10);
                     throw new ReportedException(var8);
                 }
             }
@@ -1423,7 +1423,7 @@
     {
         int var2 = MathHelper.floor_double(par1Entity.posX / 16.0D);
         int var3 = MathHelper.floor_double(par1Entity.posZ / 16.0D);
-        boolean var4 = par1Entity.forceSpawn;
+        boolean var4 = par1Entity.field_98038_p;
 
         if (par1Entity instanceof EntityPlayer)
         {
@@ -1755,12 +1755,9 @@
         return this.provider.getMoonPhase(this.worldInfo.getWorldTime());
     }
 
-    /**
-     * gets the current fullness of the moon expressed as a float between 1.0 and 0.0, in steps of .25
-     */
-    public float getCurrentMoonPhaseFactor()
+    public float func_130001_d()
     {
-        return WorldProvider.moonPhaseFactors[this.provider.getMoonPhase(this.worldInfo.getWorldTime())];
+        return WorldProvider.field_111203_a[this.provider.getMoonPhase(this.worldInfo.getWorldTime())];
     }
 
     /**
@@ -1924,7 +1921,7 @@
                 }
                 else
                 {
-                    var2.addEntityCrashInfo(var5);
+                    var2.func_85029_a(var5);
                 }
 
                 throw new ReportedException(var4);
@@ -1988,7 +1985,7 @@
                 {
                     var4 = CrashReport.makeCrashReport(var7, "Ticking entity");
                     var5 = var4.makeCategory("Entity being ticked");
-                    var2.addEntityCrashInfo(var5);
+                    var2.func_85029_a(var5);
                     throw new ReportedException(var4);
                 }
             }
@@ -2411,7 +2408,7 @@
                 }
             }
 
-            if (var11.lengthVector() > 0.0D && par3Entity.isPushedByWater())
+            if (var11.lengthVector() > 0.0D && par3Entity.func_96092_aw())
             {
                 var11 = var11.normalize();
                 double var18 = 0.014D;
@@ -3476,10 +3473,9 @@
     }
 
     /**
-     * Args: X, Y, Z, tile entity Marks the chunk the tile entity is in as modified. This is essential as chunks that
-     * are not marked as modified may be rolled back when exiting the game.
+     * marks the chunk that contains this tilentity as modified and then calls worldAccesses.doNothingWithTileEntity
      */
-    public void markTileEntityChunkModified(int par1, int par2, int par3, TileEntity par4TileEntity)
+    public void updateTileEntityChunkAndDoNothing(int par1, int par2, int par3, TileEntity par4TileEntity)
     {
         if (this.blockExists(par1, par2, par3))
         {
@@ -3498,7 +3494,7 @@
         {
             Entity var4 = (Entity)this.loadedEntityList.get(var3);
 
-            if ((!(var4 instanceof EntityLiving) || !((EntityLiving)var4).isNoDespawnRequired()) && par1Class.isAssignableFrom(var4.getClass()))
+            if ((!(var4 instanceof EntityLiving) || !((EntityLiving)var4).func_104002_bU()) && par1Class.isAssignableFrom(var4.getClass()))
             {
                 ++var2;
             }
@@ -3781,7 +3777,7 @@
 
                 if (var13.isInvisible())
                 {
-                    float var18 = var13.getArmorVisibility();
+                    float var18 = var13.func_82243_bO();
 
                     if (var18 < 0.1F)
                     {
@@ -4108,7 +4104,7 @@
         return this.provider.hasNoSky ? 128 : 256;
     }
 
-    public IUpdatePlayerListBox getMinecartSoundUpdater(EntityMinecart par1EntityMinecart)
+    public IUpdatePlayerListBox func_82735_a(EntityMinecart par1EntityMinecart)
     {
         return null;
     }
@@ -4197,7 +4193,7 @@
     {
         if (this.getTotalWorldTime() % 600L == 0L)
         {
-            this.theCalendar.setTimeInMillis(MinecraftServer.getSystemTimeMillis());
+            this.theCalendar.setTimeInMillis(MinecraftServer.func_130071_aq());
         }
 
         return this.theCalendar;
@@ -4247,30 +4243,20 @@
         return this.worldLogAgent;
     }
 
-    /**
-     * returns a float value that can be used to determine how likely something is to go awry in the area. It increases
-     * based on how long the player is within the vicinity, the lunar phase, and game difficulty. The value can be up to
-     * 1.5 on the highest difficulty, 1.0 otherwise.
-     */
-    public float getLocationTensionFactor(double par1, double par3, double par5)
+    public float func_110746_b(double par1, double par3, double par5)
     {
-        return this.getTensionFactorForBlock(MathHelper.floor_double(par1), MathHelper.floor_double(par3), MathHelper.floor_double(par5));
+        return this.func_110750_I(MathHelper.floor_double(par1), MathHelper.floor_double(par3), MathHelper.floor_double(par5));
     }
 
-    /**
-     * returns a float value that can be used to determine how likely something is to go awry in the area. It increases
-     * based on how long the player is within the vicinity, the lunar phase, and game difficulty. The value can be up to
-     * 1.5 on the highest difficulty, 1.0 otherwise.
-     */
-    public float getTensionFactorForBlock(int par1, int par2, int par3)
+    public float func_110750_I(int par1, int par2, int par3)
     {
         float var4 = 0.0F;
         boolean var5 = this.difficultySetting == 3;
 
         if (this.blockExists(par1, par2, par3))
         {
-            float var6 = this.getCurrentMoonPhaseFactor();
-            var4 += MathHelper.clamp_float((float)this.getChunkFromBlockCoords(par1, par3).inhabitedTime / 3600000.0F, 0.0F, 1.0F) * (var5 ? 1.0F : 0.75F);
+            float var6 = this.func_130001_d();
+            var4 += MathHelper.clamp_float((float)this.getChunkFromBlockCoords(par1, par3).field_111204_q / 3600000.0F, 0.0F, 1.0F) * (var5 ? 1.0F : 0.75F);
             var4 += var6 * 0.25F;
         }
 
