--- a/net/minecraft/src/ContainerRepairINNER2.java
+++ b/net/minecraft/src/ContainerRepairINNER2.java
@@ -10,12 +10,12 @@
 
     final int field_135067_d;
 
-    final ContainerRepair repairContainer;
+    final ContainerRepair field_135068_e;
 
     ContainerRepairINNER2(ContainerRepair par1ContainerRepair, IInventory par2IInventory, int par3, int par4, int par5, World par6World, int par7, int par8, int par9)
     {
         super(par2IInventory, par3, par4, par5);
-        this.repairContainer = par1ContainerRepair;
+        this.field_135068_e = par1ContainerRepair;
         this.field_135071_a = par6World;
         this.field_135069_b = par7;
         this.field_135070_c = par8;
@@ -35,38 +35,38 @@
      */
     public boolean canTakeStack(EntityPlayer par1EntityPlayer)
     {
-        return (par1EntityPlayer.capabilities.isCreativeMode || par1EntityPlayer.experienceLevel >= this.repairContainer.maximumCost) && this.repairContainer.maximumCost > 0 && this.getHasStack();
+        return (par1EntityPlayer.capabilities.isCreativeMode || par1EntityPlayer.experienceLevel >= this.field_135068_e.maximumCost) && this.field_135068_e.maximumCost > 0 && this.getHasStack();
     }
 
     public void onPickupFromSlot(EntityPlayer par1EntityPlayer, ItemStack par2ItemStack)
     {
         if (!par1EntityPlayer.capabilities.isCreativeMode)
         {
-            par1EntityPlayer.addExperienceLevel(-this.repairContainer.maximumCost);
+            par1EntityPlayer.addExperienceLevel(-this.field_135068_e.maximumCost);
         }
 
-        ContainerRepair.getRepairInputInventory(this.repairContainer).setInventorySlotContents(0, (ItemStack)null);
+        ContainerRepair.getRepairInputInventory(this.field_135068_e).setInventorySlotContents(0, (ItemStack)null);
 
-        if (ContainerRepair.getStackSizeUsedInRepair(this.repairContainer) > 0)
+        if (ContainerRepair.getStackSizeUsedInRepair(this.field_135068_e) > 0)
         {
-            ItemStack var3 = ContainerRepair.getRepairInputInventory(this.repairContainer).getStackInSlot(1);
+            ItemStack var3 = ContainerRepair.getRepairInputInventory(this.field_135068_e).getStackInSlot(1);
 
-            if (var3 != null && var3.stackSize > ContainerRepair.getStackSizeUsedInRepair(this.repairContainer))
+            if (var3 != null && var3.stackSize > ContainerRepair.getStackSizeUsedInRepair(this.field_135068_e))
             {
-                var3.stackSize -= ContainerRepair.getStackSizeUsedInRepair(this.repairContainer);
-                ContainerRepair.getRepairInputInventory(this.repairContainer).setInventorySlotContents(1, var3);
+                var3.stackSize -= ContainerRepair.getStackSizeUsedInRepair(this.field_135068_e);
+                ContainerRepair.getRepairInputInventory(this.field_135068_e).setInventorySlotContents(1, var3);
             }
             else
             {
-                ContainerRepair.getRepairInputInventory(this.repairContainer).setInventorySlotContents(1, (ItemStack)null);
+                ContainerRepair.getRepairInputInventory(this.field_135068_e).setInventorySlotContents(1, (ItemStack)null);
             }
         }
         else
         {
-            ContainerRepair.getRepairInputInventory(this.repairContainer).setInventorySlotContents(1, (ItemStack)null);
+            ContainerRepair.getRepairInputInventory(this.field_135068_e).setInventorySlotContents(1, (ItemStack)null);
         }
 
-        this.repairContainer.maximumCost = 0;
+        this.field_135068_e.maximumCost = 0;
 
         if (!par1EntityPlayer.capabilities.isCreativeMode && !this.field_135071_a.isRemote && this.field_135071_a.getBlockId(this.field_135069_b, this.field_135070_c, this.field_135067_d) == Block.anvil.blockID && par1EntityPlayer.getRNG().nextFloat() < 0.12F)
         {
