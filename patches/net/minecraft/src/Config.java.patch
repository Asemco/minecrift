--- a/net/minecraft/src/Config.java
+++ b/net/minecraft/src/Config.java
@@ -27,6 +27,7 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.ScaledResolution;
 import net.minecraft.client.multiplayer.WorldClient;
+import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.RenderGlobal;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.resources.IResource;
@@ -56,9 +57,12 @@
     public static final String OF_NAME = "OptiFine";
     public static final String MC_VERSION = "1.8";
     public static final String OF_EDITION = "HD_U";
-    public static final String OF_RELEASE = "A5";
-    public static final String VERSION = "OptiFine_1.8_HD_U_A5";
+    public static final String OF_RELEASE = "B2";
+    public static final String VERSION = "OptiFine_1.8_HD_U_B2";
     private static String newRelease = null;
+    public static String openGlVersion = null;
+    public static String openGlRenderer = null;
+    public static String openGlVendor = null;
     private static GameSettings gameSettings = null;
     private static Minecraft minecraft = null;
     private static boolean initialized = false;
@@ -88,7 +92,7 @@
 
     public static String getVersion()
     {
-        return "OptiFine_1.8_HD_U_A5";
+        return "OptiFine_1.8_HD_U_B2";
     }
 
     public static void initGameSettings(GameSettings settings)
@@ -131,10 +135,11 @@
         log("Java: " + System.getProperty("java.version") + ", " + System.getProperty("java.vendor"));
         log("VM: " + System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor"));
         log("LWJGL: " + Sys.getVersion());
-        log("OpenGL: " + GL11.glGetString(GL11.GL_RENDERER) + " version " + GL11.glGetString(GL11.GL_VERSION) + ", " + GL11.glGetString(GL11.GL_VENDOR));
-        int ver = getOpenGlVersion();
-        String verStr = "" + ver / 10 + "." + ver % 10;
-        log("OpenGL Version: " + verStr);
+        openGlVersion = GL11.glGetString(GL11.GL_VERSION);
+        openGlRenderer = GL11.glGetString(GL11.GL_RENDERER);
+        openGlVendor = GL11.glGetString(GL11.GL_VENDOR);
+        log("OpenGL: " + openGlRenderer + ", version " + openGlVersion + ", " + openGlVendor);
+        log("OpenGL Version: " + getOpenGlVersionString());
 
         if (!GLContext.getCapabilities().OpenGL12)
         {
@@ -165,6 +170,13 @@
         return GLContext.getCapabilities().GL_ARB_occlusion_query;
     }
 
+    public static String getOpenGlVersionString()
+    {
+        int ver = getOpenGlVersion();
+        String verStr = "" + ver / 10 + "." + ver % 10;
+        return verStr;
+    }
+
     private static int getOpenGlVersion()
     {
         return !GLContext.getCapabilities().OpenGL11 ? 10 : (!GLContext.getCapabilities().OpenGL12 ? 11 : (!GLContext.getCapabilities().OpenGL13 ? 12 : (!GLContext.getCapabilities().OpenGL14 ? 13 : (!GLContext.getCapabilities().OpenGL15 ? 14 : (!GLContext.getCapabilities().OpenGL20 ? 15 : (!GLContext.getCapabilities().OpenGL21 ? 20 : (!GLContext.getCapabilities().OpenGL30 ? 21 : (!GLContext.getCapabilities().OpenGL31 ? 30 : (!GLContext.getCapabilities().OpenGL32 ? 31 : (!GLContext.getCapabilities().OpenGL33 ? 32 : (!GLContext.getCapabilities().OpenGL40 ? 33 : 40)))))))))));
@@ -173,14 +185,48 @@
     public static void updateThreadPriorities()
     {
         updateAvailableProcessors();
+        boolean ELEVATED_PRIORITY = true;
 
-        if (getAvailableProcessors() > 1)
+        if (getAvailableProcessors() <= 1 && !isSmoothWorld())
         {
-            minecraftThread.setPriority(10);
+            minecraftThread.setPriority(5);
+            setThreadPriority("Server thread", 5);
         }
         else
         {
-            minecraftThread.setPriority(5);
+            minecraftThread.setPriority(10);
+            setThreadPriority("Server thread", 1);
+        }
+    }
+
+    private static void setThreadPriority(String prefix, int priority)
+    {
+        try
+        {
+            ThreadGroup e = Thread.currentThread().getThreadGroup();
+
+            if (e == null)
+            {
+                return;
+            }
+
+            int num = (e.activeCount() + 10) * 2;
+            Thread[] ts = new Thread[num];
+            e.enumerate(ts, false);
+
+            for (int i = 0; i < ts.length; ++i)
+            {
+                Thread t = ts[i];
+
+                if (t != null && t.getName().startsWith(prefix))
+                {
+                    t.setPriority(priority);
+                }
+            }
+        }
+        catch (Throwable var7)
+        {
+            dbg(var7.getClass().getName() + ": " + var7.getMessage());
         }
     }
 
@@ -624,23 +670,34 @@
 
     public static String getResourcePackNames()
     {
-        IResourcePack[] rps = getResourcePacks();
-
-        if (rps.length <= 0)
+        if (minecraft == null)
+        {
+            return "";
+        }
+        else if (minecraft.getResourcePackRepository() == null)
         {
-            return getDefaultResourcePack().getPackName();
+            return "";
         }
         else
         {
-            String[] names = new String[rps.length];
+            IResourcePack[] rps = getResourcePacks();
 
-            for (int nameStr = 0; nameStr < rps.length; ++nameStr)
+            if (rps.length <= 0)
             {
-                names[nameStr] = rps[nameStr].getPackName();
+                return getDefaultResourcePack().getPackName();
             }
+            else
+            {
+                String[] names = new String[rps.length];
 
-            String var3 = arrayToString((Object[])names);
-            return var3;
+                for (int nameStr = 0; nameStr < rps.length; ++nameStr)
+                {
+                    names[nameStr] = rps[nameStr].getPackName();
+                }
+
+                String var3 = arrayToString((Object[])names);
+                return var3;
+            }
         }
     }
 
@@ -943,7 +1000,7 @@
         if (i != 0)
         {
             String text = GLU.gluErrorString(i);
-            dbg("OpenGlError: " + i + " (" + text + "), at: " + loc);
+            error("OpenGlError: " + i + " (" + text + "), at: " + loc);
         }
     }
 
@@ -1164,6 +1221,10 @@
             {
                 return null;
             }
+            else if (!minecraft.isIntegratedServerRunning())
+            {
+                return null;
+            }
             else
             {
                 IntegratedServer is = minecraft.getIntegratedServer();
@@ -1216,7 +1277,7 @@
 
     public static boolean isSmoothWorld()
     {
-        return !isSingleProcessor() ? false : gameSettings.ofSmoothWorld;
+        return gameSettings.ofSmoothWorld;
     }
 
     public static boolean isLazyChunkLoading()
@@ -1244,6 +1305,7 @@
 
     public static void checkDisplaySettings()
     {
+        /** MINECRIFT *  // Dont allow changes to the display...
         if (getAntialiasingLevel() > 0)
         {
             int samples = getAntialiasingLevel();
@@ -1298,6 +1360,7 @@
                 }
             }
         }
+        ** END MINECRIFT */
     }
 
     private static ByteBuffer readIconImage(File par1File) throws IOException
@@ -1320,6 +1383,7 @@
 
     public static void checkDisplayMode()
     {
+        /** MINECRIFT *  // Dont allow changes to the display...
         try
         {
             if (minecraft.isFullScreen())
@@ -1377,7 +1441,7 @@
                 updateFramebufferSize();
                 Display.setFullscreen(true);
                 minecraft.gameSettings.updateVSync();
-                GL11.glEnable(GL11.GL_TEXTURE_2D);
+                GlStateManager.func_179098_w();
             }
             else
             {
@@ -1390,13 +1454,14 @@
                 fullscreenModeChecked = false;
                 minecraft.gameSettings.updateVSync();
                 Display.update();
-                GL11.glEnable(GL11.GL_TEXTURE_2D);
+                GlStateManager.func_179098_w();
             }
         }
         catch (Exception var6)
         {
             var6.printStackTrace();
         }
+        ** END MINECRIFT */
     }
 
     private static void updateFramebufferSize()
