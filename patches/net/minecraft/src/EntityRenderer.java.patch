--- a/net/minecraft/src/EntityRenderer.java
+++ b/net/minecraft/src/EntityRenderer.java
@@ -9,29 +9,31 @@
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.DisplayMode;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GLContext;
 import org.lwjgl.util.glu.Project;
 
 public class EntityRenderer
 {
-    private static final ResourceLocation locationRainPng = new ResourceLocation("textures/environment/rain.png");
-    private static final ResourceLocation locationSnowPng = new ResourceLocation("textures/environment/snow.png");
+    protected static final ResourceLocation locationRainPng = new ResourceLocation("textures/environment/rain.png");
+    protected static final ResourceLocation locationSnowPng = new ResourceLocation("textures/environment/snow.png");
     public static boolean anaglyphEnable;
 
     /** Anaglyph field (0=R, 1=GB) */
     public static int anaglyphField;
 
     /** A reference to the Minecraft object. */
-    private Minecraft mc;
-    private float farPlaneDistance;
+    protected Minecraft mc;
+    protected float farPlaneDistance = 0.0F;
+    protected float prevFarPlaneDistance = 0.0F;
     public ItemRenderer itemRenderer;
 
     /** Entity renderer update count */
-    private int rendererUpdateCount;
+    protected int rendererUpdateCount;
 
     /** Pointed entity */
-    private Entity pointedEntity;
+    protected Entity pointedEntity;
     private MouseFilter mouseFilterXAxis = new MouseFilter();
     private MouseFilter mouseFilterYAxis = new MouseFilter();
 
@@ -46,33 +48,32 @@
 
     /** Mouse filter dummy 4 */
     private MouseFilter mouseFilterDummy4 = new MouseFilter();
-    private float thirdPersonDistance = 4.0F;
+    protected float thirdPersonDistance = 4.0F;
 
     /** Third person distance temp */
-    private float thirdPersonDistanceTemp = 4.0F;
-    private float debugCamYaw;
-    private float prevDebugCamYaw;
-    private float debugCamPitch;
-    private float prevDebugCamPitch;
+    protected float thirdPersonDistanceTemp = 4.0F;
+    protected float debugCamYaw = 0.0F;
+    protected float prevDebugCamYaw = 0.0F;
+    protected float debugCamPitch = 0.0F;
+    protected float prevDebugCamPitch = 0.0F;
 
     /** Smooth cam yaw */
-    private float smoothCamYaw;
+    protected float smoothCamYaw;
 
     /** Smooth cam pitch */
     private float smoothCamPitch;
 
     /** Smooth cam filter X */
-    private float smoothCamFilterX;
+    protected float smoothCamFilterX;
 
     /** Smooth cam filter Y */
-    private float smoothCamFilterY;
+    protected float smoothCamFilterY;
 
     /** Smooth cam partial ticks */
-    private float smoothCamPartialTicks;
+    protected float smoothCamPartialTicks;
     private float debugCamFOV;
     private float prevDebugCamFOV;
     private float camRoll;
-    private float prevCamRoll;
 
     /**
      * The texture id of the blocklight/skylight texture used for lighting effects
@@ -97,37 +98,44 @@
     private float field_82832_V;
 
     /** Cloud fog mode */
-    private boolean cloudFog;
-    private double cameraZoom = 1.0D;
-    private double cameraYaw;
-    private double cameraPitch;
+    protected boolean cloudFog = false;
+    protected double cameraZoom = 1.0D;
+    
+    protected float cameraYaw = 0.0F; //head + body
+    protected float cameraPitch = 0.0F; //head + additional input(moues if enabled)
+    protected float cameraRoll = 0.0F;
+    protected float prevCamYaw = 0.0F;
+    protected float prevCamPitch = 0.0F;
+    protected float prevCamRoll = 0.0F;
+
+    protected boolean checkAspectRatio = true;
 
     /** Previous frame time in milliseconds */
     private long prevFrameTime = Minecraft.getSystemTime();
 
     /** End time of last render (ns) */
-    private long renderEndNanoTime;
+    private long renderEndNanoTime = 0L;
 
     /**
      * Is set, updateCameraAndRender() calls updateLightmap(); set by updateTorchFlicker()
      */
-    private boolean lightmapUpdateNeeded;
+    protected boolean lightmapUpdateNeeded = false;
 
     /** Torch flicker X */
-    float torchFlickerX;
+    float torchFlickerX = 0.0F;
 
     /** Torch flicker DX */
-    float torchFlickerDX;
+    float torchFlickerDX = 0.0F;
 
     /** Torch flicker Y */
-    float torchFlickerY;
+    float torchFlickerY = 0.0F;
 
     /** Torch flicker DY */
-    float torchFlickerDY;
+    float torchFlickerDY = 0.0F;
     private Random random = new Random();
 
     /** Rain sound counter */
-    private int rainSoundCounter;
+    private int rainSoundCounter = 0;
 
     /** Rain X coords */
     float[] rainXCoords;
@@ -139,13 +147,13 @@
     FloatBuffer fogColorBuffer = GLAllocation.createDirectFloatBuffer(16);
 
     /** red component of the fog color */
-    float fogColorRed;
+    protected float fogColorRed;
 
     /** green component of the fog color */
-    float fogColorGreen;
+    protected float fogColorGreen;
 
     /** blue component of the fog color */
-    float fogColorBlue;
+    protected float fogColorBlue;
 
     /** Fog color 2 */
     private float fogColor2;
@@ -158,11 +166,11 @@
      */
     public int debugViewDirection;
     private boolean initialized = false;
-    private World updatedWorld = null;
+    protected World updatedWorld = null;
     private boolean showDebugInfo = false;
     public boolean fogStandard = false;
-    private long lastServerTime = 0L;
-    private int lastServerTicks = 0;
+    protected long lastServerTime = 0L;
+    protected int lastServerTicks = 0;
     private int serverWaitTime = 0;
     private int serverWaitTimeCurrent = 0;
     private float avgServerTimeDiff = 0.0F;
@@ -277,61 +285,67 @@
             }
 
             Vec3 var7 = this.mc.renderViewEntity.getLook(par1);
-            Vec3 var8 = var6.addVector(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2);
-            this.pointedEntity = null;
-            float var9 = 1.0F;
-            List var10 = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.renderViewEntity, this.mc.renderViewEntity.boundingBox.addCoord(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2).expand((double)var9, (double)var9, (double)var9));
-            double var11 = var4;
+            getPointedEntity(var6, var7, var2, var4);
+        }
+    }
 
-            for (int var13 = 0; var13 < var10.size(); ++var13)
+    protected void getPointedEntity( Vec3 var6, Vec3 var7, double var2, double var4 )
+    {
+        Vec3 var8 = var6.addVector(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2);
+
+        this.pointedEntity = null;
+        float var9 = 1.0F;
+        List var10 = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.renderViewEntity, this.mc.renderViewEntity.boundingBox.addCoord(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2).expand((double)var9, (double)var9, (double)var9));
+        double var11 = var4;
+
+        for (int var13 = 0; var13 < var10.size(); ++var13)
+        {
+            Entity var14 = (Entity)var10.get(var13);
+
+            if (var14.canBeCollidedWith())
             {
-                Entity var14 = (Entity)var10.get(var13);
+                float var15 = var14.getCollisionBorderSize();
+                AxisAlignedBB var16 = var14.boundingBox.expand((double)var15, (double)var15, (double)var15);
+                MovingObjectPosition var17 = var16.calculateIntercept(var6, var8);
 
-                if (var14.canBeCollidedWith())
+                if (var16.isVecInside(var6))
                 {
-                    float var15 = var14.getCollisionBorderSize();
-                    AxisAlignedBB var16 = var14.boundingBox.expand((double)var15, (double)var15, (double)var15);
-                    MovingObjectPosition var17 = var16.calculateIntercept(var6, var8);
-
-                    if (var16.isVecInside(var6))
+                    if (0.0D < var11 || var11 == 0.0D)
                     {
-                        if (0.0D < var11 || var11 == 0.0D)
-                        {
-                            this.pointedEntity = var14;
-                            var11 = 0.0D;
-                        }
+                        this.pointedEntity = var14;
+                        var11 = 0.0D;
                     }
-                    else if (var17 != null)
-                    {
-                        double var18 = var6.distanceTo(var17.hitVec);
+                }
+                else if (var17 != null)
+                {
+                    double var18 = var6.distanceTo(var17.hitVec);
 
-                        if (var18 < var11 || var11 == 0.0D)
+                    if (var18 < var11 || var11 == 0.0D)
+                    {
+                        if (var14 == this.mc.renderViewEntity.ridingEntity)
                         {
-                            if (var14 == this.mc.renderViewEntity.ridingEntity)
-                            {
-                                if (var11 == 0.0D)
-                                {
-                                    this.pointedEntity = var14;
-                                }
-                            }
-                            else
+                            if (var11 == 0.0D)
                             {
                                 this.pointedEntity = var14;
-                                var11 = var18;
                             }
                         }
+                        else
+                        {
+                            this.pointedEntity = var14;
+                            var11 = var18;
+                        }
                     }
                 }
             }
+        }
 
-            if (this.pointedEntity != null && (var11 < var4 || this.mc.objectMouseOver == null))
-            {
-                this.mc.objectMouseOver = new MovingObjectPosition(this.pointedEntity);
+        if (this.pointedEntity != null && (var11 < var4 || this.mc.objectMouseOver == null))
+        {
+            this.mc.objectMouseOver = new MovingObjectPosition(this.pointedEntity);
 
-                if (this.pointedEntity instanceof EntityLivingBase)
-                {
-                    this.mc.pointedEntityLiving = (EntityLivingBase)this.pointedEntity;
-                }
+            if (this.pointedEntity instanceof EntityLivingBase)
+            {
+                this.mc.pointedEntityLiving = (EntityLivingBase)this.pointedEntity;
             }
         }
     }
@@ -437,7 +451,7 @@
         }
     }
 
-    private void hurtCameraEffect(float par1)
+    protected void hurtCameraEffect(float par1)
     {
         EntityLivingBase var2 = this.mc.renderViewEntity;
         float var3 = (float)var2.hurtTime - par1;
@@ -463,7 +477,7 @@
     /**
      * Setups all the GL settings for view bobbing. Args: partialTickTime
      */
-    private void setupViewBobbing(float par1)
+    protected void setupViewBobbing(float par1)
     {
         if (this.mc.renderViewEntity instanceof EntityPlayer)
         {
@@ -823,7 +837,7 @@
         this.lightmapUpdateNeeded = true;
     }
 
-    private void updateLightmap(float par1)
+    protected void updateLightmap(float par1)
     {
         WorldClient var2 = this.mc.theWorld;
 
@@ -975,7 +989,45 @@
         int var3 = par1EntityPlayer.getActivePotionEffect(Potion.nightVision).getDuration();
         return var3 > 200 ? 1.0F : 0.7F + MathHelper.sin(((float)var3 - par2) * (float)Math.PI * 0.2F) * 0.3F;
     }
+    
+    protected void updateCamera( float par1, boolean var14 )
+    {
+        this.mc.mcProfiler.startSection("mouse");
+
+        if (this.mc.inGameHasFocus && var14)
+        {
+            this.mc.mouseHelper.mouseXYChange();
+            float var4 = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
+            float var5 = var4 * var4 * var4 * 8.0F;
+            float var6 = (float)this.mc.mouseHelper.deltaX * var5;
+            float var7 = (float)this.mc.mouseHelper.deltaY * var5;
+            byte var8 = 1;
+
+            if (this.mc.gameSettings.invertMouse)
+            {
+                var8 = -1;
+            }
 
+            if (this.mc.gameSettings.smoothCamera)
+            {
+                this.smoothCamYaw += var6;
+                this.smoothCamPitch += var7;
+                float var9 = par1 - this.smoothCamPartialTicks;
+                this.smoothCamPartialTicks = par1;
+                var6 = this.smoothCamFilterX * var9;
+                var7 = this.smoothCamFilterY * var9;
+                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
+            }
+            else
+            {
+                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
+            }
+        }
+
+        this.mc.mcProfiler.endSection();
+
+    }
+    
     /**
      * Will update any inputs that effect the camera angle (mouse) and then render the world and GUI
      */
@@ -986,6 +1038,9 @@
         if (!this.initialized)
         {
             TextureUtils.registerResourceListener();
+            ItemRendererOF itemRendererOF = new ItemRendererOF(this.mc);
+            this.itemRenderer = itemRendererOF;
+            RenderManager.instance.itemRenderer = itemRendererOF;
             this.initialized = true;
         }
 
@@ -999,6 +1054,29 @@
             Config.setNewRelease((String)null);
         }
 
+        if (var2 != null)
+        {
+            if (checkAspectRatio && this.mc.vrSettings.useVRRenderer)
+            {
+                if (this.mc.hmdInfo != null && !this.mc.hmdInfo.getHMDInfo().isFakeData)
+                {
+                    int hmdScreenWidthPixels = this.mc.hmdInfo.getHMDInfo().HResolution;
+                    int hmdScreenHeightPixels = this.mc.hmdInfo.getHMDInfo().VResolution;
+
+                    DisplayMode e = Display.getDisplayMode();
+                    if (hmdScreenWidthPixels != e.getWidth() || hmdScreenHeightPixels != e.getHeight())
+                    {
+                        this.mc.printChatMessage("Warning: Non-native display resolution, perspective may be skewed! Ideally set your display to full-screen " + hmdScreenWidthPixels + "x" + hmdScreenHeightPixels + ".");
+                    }
+                }
+            }
+            checkAspectRatio = false;
+        }
+        else
+        {
+            checkAspectRatio = true;
+        }
+
         if (this.mc.currentScreen instanceof GuiMainMenu)
         {
             this.updateMainMenu((GuiMainMenu)this.mc.currentScreen);
@@ -1036,124 +1114,98 @@
             this.prevFrameTime = Minecraft.getSystemTime();
         }
 
-        this.mc.mcProfiler.startSection("mouse");
+        updateCamera( par1, var14 );
 
-        if (this.mc.inGameHasFocus && var14)
+        if (!this.mc.skipRenderWorld)
         {
-            this.mc.mouseHelper.mouseXYChange();
-            float var4 = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
-            float var5 = var4 * var4 * var4 * 8.0F;
-            float var6 = (float)this.mc.mouseHelper.deltaX * var5;
-            float var7 = (float)this.mc.mouseHelper.deltaY * var5;
-            byte var8 = 1;
-
-            if (this.mc.gameSettings.invertMouse)
-            {
-                var8 = -1;
-            }
-
-            if (this.mc.gameSettings.smoothCamera)
-            {
-                this.smoothCamYaw += var6;
-                this.smoothCamPitch += var7;
-                float var9 = par1 - this.smoothCamPartialTicks;
-                this.smoothCamPartialTicks = par1;
-                var6 = this.smoothCamFilterX * var9;
-                var7 = this.smoothCamFilterY * var9;
-                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
-            }
-            else
-            {
-                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
-            }
+        	renderGUIandWorld(par1);
         }
 
-        this.mc.mcProfiler.endSection();
+        this.waitForServerThread();
 
-        if (!this.mc.skipRenderWorld)
+        if (this.mc.gameSettings.showDebugInfo != this.lastShowDebugInfo)
         {
-            anaglyphEnable = this.mc.gameSettings.anaglyph;
-            ScaledResolution var15 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
-            int var16 = var15.getScaledWidth();
-            int var17 = var15.getScaledHeight();
-            int var18 = Mouse.getX() * var16 / this.mc.displayWidth;
-            int var20 = var17 - Mouse.getY() * var17 / this.mc.displayHeight - 1;
-            int var19 = performanceToFps(this.mc.gameSettings.limitFramerate);
+            this.showExtendedDebugInfo = this.mc.gameSettings.showDebugProfilerChart;
+            this.lastShowDebugInfo = this.mc.gameSettings.showDebugInfo;
+        }
 
-            if (this.mc.theWorld != null)
-            {
-                this.mc.mcProfiler.startSection("level");
+        if (this.mc.gameSettings.showDebugInfo)
+        {
+            this.showLagometer(this.mc.mcProfiler.timeTickNano, this.mc.mcProfiler.timeUpdateChunksNano);
+        }
 
-                if (this.mc.gameSettings.limitFramerate == 0)
-                {
-                    this.renderWorld(par1, 0L);
-                }
-                else
-                {
-                    this.renderWorld(par1, this.renderEndNanoTime + (long)(1000000000 / var19));
-                }
+        if (this.mc.gameSettings.ofProfiler)
+        {
+            this.mc.gameSettings.showDebugProfilerChart = true;
+        }
+    }
 
-                this.renderEndNanoTime = System.nanoTime();
-                this.mc.mcProfiler.endStartSection("gui");
+    protected void renderGUIandWorld(float par1)
+    {
+        anaglyphEnable = this.mc.gameSettings.anaglyph;
+        ScaledResolution var15 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
+        int var16 = var15.getScaledWidth();
+        int var17 = var15.getScaledHeight();
+        int var18 = Mouse.getX() * var16 / this.mc.displayWidth;
+        int var20 = var17 - Mouse.getY() * var17 / this.mc.displayHeight - 1;
+        int var19 = performanceToFps(this.mc.gameSettings.limitFramerate);
 
-                if (!this.mc.gameSettings.hideGUI || this.mc.currentScreen != null)
-                {
-                    this.mc.ingameGUI.renderGameOverlay(par1, this.mc.currentScreen != null, var18, var20);
-                }
+        if (this.mc.theWorld != null)
+        {
+            this.mc.mcProfiler.startSection("level");
 
-                this.mc.mcProfiler.endSection();
+            if (this.mc.gameSettings.limitFramerate == 0)
+            {
+                this.renderWorld(par1, 0L);
             }
             else
             {
-                GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
-                GL11.glMatrixMode(GL11.GL_PROJECTION);
-                GL11.glLoadIdentity();
-                GL11.glMatrixMode(GL11.GL_MODELVIEW);
-                GL11.glLoadIdentity();
-                this.setupOverlayRendering();
-                this.renderEndNanoTime = System.nanoTime();
+                this.renderWorld(par1, this.renderEndNanoTime + (long)(1000000000 / var19));
             }
 
-            if (this.mc.currentScreen != null)
-            {
-                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
+            this.renderEndNanoTime = System.nanoTime();
+            this.mc.mcProfiler.endStartSection("gui");
 
-                try
-                {
-                    this.mc.currentScreen.drawScreen(var18, var20, par1);
-                }
-                catch (Throwable var13)
-                {
-                    CrashReport var11 = CrashReport.makeCrashReport(var13, "Rendering screen");
-                    CrashReportCategory var12 = var11.makeCategory("Screen render details");
-                    var12.addCrashSectionCallable("Screen name", new CallableScreenName(this));
-                    var12.addCrashSectionCallable("Mouse location", new CallableMouseLocation(this, var18, var20));
-                    var12.addCrashSectionCallable("Screen size", new CallableScreenSize(this, var15));
-                    throw new ReportedException(var11);
-                }
+            if (!this.mc.gameSettings.hideGUI || this.mc.currentScreen != null)
+            {
+                this.mc.ingameGUI.renderGameOverlay(par1, this.mc.currentScreen != null, var18, var20);
             }
-        }
 
-        this.waitForServerThread();
-
-        if (this.mc.gameSettings.showDebugInfo != this.lastShowDebugInfo)
-        {
-            this.showExtendedDebugInfo = this.mc.gameSettings.showDebugProfilerChart;
-            this.lastShowDebugInfo = this.mc.gameSettings.showDebugInfo;
+            this.mc.mcProfiler.endSection();
         }
-
-        if (this.mc.gameSettings.showDebugInfo)
+        else
         {
-            this.showLagometer(this.mc.mcProfiler.timeTickNano, this.mc.mcProfiler.timeUpdateChunksNano);
+            GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
+            GL11.glMatrixMode(GL11.GL_PROJECTION);
+            GL11.glLoadIdentity();
+            GL11.glMatrixMode(GL11.GL_MODELVIEW);
+            GL11.glLoadIdentity();
+            this.setupOverlayRendering();
+            this.renderEndNanoTime = System.nanoTime();
         }
 
-        if (this.mc.gameSettings.ofProfiler)
+        if (this.mc.currentScreen != null)
         {
-            this.mc.gameSettings.showDebugProfilerChart = true;
+            GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
+
+            try
+            {
+                this.mc.currentScreen.drawScreen(var18, var20, par1);
+                GL11.glDisable(GL11.GL_LIGHTING);
+            }
+            catch (Throwable var13)
+            {
+                CrashReport var11 = CrashReport.makeCrashReport(var13, "Rendering screen");
+                CrashReportCategory var12 = var11.makeCategory("Screen render details");
+                var12.addCrashSectionCallable("Screen name", new CallableScreenName(this));
+                var12.addCrashSectionCallable("Mouse location", new CallableMouseLocation(this, var18, var20));
+                var12.addCrashSectionCallable("Screen size", new CallableScreenSize(this, var15));
+                throw new ReportedException(var11);
+            }
         }
     }
 
-    private void waitForServerThread()
+    protected void waitForServerThread()
     {
         this.serverWaitTimeCurrent = 0;
 
@@ -1252,10 +1304,12 @@
             this.prevFrameTimeNano = timeNowNano;
             GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
             GL11.glMatrixMode(GL11.GL_PROJECTION);
+            GL11.glPushMatrix();
             GL11.glEnable(GL11.GL_COLOR_MATERIAL);
             GL11.glLoadIdentity();
             GL11.glOrtho(0.0D, (double)this.mc.displayWidth, (double)this.mc.displayHeight, 0.0D, 1000.0D, 3000.0D);
             GL11.glMatrixMode(GL11.GL_MODELVIEW);
+            GL11.glPushMatrix();
             GL11.glLoadIdentity();
             GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
             GL11.glLineWidth(1.0F);
@@ -1294,6 +1348,11 @@
             }
 
             tessellator.draw();
+            GL11.glMatrixMode(GL11.GL_PROJECTION);
+            GL11.glPopMatrix();
+            GL11.glMatrixMode(GL11.GL_MODELVIEW);
+            GL11.glPopMatrix();
+            GL11.glEnable(GL11.GL_TEXTURE_2D);
         }
     }
 
@@ -1614,7 +1673,7 @@
     /**
      * Render clouds if enabled
      */
-    private void renderCloudsCheck(RenderGlobal par1RenderGlobal, float par2)
+    protected void renderCloudsCheck(RenderGlobal par1RenderGlobal, float par2)
     {
         if (this.mc.gameSettings.shouldRenderClouds())
         {
@@ -1918,211 +1977,186 @@
     /**
      * calculates fog and calls glClearColor
      */
-    private void updateFogColor(float par1)
+    protected void updateFogColor(float par1)
     {
         WorldClient var2 = this.mc.theWorld;
         EntityLivingBase var3 = this.mc.renderViewEntity;
         float var4 = 1.0F / (float)(4 - this.mc.gameSettings.renderDistance);
         var4 = 1.0F - (float)Math.pow((double)var4, 0.25D);
         Vec3 var5 = var2.getSkyColor(this.mc.renderViewEntity, par1);
-        int var6 = var2.provider.dimensionId;
-
-        switch (var6)
-        {
-            case 0:
-                var5 = CustomColorizer.getSkyColor(var5, this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
-                break;
-
-            case 1:
-                var5 = CustomColorizer.getSkyColorEnd(var5);
-        }
-
-        float var7 = (float)var5.xCoord;
-        float var8 = (float)var5.yCoord;
-        float var9 = (float)var5.zCoord;
-        Vec3 var10 = var2.getFogColor(par1);
-
-        switch (var6)
-        {
-            case -1:
-                var10 = CustomColorizer.getFogColorNether(var10);
-                break;
-
-            case 0:
-                var10 = CustomColorizer.getFogColor(var10, this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
-                break;
-
-            case 1:
-                var10 = CustomColorizer.getFogColorEnd(var10);
-        }
-
-        this.fogColorRed = (float)var10.xCoord;
-        this.fogColorGreen = (float)var10.yCoord;
-        this.fogColorBlue = (float)var10.zCoord;
-        float var11;
+        var5 = CustomColorizer.getWorldSkyColor(var5, var2, this.mc.renderViewEntity, par1);
+        float var6 = (float)var5.xCoord;
+        float var7 = (float)var5.yCoord;
+        float var8 = (float)var5.zCoord;
+        Vec3 var9 = var2.getFogColor(par1);
+        var9 = CustomColorizer.getWorldFogColor(var9, var2, par1);
+        this.fogColorRed = (float)var9.xCoord;
+        this.fogColorGreen = (float)var9.yCoord;
+        this.fogColorBlue = (float)var9.zCoord;
+        float var10;
 
         if (this.mc.gameSettings.renderDistance < 2)
         {
-            Vec3 var12 = MathHelper.sin(var2.getCelestialAngleRadians(par1)) > 0.0F ? var2.getWorldVec3Pool().getVecFromPool(-1.0D, 0.0D, 0.0D) : var2.getWorldVec3Pool().getVecFromPool(1.0D, 0.0D, 0.0D);
-            var11 = (float)var3.getLook(par1).dotProduct(var12);
+            Vec3 var11 = MathHelper.sin(var2.getCelestialAngleRadians(par1)) > 0.0F ? var2.getWorldVec3Pool().getVecFromPool(-1.0D, 0.0D, 0.0D) : var2.getWorldVec3Pool().getVecFromPool(1.0D, 0.0D, 0.0D);
+            var10 = (float)var3.getLook(par1).dotProduct(var11);
 
-            if (var11 < 0.0F)
+            if (var10 < 0.0F)
             {
-                var11 = 0.0F;
+                var10 = 0.0F;
             }
 
-            if (var11 > 0.0F)
+            if (var10 > 0.0F)
             {
-                float[] var13 = var2.provider.calcSunriseSunsetColors(var2.getCelestialAngle(par1), par1);
+                float[] var12 = var2.provider.calcSunriseSunsetColors(var2.getCelestialAngle(par1), par1);
 
-                if (var13 != null)
+                if (var12 != null)
                 {
-                    var11 *= var13[3];
-                    this.fogColorRed = this.fogColorRed * (1.0F - var11) + var13[0] * var11;
-                    this.fogColorGreen = this.fogColorGreen * (1.0F - var11) + var13[1] * var11;
-                    this.fogColorBlue = this.fogColorBlue * (1.0F - var11) + var13[2] * var11;
+                    var10 *= var12[3];
+                    this.fogColorRed = this.fogColorRed * (1.0F - var10) + var12[0] * var10;
+                    this.fogColorGreen = this.fogColorGreen * (1.0F - var10) + var12[1] * var10;
+                    this.fogColorBlue = this.fogColorBlue * (1.0F - var10) + var12[2] * var10;
                 }
             }
         }
 
-        this.fogColorRed += (var7 - this.fogColorRed) * var4;
-        this.fogColorGreen += (var8 - this.fogColorGreen) * var4;
-        this.fogColorBlue += (var9 - this.fogColorBlue) * var4;
-        float var23 = var2.getRainStrength(par1);
-        float var24;
+        this.fogColorRed += (var6 - this.fogColorRed) * var4;
+        this.fogColorGreen += (var7 - this.fogColorGreen) * var4;
+        this.fogColorBlue += (var8 - this.fogColorBlue) * var4;
+        float var22 = var2.getRainStrength(par1);
+        float var23;
 
-        if (var23 > 0.0F)
+        if (var22 > 0.0F)
         {
-            var11 = 1.0F - var23 * 0.5F;
-            var24 = 1.0F - var23 * 0.4F;
-            this.fogColorRed *= var11;
-            this.fogColorGreen *= var11;
-            this.fogColorBlue *= var24;
+            var10 = 1.0F - var22 * 0.5F;
+            var23 = 1.0F - var22 * 0.4F;
+            this.fogColorRed *= var10;
+            this.fogColorGreen *= var10;
+            this.fogColorBlue *= var23;
         }
 
-        var11 = var2.getWeightedThunderStrength(par1);
+        var10 = var2.getWeightedThunderStrength(par1);
 
-        if (var11 > 0.0F)
+        if (var10 > 0.0F)
         {
-            var24 = 1.0F - var11 * 0.5F;
-            this.fogColorRed *= var24;
-            this.fogColorGreen *= var24;
-            this.fogColorBlue *= var24;
+            var23 = 1.0F - var10 * 0.5F;
+            this.fogColorRed *= var23;
+            this.fogColorGreen *= var23;
+            this.fogColorBlue *= var23;
         }
 
-        int var14 = ActiveRenderInfo.getBlockIdAtEntityViewpoint(this.mc.theWorld, var3, par1);
-        float var15;
-        Vec3 var16;
+        int var13 = ActiveRenderInfo.getBlockIdAtEntityViewpoint(this.mc.theWorld, var3, par1);
+        float var14;
+        Vec3 var15;
 
         if (this.cloudFog)
         {
-            var16 = var2.getCloudColour(par1);
-            this.fogColorRed = (float)var16.xCoord;
-            this.fogColorGreen = (float)var16.yCoord;
-            this.fogColorBlue = (float)var16.zCoord;
+            var15 = var2.getCloudColour(par1);
+            this.fogColorRed = (float)var15.xCoord;
+            this.fogColorGreen = (float)var15.yCoord;
+            this.fogColorBlue = (float)var15.zCoord;
         }
-        else if (var14 != 0 && Block.blocksList[var14].blockMaterial == Material.water)
+        else if (var13 != 0 && Block.blocksList[var13].blockMaterial == Material.water)
         {
-            var15 = (float)EnchantmentHelper.getRespiration(var3) * 0.2F;
-            this.fogColorRed = 0.02F + var15;
-            this.fogColorGreen = 0.02F + var15;
-            this.fogColorBlue = 0.2F + var15;
-            var16 = CustomColorizer.getUnderwaterColor(this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
+            var14 = (float)EnchantmentHelper.getRespiration(var3) * 0.2F;
+            this.fogColorRed = 0.02F + var14;
+            this.fogColorGreen = 0.02F + var14;
+            this.fogColorBlue = 0.2F + var14;
+            var15 = CustomColorizer.getUnderwaterColor(this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
 
-            if (var16 != null)
+            if (var15 != null)
             {
-                this.fogColorRed = (float)var16.xCoord;
-                this.fogColorGreen = (float)var16.yCoord;
-                this.fogColorBlue = (float)var16.zCoord;
+                this.fogColorRed = (float)var15.xCoord;
+                this.fogColorGreen = (float)var15.yCoord;
+                this.fogColorBlue = (float)var15.zCoord;
             }
         }
-        else if (var14 != 0 && Block.blocksList[var14].blockMaterial == Material.lava)
+        else if (var13 != 0 && Block.blocksList[var13].blockMaterial == Material.lava)
         {
             this.fogColorRed = 0.6F;
             this.fogColorGreen = 0.1F;
             this.fogColorBlue = 0.0F;
         }
 
-        var15 = this.fogColor2 + (this.fogColor1 - this.fogColor2) * par1;
-        this.fogColorRed *= var15;
-        this.fogColorGreen *= var15;
-        this.fogColorBlue *= var15;
-        double var25 = var2.provider.getVoidFogYFactor();
+        var14 = this.fogColor2 + (this.fogColor1 - this.fogColor2) * par1;
+        this.fogColorRed *= var14;
+        this.fogColorGreen *= var14;
+        this.fogColorBlue *= var14;
+        double var24 = var2.provider.getVoidFogYFactor();
 
         if (!Config.isDepthFog())
         {
-            var25 = 1.0D;
+            var24 = 1.0D;
         }
 
-        double var18 = (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)par1) * var25;
+        double var17 = (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)par1) * var24;
 
         if (var3.isPotionActive(Potion.blindness))
         {
-            int var20 = var3.getActivePotionEffect(Potion.blindness).getDuration();
+            int var19 = var3.getActivePotionEffect(Potion.blindness).getDuration();
 
-            if (var20 < 20)
+            if (var19 < 20)
             {
-                var18 *= (double)(1.0F - (float)var20 / 20.0F);
+                var17 *= (double)(1.0F - (float)var19 / 20.0F);
             }
             else
             {
-                var18 = 0.0D;
+                var17 = 0.0D;
             }
         }
 
-        if (var18 < 1.0D)
+        if (var17 < 1.0D)
         {
-            if (var18 < 0.0D)
+            if (var17 < 0.0D)
             {
-                var18 = 0.0D;
+                var17 = 0.0D;
             }
 
-            var18 *= var18;
-            this.fogColorRed = (float)((double)this.fogColorRed * var18);
-            this.fogColorGreen = (float)((double)this.fogColorGreen * var18);
-            this.fogColorBlue = (float)((double)this.fogColorBlue * var18);
+            var17 *= var17;
+            this.fogColorRed = (float)((double)this.fogColorRed * var17);
+            this.fogColorGreen = (float)((double)this.fogColorGreen * var17);
+            this.fogColorBlue = (float)((double)this.fogColorBlue * var17);
         }
 
-        float var26;
+        float var25;
 
         if (this.field_82831_U > 0.0F)
         {
-            var26 = this.field_82832_V + (this.field_82831_U - this.field_82832_V) * par1;
-            this.fogColorRed = this.fogColorRed * (1.0F - var26) + this.fogColorRed * 0.7F * var26;
-            this.fogColorGreen = this.fogColorGreen * (1.0F - var26) + this.fogColorGreen * 0.6F * var26;
-            this.fogColorBlue = this.fogColorBlue * (1.0F - var26) + this.fogColorBlue * 0.6F * var26;
+            var25 = this.field_82832_V + (this.field_82831_U - this.field_82832_V) * par1;
+            this.fogColorRed = this.fogColorRed * (1.0F - var25) + this.fogColorRed * 0.7F * var25;
+            this.fogColorGreen = this.fogColorGreen * (1.0F - var25) + this.fogColorGreen * 0.6F * var25;
+            this.fogColorBlue = this.fogColorBlue * (1.0F - var25) + this.fogColorBlue * 0.6F * var25;
         }
 
-        float var21;
+        float var20;
 
         if (var3.isPotionActive(Potion.nightVision))
         {
-            var26 = this.getNightVisionBrightness(this.mc.thePlayer, par1);
-            var21 = 1.0F / this.fogColorRed;
+            var25 = this.getNightVisionBrightness(this.mc.thePlayer, par1);
+            var20 = 1.0F / this.fogColorRed;
 
-            if (var21 > 1.0F / this.fogColorGreen)
+            if (var20 > 1.0F / this.fogColorGreen)
             {
-                var21 = 1.0F / this.fogColorGreen;
+                var20 = 1.0F / this.fogColorGreen;
             }
 
-            if (var21 > 1.0F / this.fogColorBlue)
+            if (var20 > 1.0F / this.fogColorBlue)
             {
-                var21 = 1.0F / this.fogColorBlue;
+                var20 = 1.0F / this.fogColorBlue;
             }
 
-            this.fogColorRed = this.fogColorRed * (1.0F - var26) + this.fogColorRed * var21 * var26;
-            this.fogColorGreen = this.fogColorGreen * (1.0F - var26) + this.fogColorGreen * var21 * var26;
-            this.fogColorBlue = this.fogColorBlue * (1.0F - var26) + this.fogColorBlue * var21 * var26;
+            this.fogColorRed = this.fogColorRed * (1.0F - var25) + this.fogColorRed * var20 * var25;
+            this.fogColorGreen = this.fogColorGreen * (1.0F - var25) + this.fogColorGreen * var20 * var25;
+            this.fogColorBlue = this.fogColorBlue * (1.0F - var25) + this.fogColorBlue * var20 * var25;
         }
 
         if (this.mc.gameSettings.anaglyph)
         {
-            var26 = (this.fogColorRed * 30.0F + this.fogColorGreen * 59.0F + this.fogColorBlue * 11.0F) / 100.0F;
-            var21 = (this.fogColorRed * 30.0F + this.fogColorGreen * 70.0F) / 100.0F;
-            float var22 = (this.fogColorRed * 30.0F + this.fogColorBlue * 70.0F) / 100.0F;
-            this.fogColorRed = var26;
-            this.fogColorGreen = var21;
-            this.fogColorBlue = var22;
+            var25 = (this.fogColorRed * 30.0F + this.fogColorGreen * 59.0F + this.fogColorBlue * 11.0F) / 100.0F;
+            var20 = (this.fogColorRed * 30.0F + this.fogColorGreen * 70.0F) / 100.0F;
+            float var21 = (this.fogColorRed * 30.0F + this.fogColorBlue * 70.0F) / 100.0F;
+            this.fogColorRed = var25;
+            this.fogColorGreen = var20;
+            this.fogColorBlue = var21;
         }
 
         GL11.glClearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
@@ -2132,7 +2166,7 @@
      * Sets up the fog to be rendered. If the arg passed in is -1 the fog starts at 0 and goes to 80% of far plane
      * distance and is used for sky rendering.
      */
-    private void setupFog(int par1, float par2)
+    protected void setupFog(int par1, float par2)
     {
         EntityLivingBase var3 = this.mc.renderViewEntity;
         boolean var4 = false;
@@ -2310,25 +2344,14 @@
     {
         Minecraft var1 = Config.getMinecraft();
 
-        if (var1.currentScreen != null && var1.currentScreen instanceof GuiMainMenu)
-        {
-            return 35;
-        }
-        else if (var1.theWorld == null)
+        int var2 = Config.getGameSettings().ofLimitFramerateFine;
+
+        if (var2 <= 0)
         {
-            return 35;
+            var2 = 10000;
         }
-        else
-        {
-            int var2 = Config.getGameSettings().ofLimitFramerateFine;
-
-            if (var2 <= 0)
-            {
-                var2 = 10000;
-            }
 
-            return var2;
-        }
+        return var2;
     }
 
     /**
