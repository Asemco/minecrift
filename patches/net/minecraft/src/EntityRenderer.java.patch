--- a/net/minecraft/src/EntityRenderer.java
+++ b/net/minecraft/src/EntityRenderer.java
@@ -9,29 +9,31 @@
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.DisplayMode;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GLContext;
 import org.lwjgl.util.glu.Project;
 
 public class EntityRenderer
 {
-    private static final ResourceLocation locationRainPng = new ResourceLocation("textures/environment/rain.png");
-    private static final ResourceLocation locationSnowPng = new ResourceLocation("textures/environment/snow.png");
+    protected static final ResourceLocation field_110924_q = new ResourceLocation("textures/environment/rain.png");
+    protected static final ResourceLocation field_110923_r = new ResourceLocation("textures/environment/snow.png");
     public static boolean anaglyphEnable;
 
     /** Anaglyph field (0=R, 1=GB) */
     public static int anaglyphField;
 
     /** A reference to the Minecraft object. */
-    private Minecraft mc;
-    private float farPlaneDistance;
+    protected Minecraft mc;
+    protected float farPlaneDistance = 0.0F;
+    protected float prevFarPlaneDistance = 0.0F;
     public ItemRenderer itemRenderer;
 
     /** Entity renderer update count */
-    private int rendererUpdateCount;
+    protected int rendererUpdateCount;
 
     /** Pointed entity */
-    private Entity pointedEntity;
+    protected Entity pointedEntity;
     private MouseFilter mouseFilterXAxis = new MouseFilter();
     private MouseFilter mouseFilterYAxis = new MouseFilter();
 
@@ -46,33 +48,31 @@
 
     /** Mouse filter dummy 4 */
     private MouseFilter mouseFilterDummy4 = new MouseFilter();
-    private float thirdPersonDistance = 4.0F;
+    protected float thirdPersonDistance = 4.0F;
 
     /** Third person distance temp */
-    private float thirdPersonDistanceTemp = 4.0F;
-    private float debugCamYaw;
-    private float prevDebugCamYaw;
-    private float debugCamPitch;
-    private float prevDebugCamPitch;
+    protected float thirdPersonDistanceTemp = 4.0F;
+    protected float debugCamYaw = 0.0F;
+    protected float prevDebugCamYaw = 0.0F;
+    protected float debugCamPitch = 0.0F;
+    protected float prevDebugCamPitch = 0.0F;
 
     /** Smooth cam yaw */
-    private float smoothCamYaw;
+    protected float smoothCamYaw;
 
     /** Smooth cam pitch */
     private float smoothCamPitch;
 
     /** Smooth cam filter X */
-    private float smoothCamFilterX;
+    protected float smoothCamFilterX;
 
     /** Smooth cam filter Y */
-    private float smoothCamFilterY;
+    protected float smoothCamFilterY;
 
     /** Smooth cam partial ticks */
-    private float smoothCamPartialTicks;
+    protected float smoothCamPartialTicks;
     private float debugCamFOV;
     private float prevDebugCamFOV;
-    private float camRoll;
-    private float prevCamRoll;
 
     /**
      * The texture id of the blocklight/skylight texture used for lighting effects
@@ -83,7 +83,7 @@
      * Colors computed in updateLightmap() and loaded into the lightmap emptyTexture
      */
     private final int[] lightmapColors;
-    private final ResourceLocation locationLightMap;
+    private final ResourceLocation field_110922_T;
 
     /** FOV modifier hand */
     private float fovModifierHand;
@@ -97,37 +97,44 @@
     private float field_82832_V;
 
     /** Cloud fog mode */
-    private boolean cloudFog;
-    private double cameraZoom = 1.0D;
-    private double cameraYaw;
-    private double cameraPitch;
+    protected boolean cloudFog = false;
+    protected double cameraZoom = 1.0D;
+    
+    protected float cameraYaw = 0.0F; //head + body
+    protected float cameraPitch = 0.0F; //head + additional input(moues if enabled)
+    protected float cameraRoll = 0.0F;
+    protected float prevCamYaw = 0.0F;
+    protected float prevCamPitch = 0.0F;
+    protected float prevCamRoll = 0.0F;
+
+    protected boolean checkAspectRatio = true;
 
     /** Previous frame time in milliseconds */
     private long prevFrameTime = Minecraft.getSystemTime();
 
     /** End time of last render (ns) */
-    private long renderEndNanoTime;
+    private long renderEndNanoTime = 0L;
 
     /**
      * Is set, updateCameraAndRender() calls updateLightmap(); set by updateTorchFlicker()
      */
-    private boolean lightmapUpdateNeeded;
+    protected boolean lightmapUpdateNeeded = false;
 
     /** Torch flicker X */
-    float torchFlickerX;
+    float torchFlickerX = 0.0F;
 
     /** Torch flicker DX */
-    float torchFlickerDX;
+    float torchFlickerDX = 0.0F;
 
     /** Torch flicker Y */
-    float torchFlickerY;
+    float torchFlickerY = 0.0F;
 
     /** Torch flicker DY */
-    float torchFlickerDY;
+    float torchFlickerDY = 0.0F;
     private Random random = new Random();
 
     /** Rain sound counter */
-    private int rainSoundCounter;
+    private int rainSoundCounter = 0;
 
     /** Rain X coords */
     float[] rainXCoords;
@@ -139,13 +146,13 @@
     FloatBuffer fogColorBuffer = GLAllocation.createDirectFloatBuffer(16);
 
     /** red component of the fog color */
-    float fogColorRed;
+    protected float fogColorRed;
 
     /** green component of the fog color */
-    float fogColorGreen;
+    protected float fogColorGreen;
 
     /** blue component of the fog color */
-    float fogColorBlue;
+    protected float fogColorBlue;
 
     /** Fog color 2 */
     private float fogColor2;
@@ -158,11 +165,11 @@
      */
     public int debugViewDirection;
     private boolean initialized = false;
-    private World updatedWorld = null;
+    protected World updatedWorld = null;
     private boolean showDebugInfo = false;
     public boolean fogStandard = false;
-    private long lastServerTime = 0L;
-    private int lastServerTicks = 0;
+    protected long lastServerTime = 0L;
+    protected int lastServerTicks = 0;
     private int serverWaitTime = 0;
     private int serverWaitTimeCurrent = 0;
     private float avgServerTimeDiff = 0.0F;
@@ -181,8 +188,8 @@
         this.mc = par1Minecraft;
         this.itemRenderer = new ItemRenderer(par1Minecraft);
         this.lightmapTexture = new DynamicTexture(16, 16);
-        this.locationLightMap = par1Minecraft.getTextureManager().getDynamicTextureLocation("lightMap", this.lightmapTexture);
-        this.lightmapColors = this.lightmapTexture.getTextureData();
+        this.field_110922_T = par1Minecraft.func_110434_K().func_110578_a("lightMap", this.lightmapTexture);
+        this.lightmapColors = this.lightmapTexture.func_110565_c();
     }
 
     /**
@@ -197,7 +204,7 @@
         this.prevDebugCamYaw = this.debugCamYaw;
         this.prevDebugCamPitch = this.debugCamPitch;
         this.prevDebugCamFOV = this.debugCamFOV;
-        this.prevCamRoll = this.camRoll;
+        this.prevCamRoll = this.cameraRoll;
         float var1;
         float var2;
 
@@ -277,36 +284,43 @@
             }
 
             Vec3 var7 = this.mc.renderViewEntity.getLook(par1);
-            Vec3 var8 = var6.addVector(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2);
-            this.pointedEntity = null;
-            float var9 = 1.0F;
-            List var10 = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.renderViewEntity, this.mc.renderViewEntity.boundingBox.addCoord(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2).expand((double)var9, (double)var9, (double)var9));
-            double var11 = var4;
+            getPointedEntity(var6, var7, var2, var4);
+        }
+    }
+
+    protected void getPointedEntity( Vec3 var6, Vec3 var7, double var2, double var4 )
+    {
+        Vec3 var8 = var6.addVector(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2);
+
+        this.pointedEntity = null;
+        float var9 = 1.0F;
+        List var10 = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.renderViewEntity, this.mc.renderViewEntity.boundingBox.addCoord(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2).expand((double)var9, (double)var9, (double)var9));
+        double var11 = var4;
 
-            for (int var13 = 0; var13 < var10.size(); ++var13)
+        for (int var13 = 0; var13 < var10.size(); ++var13)
+        {
+            Entity var14 = (Entity)var10.get(var13);
+
+            if (var14.canBeCollidedWith())
             {
-                Entity var14 = (Entity)var10.get(var13);
+                float var15 = var14.getCollisionBorderSize();
+                AxisAlignedBB var16 = var14.boundingBox.expand((double)var15, (double)var15, (double)var15);
+                MovingObjectPosition var17 = var16.calculateIntercept(var6, var8);
 
-                if (var14.canBeCollidedWith())
+                if (var16.isVecInside(var6))
                 {
-                    float var15 = var14.getCollisionBorderSize();
-                    AxisAlignedBB var16 = var14.boundingBox.expand((double)var15, (double)var15, (double)var15);
-                    MovingObjectPosition var17 = var16.calculateIntercept(var6, var8);
-
-                    if (var16.isVecInside(var6))
+                    if (0.0D < var11 || var11 == 0.0D)
                     {
-                        if (0.0D < var11 || var11 == 0.0D)
-                        {
-                            this.pointedEntity = var14;
-                            var11 = 0.0D;
-                        }
+                        this.pointedEntity = var14;
+                        var11 = 0.0D;
                     }
-                    else if (var17 != null)
-                    {
-                        double var18 = var6.distanceTo(var17.hitVec);
+                }
+                else if (var17 != null)
+                {
+                    double var18 = var6.distanceTo(var17.hitVec);
 
-                        if (var18 < var11 || var11 == 0.0D)
-                        {
+                    if (var18 < var11 || var11 == 0.0D)
+                    {
                             if (var14 == this.mc.renderViewEntity.ridingEntity)
                             {
                                 if (var11 == 0.0D)
@@ -333,7 +347,6 @@
                     this.mc.pointedEntityLiving = (EntityLivingBase)this.pointedEntity;
                 }
             }
-        }
     }
 
     /**
@@ -420,7 +433,7 @@
                 this.mouseFilterYAxis = new MouseFilter();
             }
 
-            if (var3.getHealth() <= 0.0F)
+            if (var3.func_110143_aJ() <= 0.0F)
             {
                 float var6 = (float)var3.deathTime + par1;
                 var4 /= (1.0F - 500.0F / (var6 + 500.0F)) * 2.0F + 1.0F;
@@ -437,13 +450,13 @@
         }
     }
 
-    private void hurtCameraEffect(float par1)
+    protected void hurtCameraEffect(float par1)
     {
         EntityLivingBase var2 = this.mc.renderViewEntity;
         float var3 = (float)var2.hurtTime - par1;
         float var4;
 
-        if (var2.getHealth() <= 0.0F)
+        if (var2.func_110143_aJ() <= 0.0F)
         {
             var4 = (float)var2.deathTime + par1;
             GL11.glRotatef(40.0F - 8000.0F / (var4 + 200.0F), 0.0F, 0.0F, 1.0F);
@@ -463,7 +476,7 @@
     /**
      * Setups all the GL settings for view bobbing. Args: partialTickTime
      */
-    private void setupViewBobbing(float par1)
+    protected void setupViewBobbing(float par1)
     {
         if (this.mc.renderViewEntity instanceof EntityPlayer)
         {
@@ -489,7 +502,7 @@
         double var4 = var2.prevPosX + (var2.posX - var2.prevPosX) * (double)par1;
         double var6 = var2.prevPosY + (var2.posY - var2.prevPosY) * (double)par1 - (double)var3;
         double var8 = var2.prevPosZ + (var2.posZ - var2.prevPosZ) * (double)par1;
-        GL11.glRotatef(this.prevCamRoll + (this.camRoll - this.prevCamRoll) * par1, 0.0F, 0.0F, 1.0F);
+        GL11.glRotatef(this.prevCamRoll + (this.cameraRoll - this.prevCamRoll) * par1, 0.0F, 0.0F, 1.0F);
 
         if (var2.isPlayerSleeping())
         {
@@ -799,7 +812,7 @@
         GL11.glScalef(var3, var3, var3);
         GL11.glTranslatef(8.0F, 8.0F, 8.0F);
         GL11.glMatrixMode(GL11.GL_MODELVIEW);
-        this.mc.getTextureManager().bindTexture(this.locationLightMap);
+        this.mc.func_110434_K().func_110577_a(this.field_110922_T);
         GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
         GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
         GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL11.GL_CLAMP);
@@ -823,15 +836,15 @@
         this.lightmapUpdateNeeded = true;
     }
 
-    private void updateLightmap(float par1)
+    protected void updateLightmap(float par1)
     {
         WorldClient var2 = this.mc.theWorld;
 
         if (var2 != null)
         {
-            if (CustomColorizer.updateLightmap(var2, this.torchFlickerX, this.lightmapColors, this.mc.thePlayer.isPotionActive(Potion.nightVision)))
+            if (CustomColorizer.updateLightmap(var2, this, this.lightmapColors, this.mc.thePlayer.isPotionActive(Potion.nightVision)))
             {
-                this.lightmapTexture.updateDynamicTexture();
+                this.lightmapTexture.func_110564_a();
                 this.lightmapUpdateNeeded = false;
                 return;
             }
@@ -962,7 +975,7 @@
                 this.lightmapColors[var3] = var18 << 24 | var19 << 16 | var20 << 8 | var21;
             }
 
-            this.lightmapTexture.updateDynamicTexture();
+            this.lightmapTexture.func_110564_a();
             this.lightmapUpdateNeeded = false;
         }
     }
@@ -975,7 +988,45 @@
         int var3 = par1EntityPlayer.getActivePotionEffect(Potion.nightVision).getDuration();
         return var3 > 200 ? 1.0F : 0.7F + MathHelper.sin(((float)var3 - par2) * (float)Math.PI * 0.2F) * 0.3F;
     }
+    
+    protected void updateCamera( float par1, boolean var14 )
+    {
+        this.mc.mcProfiler.startSection("mouse");
+
+        if (this.mc.inGameHasFocus && var14)
+        {
+            this.mc.mouseHelper.mouseXYChange();
+            float var4 = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
+            float var5 = var4 * var4 * var4 * 8.0F;
+            float var6 = (float)this.mc.mouseHelper.deltaX * var5;
+            float var7 = (float)this.mc.mouseHelper.deltaY * var5;
+            byte var8 = 1;
+
+            if (this.mc.gameSettings.invertMouse)
+            {
+                var8 = -1;
+            }
+
+            if (this.mc.gameSettings.smoothCamera)
+            {
+                this.smoothCamYaw += var6;
+                this.smoothCamPitch += var7;
+                float var9 = par1 - this.smoothCamPartialTicks;
+                this.smoothCamPartialTicks = par1;
+                var6 = this.smoothCamFilterX * var9;
+                var7 = this.smoothCamFilterY * var9;
+                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
+            }
+            else
+            {
+                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
+            }
+        }
+
+        this.mc.mcProfiler.endSection();
 
+    }
+    
     /**
      * Will update any inputs that effect the camera angle (mouse) and then render the world and GUI
      */
@@ -999,6 +1050,29 @@
             Config.setNewRelease((String)null);
         }
 
+        if (var2 != null)
+        {
+            if (checkAspectRatio && this.mc.vrSettings.useVRRenderer)
+            {
+                if (this.mc.hmdInfo != null && !this.mc.hmdInfo.getHMDInfo().isFakeData)
+                {
+                    int hmdScreenWidthPixels = this.mc.hmdInfo.getHMDInfo().HResolution;
+                    int hmdScreenHeightPixels = this.mc.hmdInfo.getHMDInfo().VResolution;
+
+                    DisplayMode e = Display.getDisplayMode();
+                    if (hmdScreenWidthPixels != e.getWidth() || hmdScreenHeightPixels != e.getHeight())
+                    {
+                        this.mc.printChatMessage("Warning: Non-native display resolution, perspective may be skewed! Ideally set your display to full-screen " + hmdScreenWidthPixels + "x" + hmdScreenHeightPixels + ".");
+                    }
+                }
+            }
+            checkAspectRatio = false;
+        }
+        else
+        {
+            checkAspectRatio = true;
+        }
+
         if (this.mc.currentScreen instanceof GuiMainMenu)
         {
             this.updateMainMenu((GuiMainMenu)this.mc.currentScreen);
@@ -1028,7 +1102,7 @@
         {
             if (Minecraft.getSystemTime() - this.prevFrameTime > 500L)
             {
-                this.mc.displayInGameMenu();
+            	this.mc.displayInGameMenu();
             }
         }
         else
@@ -1036,124 +1110,98 @@
             this.prevFrameTime = Minecraft.getSystemTime();
         }
 
-        this.mc.mcProfiler.startSection("mouse");
+        updateCamera( par1, var14 );
 
-        if (this.mc.inGameHasFocus && var14)
+        if (!this.mc.skipRenderWorld)
         {
-            this.mc.mouseHelper.mouseXYChange();
-            float var4 = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
-            float var5 = var4 * var4 * var4 * 8.0F;
-            float var6 = (float)this.mc.mouseHelper.deltaX * var5;
-            float var7 = (float)this.mc.mouseHelper.deltaY * var5;
-            byte var8 = 1;
-
-            if (this.mc.gameSettings.invertMouse)
-            {
-                var8 = -1;
-            }
-
-            if (this.mc.gameSettings.smoothCamera)
-            {
-                this.smoothCamYaw += var6;
-                this.smoothCamPitch += var7;
-                float var9 = par1 - this.smoothCamPartialTicks;
-                this.smoothCamPartialTicks = par1;
-                var6 = this.smoothCamFilterX * var9;
-                var7 = this.smoothCamFilterY * var9;
-                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
-            }
-            else
-            {
-                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
-            }
+        	renderGUIandWorld(par1);
         }
 
-        this.mc.mcProfiler.endSection();
+        this.waitForServerThread();
 
-        if (!this.mc.skipRenderWorld)
+        if (this.mc.gameSettings.showDebugInfo != this.lastShowDebugInfo)
         {
-            anaglyphEnable = this.mc.gameSettings.anaglyph;
-            ScaledResolution var15 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
-            int var16 = var15.getScaledWidth();
-            int var17 = var15.getScaledHeight();
-            int var18 = Mouse.getX() * var16 / this.mc.displayWidth;
-            int var20 = var17 - Mouse.getY() * var17 / this.mc.displayHeight - 1;
-            int var19 = performanceToFps(this.mc.gameSettings.limitFramerate);
+            this.showExtendedDebugInfo = this.mc.gameSettings.showDebugProfilerChart;
+            this.lastShowDebugInfo = this.mc.gameSettings.showDebugInfo;
+        }
 
-            if (this.mc.theWorld != null)
-            {
-                this.mc.mcProfiler.startSection("level");
+        if (this.mc.gameSettings.showDebugInfo)
+        {
+            this.showLagometer(this.mc.mcProfiler.timeTickNano, this.mc.mcProfiler.timeUpdateChunksNano);
+        }
 
-                if (this.mc.gameSettings.limitFramerate == 0)
-                {
-                    this.renderWorld(par1, 0L);
-                }
-                else
-                {
-                    this.renderWorld(par1, this.renderEndNanoTime + (long)(1000000000 / var19));
-                }
+        if (this.mc.gameSettings.ofProfiler)
+        {
+            this.mc.gameSettings.showDebugProfilerChart = true;
+        }
+    }
 
-                this.renderEndNanoTime = System.nanoTime();
-                this.mc.mcProfiler.endStartSection("gui");
+    protected void renderGUIandWorld(float par1)
+    {
+        anaglyphEnable = this.mc.gameSettings.anaglyph;
+        ScaledResolution var15 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
+        int var16 = var15.getScaledWidth();
+        int var17 = var15.getScaledHeight();
+        int var18 = Mouse.getX() * var16 / this.mc.displayWidth;
+        int var20 = var17 - Mouse.getY() * var17 / this.mc.displayHeight - 1;
+        int var19 = performanceToFps(this.mc.gameSettings.limitFramerate);
 
-                if (!this.mc.gameSettings.hideGUI || this.mc.currentScreen != null)
-                {
-                    this.mc.ingameGUI.renderGameOverlay(par1, this.mc.currentScreen != null, var18, var20);
-                }
+        if (this.mc.theWorld != null)
+        {
+            this.mc.mcProfiler.startSection("level");
 
-                this.mc.mcProfiler.endSection();
+            if (this.mc.gameSettings.limitFramerate == 0)
+            {
+                this.renderWorld(par1, 0L);
             }
             else
             {
-                GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
-                GL11.glMatrixMode(GL11.GL_PROJECTION);
-                GL11.glLoadIdentity();
-                GL11.glMatrixMode(GL11.GL_MODELVIEW);
-                GL11.glLoadIdentity();
-                this.setupOverlayRendering();
-                this.renderEndNanoTime = System.nanoTime();
+                this.renderWorld(par1, this.renderEndNanoTime + (long)(1000000000 / var19));
             }
 
-            if (this.mc.currentScreen != null)
-            {
-                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
+            this.renderEndNanoTime = System.nanoTime();
+            this.mc.mcProfiler.endStartSection("gui");
 
-                try
-                {
-                    this.mc.currentScreen.drawScreen(var18, var20, par1);
-                }
-                catch (Throwable var13)
-                {
-                    CrashReport var11 = CrashReport.makeCrashReport(var13, "Rendering screen");
-                    CrashReportCategory var12 = var11.makeCategory("Screen render details");
-                    var12.addCrashSectionCallable("Screen name", new CallableScreenName(this));
-                    var12.addCrashSectionCallable("Mouse location", new CallableMouseLocation(this, var18, var20));
-                    var12.addCrashSectionCallable("Screen size", new CallableScreenSize(this, var15));
-                    throw new ReportedException(var11);
-                }
+            if (!this.mc.gameSettings.hideGUI || this.mc.currentScreen != null)
+            {
+                this.mc.ingameGUI.renderGameOverlay(par1, this.mc.currentScreen != null, var18, var20);
             }
-        }
-
-        this.waitForServerThread();
 
-        if (this.mc.gameSettings.showDebugInfo != this.lastShowDebugInfo)
-        {
-            this.showExtendedDebugInfo = this.mc.gameSettings.showDebugProfilerChart;
-            this.lastShowDebugInfo = this.mc.gameSettings.showDebugInfo;
+            this.mc.mcProfiler.endSection();
         }
-
-        if (this.mc.gameSettings.showDebugInfo)
+        else
         {
-            this.showLagometer(this.mc.mcProfiler.timeTickNano, this.mc.mcProfiler.timeUpdateChunksNano);
+            GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
+            GL11.glMatrixMode(GL11.GL_PROJECTION);
+            GL11.glLoadIdentity();
+            GL11.glMatrixMode(GL11.GL_MODELVIEW);
+            GL11.glLoadIdentity();
+            this.setupOverlayRendering();
+            this.renderEndNanoTime = System.nanoTime();
         }
 
-        if (this.mc.gameSettings.ofProfiler)
+        if (this.mc.currentScreen != null)
         {
-            this.mc.gameSettings.showDebugProfilerChart = true;
+            GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
+
+            try
+            {
+                this.mc.currentScreen.drawScreen(var18, var20, par1);
+                GL11.glDisable(GL11.GL_LIGHTING);
+            }
+            catch (Throwable var13)
+            {
+                CrashReport var11 = CrashReport.makeCrashReport(var13, "Rendering screen");
+                CrashReportCategory var12 = var11.makeCategory("Screen render details");
+                var12.addCrashSectionCallable("Screen name", new CallableScreenName(this));
+                var12.addCrashSectionCallable("Mouse location", new CallableMouseLocation(this, var18, var20));
+                var12.addCrashSectionCallable("Screen size", new CallableScreenSize(this, var15));
+                throw new ReportedException(var11);
+            }
         }
     }
 
-    private void waitForServerThread()
+    protected void waitForServerThread()
     {
         this.serverWaitTimeCurrent = 0;
 
@@ -1441,7 +1489,7 @@
             this.mc.mcProfiler.endStartSection("prepareterrain");
             this.setupFog(0, par1);
             GL11.glEnable(GL11.GL_FOG);
-            this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
+            this.mc.func_110434_K().func_110577_a(TextureMap.field_110575_b);
             RenderHelper.disableStandardItemLighting();
             this.mc.mcProfiler.endStartSection("terrain");
             var5.sortAndRender(var4, 0, (double)par1);
@@ -1466,7 +1514,14 @@
                     Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(-1)});
                 }
 
+                this.enableLightmap((double)par1);
+                this.mc.mcProfiler.endStartSection("litParticles");
+                var6.renderLitParticles(var4, par1);
                 RenderHelper.disableStandardItemLighting();
+                this.setupFog(0, par1);
+                this.mc.mcProfiler.endStartSection("particles");
+                var6.renderParticles(var4, par1);
+                this.disableLightmap((double)par1);
 
                 if (this.mc.objectMouseOver != null && var4.isInsideOfMaterial(Material.water) && var4 instanceof EntityPlayer && !this.mc.gameSettings.hideGUI)
                 {
@@ -1489,7 +1544,7 @@
             this.setupFog(0, par1);
             GL11.glEnable(GL11.GL_BLEND);
             GL11.glDisable(GL11.GL_CULL_FACE);
-            this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
+            this.mc.func_110434_K().func_110577_a(TextureMap.field_110575_b);
             WrUpdates.resumeBackgroundUpdates();
 
             if (Config.isWaterFancy())
@@ -1534,17 +1589,6 @@
             }
 
             WrUpdates.pauseBackgroundUpdates();
-
-            if (var16 && this.debugViewDirection == 0)
-            {
-                RenderHelper.enableStandardItemLighting();
-                this.mc.mcProfiler.endStartSection("entities");
-                Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(1)});
-                this.mc.renderGlobal.renderEntities(var4.getPosition(par1), var14, par1);
-                Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(-1)});
-                RenderHelper.disableStandardItemLighting();
-            }
-
             GL11.glDepthMask(true);
             GL11.glEnable(GL11.GL_CULL_FACE);
             GL11.glDisable(GL11.GL_BLEND);
@@ -1576,16 +1620,6 @@
                 this.renderCloudsCheck(var5, par1);
             }
 
-            this.enableLightmap((double)par1);
-            this.mc.mcProfiler.endStartSection("litParticles");
-            RenderHelper.enableStandardItemLighting();
-            var6.renderLitParticles(var4, par1);
-            RenderHelper.disableStandardItemLighting();
-            this.setupFog(0, par1);
-            this.mc.mcProfiler.endStartSection("particles");
-            var6.renderParticles(var4, par1);
-            this.disableLightmap((double)par1);
-
             if (var16)
             {
                 this.mc.mcProfiler.endStartSection("FRenderLast");
@@ -1614,7 +1648,7 @@
     /**
      * Render clouds if enabled
      */
-    private void renderCloudsCheck(RenderGlobal par1RenderGlobal, float par2)
+    protected void renderCloudsCheck(RenderGlobal par1RenderGlobal, float par2)
     {
         if (this.mc.gameSettings.shouldRenderClouds())
         {
@@ -1761,7 +1795,7 @@
             GL11.glEnable(GL11.GL_BLEND);
             GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
             GL11.glAlphaFunc(GL11.GL_GREATER, 0.01F);
-            this.mc.getTextureManager().bindTexture(locationSnowPng);
+            this.mc.func_110434_K().func_110577_a(field_110923_r);
             double var9 = var41.lastTickPosX + (var41.posX - var41.lastTickPosX) * (double)par1;
             double var11 = var41.lastTickPosY + (var41.posY - var41.lastTickPosY) * (double)par1;
             double var13 = var41.lastTickPosZ + (var41.posZ - var41.lastTickPosZ) * (double)par1;
@@ -1835,7 +1869,7 @@
                                     }
 
                                     var18 = 0;
-                                    this.mc.getTextureManager().bindTexture(locationRainPng);
+                                    this.mc.func_110434_K().func_110577_a(field_110924_q);
                                     var8.startDrawingQuads();
                                 }
 
@@ -1863,7 +1897,7 @@
                                     }
 
                                     var18 = 1;
-                                    this.mc.getTextureManager().bindTexture(new ResourceLocation("textures/environment/snow.png"));
+                                    this.mc.func_110434_K().func_110577_a(new ResourceLocation("textures/environment/snow.png"));
                                     var8.startDrawingQuads();
                                 }
 
@@ -1918,7 +1952,7 @@
     /**
      * calculates fog and calls glClearColor
      */
-    private void updateFogColor(float par1)
+    protected void updateFogColor(float par1)
     {
         WorldClient var2 = this.mc.theWorld;
         EntityLivingBase var3 = this.mc.renderViewEntity;
@@ -1932,7 +1966,6 @@
             case 0:
                 var5 = CustomColorizer.getSkyColor(var5, this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
                 break;
-
             case 1:
                 var5 = CustomColorizer.getSkyColorEnd(var5);
         }
@@ -1947,11 +1980,9 @@
             case -1:
                 var10 = CustomColorizer.getFogColorNether(var10);
                 break;
-
             case 0:
                 var10 = CustomColorizer.getFogColor(var10, this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
                 break;
-
             case 1:
                 var10 = CustomColorizer.getFogColorEnd(var10);
         }
@@ -2132,7 +2163,7 @@
      * Sets up the fog to be rendered. If the arg passed in is -1 the fog starts at 0 and goes to 80% of far plane
      * distance and is used for sky rendering.
      */
-    private void setupFog(int par1, float par2)
+    protected void setupFog(int par1, float par2)
     {
         EntityLivingBase var3 = this.mc.renderViewEntity;
         boolean var4 = false;
@@ -2310,25 +2341,14 @@
     {
         Minecraft var1 = Config.getMinecraft();
 
-        if (var1.currentScreen != null && var1.currentScreen instanceof GuiMainMenu)
-        {
-            return 35;
-        }
-        else if (var1.theWorld == null)
+        int var2 = Config.getGameSettings().ofLimitFramerateFine;
+
+        if (var2 <= 0)
         {
-            return 35;
+            var2 = 10000;
         }
-        else
-        {
-            int var2 = Config.getGameSettings().ofLimitFramerateFine;
 
-            if (var2 <= 0)
-            {
-                var2 = 10000;
-            }
-
-            return var2;
-        }
+        return var2;
     }
 
     /**
