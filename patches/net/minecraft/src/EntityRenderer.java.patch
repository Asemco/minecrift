--- a/net/minecraft/src/EntityRenderer.java
+++ b/net/minecraft/src/EntityRenderer.java
@@ -25,12 +25,12 @@
     public static int anaglyphField;
 
     /** A reference to the Minecraft object. */
-    private Minecraft mc;
-    private float farPlaneDistance = 0.0F;
+    protected Minecraft mc;
+    protected float farPlaneDistance = 0.0F;
     public ItemRenderer itemRenderer;
 
     /** Entity renderer update count */
-    private int rendererUpdateCount;
+    protected int rendererUpdateCount;
 
     /** Pointed entity */
     private Entity pointedEntity = null;
@@ -48,33 +48,33 @@
 
     /** Mouse filter dummy 4 */
     private MouseFilter mouseFilterDummy4 = new MouseFilter();
-    private float thirdPersonDistance = 4.0F;
+    protected float thirdPersonDistance = 4.0F;
 
     /** Third person distance temp */
-    private float thirdPersonDistanceTemp = 4.0F;
-    private float debugCamYaw = 0.0F;
-    private float prevDebugCamYaw = 0.0F;
-    private float debugCamPitch = 0.0F;
-    private float prevDebugCamPitch = 0.0F;
+    protected float thirdPersonDistanceTemp = 4.0F;
+    protected float debugCamYaw = 0.0F;
+    protected float prevDebugCamYaw = 0.0F;
+    protected float debugCamPitch = 0.0F;
+    protected float prevDebugCamPitch = 0.0F;
 
     /** Smooth cam yaw */
-    private float smoothCamYaw;
+    protected float smoothCamYaw;
 
     /** Smooth cam pitch */
     private float smoothCamPitch;
 
     /** Smooth cam filter X */
-    private float smoothCamFilterX;
+    protected float smoothCamFilterX;
 
     /** Smooth cam filter Y */
-    private float smoothCamFilterY;
+    protected float smoothCamFilterY;
 
     /** Smooth cam partial ticks */
-    private float smoothCamPartialTicks;
+    protected float smoothCamPartialTicks;
     private float debugCamFOV = 0.0F;
     private float prevDebugCamFOV = 0.0F;
-    private float camRoll = 0.0F;
-    private float prevCamRoll = 0.0F;
+    protected float camRoll = 0.0F;
+    protected float prevCamRoll = 0.0F;
 
     /**
      * The texture id of the blocklight/skylight texture used for lighting effects
@@ -98,10 +98,10 @@
     private float field_82832_V;
 
     /** Cloud fog mode */
-    private boolean cloudFog = false;
-    private double cameraZoom = 1.0D;
-    private double cameraYaw = 0.0D;
-    private double cameraPitch = 0.0D;
+    protected boolean cloudFog = false;
+    protected double cameraZoom = 1.0D;
+    protected double cameraYaw = 0.0D;
+    protected double cameraPitch = 0.0D;
 
     /** Previous frame time in milliseconds */
     private long prevFrameTime = Minecraft.getSystemTime();
@@ -112,7 +112,7 @@
     /**
      * Is set, updateCameraAndRender() calls updateLightmap(); set by updateTorchFlicker()
      */
-    private boolean lightmapUpdateNeeded = false;
+    protected boolean lightmapUpdateNeeded = false;
 
     /** Torch flicker X */
     float torchFlickerX = 0.0F;
@@ -142,13 +142,13 @@
     FloatBuffer fogColorBuffer = GLAllocation.createDirectFloatBuffer(16);
 
     /** red component of the fog color */
-    float fogColorRed;
+    protected float fogColorRed;
 
     /** green component of the fog color */
-    float fogColorGreen;
+    protected float fogColorGreen;
 
     /** blue component of the fog color */
-    float fogColorBlue;
+    protected float fogColorBlue;
 
     /** Fog color 2 */
     private float fogColor2;
@@ -160,13 +160,13 @@
      * Debug view direction (0=OFF, 1=Front, 2=Right, 3=Back, 4=Left, 5=TiltLeft, 6=TiltRight)
      */
     public int debugViewDirection;
-    private World updatedWorld = null;
+    protected World updatedWorld = null;
     private boolean showDebugInfo = false;
     private boolean fullscreenModeChecked = false;
     private boolean desktopModeChecked = false;
     private String lastTexturePack = null;
-    private long lastServerTime = 0L;
-    private int lastServerTicks = 0;
+    protected long lastServerTime = 0L;
+    protected int lastServerTicks = 0;
     private int serverWaitTime = 0;
     private int serverWaitTimeCurrent = 0;
     private float avgServerTimeDiff = 0.0F;
@@ -430,7 +430,7 @@
         }
     }
 
-    private void hurtCameraEffect(float par1)
+    protected void hurtCameraEffect(float par1)
     {
         EntityLiving var2 = this.mc.renderViewEntity;
         float var3 = (float)var2.hurtTime - par1;
@@ -456,7 +456,7 @@
     /**
      * Setups all the GL settings for view bobbing. Args: partialTickTime
      */
-    private void setupViewBobbing(float par1)
+    protected void setupViewBobbing(float par1)
     {
         if (this.mc.renderViewEntity instanceof EntityPlayer)
         {
@@ -817,7 +817,7 @@
         this.lightmapUpdateNeeded = true;
     }
 
-    private void updateLightmap(float par1)
+    protected void updateLightmap(float par1)
     {
         WorldClient var2 = this.mc.theWorld;
 
@@ -967,7 +967,45 @@
         int var3 = par1EntityPlayer.getActivePotionEffect(Potion.nightVision).getDuration();
         return var3 > 200 ? 1.0F : 0.7F + MathHelper.sin(((float)var3 - par2) * (float)Math.PI * 0.2F) * 0.3F;
     }
+    
+    protected void updateCamera( float par1, boolean var14 )
+    {
+        this.mc.mcProfiler.startSection("mouse");
+
+        if (this.mc.inGameHasFocus && var14)
+        {
+            this.mc.mouseHelper.mouseXYChange();
+            float var4 = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
+            float var5 = var4 * var4 * var4 * 8.0F;
+            float var6 = (float)this.mc.mouseHelper.deltaX * var5;
+            float var7 = (float)this.mc.mouseHelper.deltaY * var5;
+            byte var8 = 1;
+
+            if (this.mc.gameSettings.invertMouse)
+            {
+                var8 = -1;
+            }
+
+            if (this.mc.gameSettings.smoothCamera)
+            {
+                this.smoothCamYaw += var6;
+                this.smoothCamPitch += var7;
+                float var9 = par1 - this.smoothCamPartialTicks;
+                this.smoothCamPartialTicks = par1;
+                var6 = this.smoothCamFilterX * var9;
+                var7 = this.smoothCamFilterY * var9;
+                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
+            }
+            else
+            {
+                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
+            }
+        }
+
+        this.mc.mcProfiler.endSection();
 
+    }
+    
     /**
      * Will update any inputs that effect the camera angle (mouse) and then render the world and GUI
      */
@@ -1024,7 +1062,7 @@
         {
             if (Minecraft.getSystemTime() - this.prevFrameTime > 500L)
             {
-                this.mc.displayInGameMenu();
+            	this.mc.displayInGameMenu();
             }
         }
         else
@@ -1032,39 +1070,7 @@
             this.prevFrameTime = Minecraft.getSystemTime();
         }
 
-        this.mc.mcProfiler.startSection("mouse");
-
-        if (this.mc.inGameHasFocus && var14)
-        {
-            this.mc.mouseHelper.mouseXYChange();
-            float var4 = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
-            float var5 = var4 * var4 * var4 * 8.0F;
-            float var6 = (float)this.mc.mouseHelper.deltaX * var5;
-            float var7 = (float)this.mc.mouseHelper.deltaY * var5;
-            byte var8 = 1;
-
-            if (this.mc.gameSettings.invertMouse)
-            {
-                var8 = -1;
-            }
-
-            if (this.mc.gameSettings.smoothCamera)
-            {
-                this.smoothCamYaw += var6;
-                this.smoothCamPitch += var7;
-                float var9 = par1 - this.smoothCamPartialTicks;
-                this.smoothCamPartialTicks = par1;
-                var6 = this.smoothCamFilterX * var9;
-                var7 = this.smoothCamFilterY * var9;
-                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
-            }
-            else
-            {
-                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
-            }
-        }
-
-        this.mc.mcProfiler.endSection();
+        updateCamera( par1, var14 );
 
         if (!this.mc.skipRenderWorld)
         {
@@ -1154,7 +1160,7 @@
         }
     }
 
-    private void waitForServerThread()
+    protected void waitForServerThread()
     {
         this.serverWaitTimeCurrent = 0;
 
@@ -1298,7 +1304,7 @@
         }
     }
 
-    private void updateMainMenu(GuiMainMenu var1)
+    protected void updateMainMenu(GuiMainMenu var1)
     {
         try
         {
@@ -1341,7 +1347,7 @@
         }
     }
 
-    private void checkDisplayMode()
+    protected void checkDisplayMode()
     {
         try
         {
@@ -1711,7 +1717,7 @@
     /**
      * Render clouds if enabled
      */
-    private void renderCloudsCheck(RenderGlobal par1RenderGlobal, float par2)
+    protected void renderCloudsCheck(RenderGlobal par1RenderGlobal, float par2)
     {
         if (this.mc.gameSettings.shouldRenderClouds())
         {
@@ -2015,7 +2021,7 @@
     /**
      * calculates fog and calls glClearColor
      */
-    private void updateFogColor(float par1)
+    protected void updateFogColor(float par1)
     {
         WorldClient var2 = this.mc.theWorld;
         EntityLiving var3 = this.mc.renderViewEntity;
@@ -2224,7 +2230,7 @@
      * Sets up the fog to be rendered. If the arg passed in is -1 the fog starts at 0 and goes to 80% of far plane
      * distance and is used for sky rendering.
      */
-    private void setupFog(int par1, float par2)
+    protected void setupFog(int par1, float par2)
     {
         EntityLiving var3 = this.mc.renderViewEntity;
         boolean var4 = false;
