--- a/net/minecraft/src/EntityRenderer.java
+++ b/net/minecraft/src/EntityRenderer.java
@@ -1,12 +1,8 @@
 package net.minecraft.src;
 
-import java.lang.reflect.Field;
 import java.nio.FloatBuffer;
-import java.util.Calendar;
-import java.util.Date;
 import java.util.List;
 import java.util.Random;
-import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.GL11;
@@ -157,24 +153,6 @@
      * Debug view direction (0=OFF, 1=Front, 2=Right, 3=Back, 4=Left, 5=TiltLeft, 6=TiltRight)
      */
     public int debugViewDirection;
-    private boolean initialized = false;
-    private World updatedWorld = null;
-    private boolean showDebugInfo = false;
-    public boolean fogStandard = false;
-    private long lastServerTime = 0L;
-    private int lastServerTicks = 0;
-    private int serverWaitTime = 0;
-    private int serverWaitTimeCurrent = 0;
-    private float avgServerTimeDiff = 0.0F;
-    private float avgServerTickDiff = 0.0F;
-    public long[] frameTimes = new long[512];
-    public long[] tickTimes = new long[512];
-    public long[] chunkTimes = new long[512];
-    public long[] serverTimes = new long[512];
-    public int numRecordedFrameTimes = 0;
-    public long prevFrameTimeNano = -1L;
-    private boolean lastShowDebugInfo = false;
-    private boolean showExtendedDebugInfo = false;
 
     public EntityRenderer(Minecraft par1Minecraft)
     {
@@ -248,89 +226,92 @@
      */
     public void getMouseOver(float par1)
     {
-        if (this.mc.renderViewEntity != null && this.mc.theWorld != null)
+        if (this.mc.renderViewEntity != null)
         {
-            this.mc.pointedEntityLiving = null;
-            double var2 = (double)this.mc.playerController.getBlockReachDistance();
-            this.mc.objectMouseOver = this.mc.renderViewEntity.rayTrace(var2, par1);
-            double var4 = var2;
-            Vec3 var6 = this.mc.renderViewEntity.getPosition(par1);
-
-            if (this.mc.playerController.extendedReach())
-            {
-                var2 = 6.0D;
-                var4 = 6.0D;
-            }
-            else
+            if (this.mc.theWorld != null)
             {
-                if (var2 > 3.0D)
+                this.mc.pointedEntityLiving = null;
+                double var2 = (double)this.mc.playerController.getBlockReachDistance();
+                this.mc.objectMouseOver = this.mc.renderViewEntity.rayTrace(var2, par1);
+                double var4 = var2;
+                Vec3 var6 = this.mc.renderViewEntity.getPosition(par1);
+
+                if (this.mc.playerController.extendedReach())
                 {
-                    var4 = 3.0D;
+                    var2 = 6.0D;
+                    var4 = 6.0D;
                 }
+                else
+                {
+                    if (var2 > 3.0D)
+                    {
+                        var4 = 3.0D;
+                    }
 
-                var2 = var4;
-            }
-
-            if (this.mc.objectMouseOver != null)
-            {
-                var4 = this.mc.objectMouseOver.hitVec.distanceTo(var6);
-            }
+                    var2 = var4;
+                }
 
-            Vec3 var7 = this.mc.renderViewEntity.getLook(par1);
-            Vec3 var8 = var6.addVector(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2);
-            this.pointedEntity = null;
-            float var9 = 1.0F;
-            List var10 = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.renderViewEntity, this.mc.renderViewEntity.boundingBox.addCoord(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2).expand((double)var9, (double)var9, (double)var9));
-            double var11 = var4;
+                if (this.mc.objectMouseOver != null)
+                {
+                    var4 = this.mc.objectMouseOver.hitVec.distanceTo(var6);
+                }
 
-            for (int var13 = 0; var13 < var10.size(); ++var13)
-            {
-                Entity var14 = (Entity)var10.get(var13);
+                Vec3 var7 = this.mc.renderViewEntity.getLook(par1);
+                Vec3 var8 = var6.addVector(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2);
+                this.pointedEntity = null;
+                float var9 = 1.0F;
+                List var10 = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.renderViewEntity, this.mc.renderViewEntity.boundingBox.addCoord(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2).expand((double)var9, (double)var9, (double)var9));
+                double var11 = var4;
 
-                if (var14.canBeCollidedWith())
+                for (int var13 = 0; var13 < var10.size(); ++var13)
                 {
-                    float var15 = var14.getCollisionBorderSize();
-                    AxisAlignedBB var16 = var14.boundingBox.expand((double)var15, (double)var15, (double)var15);
-                    MovingObjectPosition var17 = var16.calculateIntercept(var6, var8);
+                    Entity var14 = (Entity)var10.get(var13);
 
-                    if (var16.isVecInside(var6))
+                    if (var14.canBeCollidedWith())
                     {
-                        if (0.0D < var11 || var11 == 0.0D)
+                        float var15 = var14.getCollisionBorderSize();
+                        AxisAlignedBB var16 = var14.boundingBox.expand((double)var15, (double)var15, (double)var15);
+                        MovingObjectPosition var17 = var16.calculateIntercept(var6, var8);
+
+                        if (var16.isVecInside(var6))
                         {
-                            this.pointedEntity = var14;
-                            var11 = 0.0D;
+                            if (0.0D < var11 || var11 == 0.0D)
+                            {
+                                this.pointedEntity = var14;
+                                var11 = 0.0D;
+                            }
                         }
-                    }
-                    else if (var17 != null)
-                    {
-                        double var18 = var6.distanceTo(var17.hitVec);
-
-                        if (var18 < var11 || var11 == 0.0D)
+                        else if (var17 != null)
                         {
-                            if (var14 == this.mc.renderViewEntity.ridingEntity)
+                            double var18 = var6.distanceTo(var17.hitVec);
+
+                            if (var18 < var11 || var11 == 0.0D)
                             {
-                                if (var11 == 0.0D)
+                                if (var14 == this.mc.renderViewEntity.ridingEntity)
+                                {
+                                    if (var11 == 0.0D)
+                                    {
+                                        this.pointedEntity = var14;
+                                    }
+                                }
+                                else
                                 {
                                     this.pointedEntity = var14;
+                                    var11 = var18;
                                 }
                             }
-                            else
-                            {
-                                this.pointedEntity = var14;
-                                var11 = var18;
-                            }
                         }
                     }
                 }
-            }
-
-            if (this.pointedEntity != null && (var11 < var4 || this.mc.objectMouseOver == null))
-            {
-                this.mc.objectMouseOver = new MovingObjectPosition(this.pointedEntity);
 
-                if (this.pointedEntity instanceof EntityLivingBase)
+                if (this.pointedEntity != null && (var11 < var4 || this.mc.objectMouseOver == null))
                 {
-                    this.mc.pointedEntityLiving = (EntityLivingBase)this.pointedEntity;
+                    this.mc.objectMouseOver = new MovingObjectPosition(this.pointedEntity);
+
+                    if (this.pointedEntity instanceof EntityLivingBase)
+                    {
+                        this.mc.pointedEntityLiving = (EntityLivingBase)this.pointedEntity;
+                    }
                 }
             }
         }
@@ -341,16 +322,8 @@
      */
     private void updateFovModifierHand()
     {
-        if (this.mc.renderViewEntity instanceof EntityPlayerSP)
-        {
-            EntityPlayerSP var1 = (EntityPlayerSP)this.mc.renderViewEntity;
-            this.fovMultiplierTemp = var1.getFOVMultiplier();
-        }
-        else
-        {
-            this.fovMultiplierTemp = this.mc.thePlayer.getFOVMultiplier();
-        }
-
+        EntityPlayerSP var1 = (EntityPlayerSP)this.mc.renderViewEntity;
+        this.fovMultiplierTemp = var1.getFOVMultiplier();
         this.fovModifierHandPrev = this.fovModifierHand;
         this.fovModifierHand += (this.fovMultiplierTemp - this.fovModifierHand) * 0.5F;
 
@@ -376,7 +349,7 @@
         }
         else
         {
-            EntityLivingBase var3 = this.mc.renderViewEntity;
+            EntityPlayer var3 = (EntityPlayer)this.mc.renderViewEntity;
             float var4 = 70.0F;
 
             if (par2)
@@ -385,50 +358,15 @@
                 var4 *= this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev) * par1;
             }
 
-            boolean var5 = false;
-
-            if (this.mc.currentScreen == null)
-            {
-                if (this.mc.gameSettings.ofKeyBindZoom.keyCode < 0)
-                {
-                    var5 = Mouse.isButtonDown(this.mc.gameSettings.ofKeyBindZoom.keyCode + 100);
-                }
-                else
-                {
-                    var5 = Keyboard.isKeyDown(this.mc.gameSettings.ofKeyBindZoom.keyCode);
-                }
-            }
-
-            if (var5)
-            {
-                if (!Config.zoomMode)
-                {
-                    Config.zoomMode = true;
-                    this.mc.gameSettings.smoothCamera = true;
-                }
-
-                if (Config.zoomMode)
-                {
-                    var4 /= 4.0F;
-                }
-            }
-            else if (Config.zoomMode)
-            {
-                Config.zoomMode = false;
-                this.mc.gameSettings.smoothCamera = false;
-                this.mouseFilterXAxis = new MouseFilter();
-                this.mouseFilterYAxis = new MouseFilter();
-            }
-
             if (var3.getHealth() <= 0.0F)
             {
-                float var6 = (float)var3.deathTime + par1;
-                var4 /= (1.0F - 500.0F / (var6 + 500.0F)) * 2.0F + 1.0F;
+                float var5 = (float)var3.deathTime + par1;
+                var4 /= (1.0F - 500.0F / (var5 + 500.0F)) * 2.0F + 1.0F;
             }
 
-            int var7 = ActiveRenderInfo.getBlockIdAtEntityViewpoint(this.mc.theWorld, var3, par1);
+            int var6 = ActiveRenderInfo.getBlockIdAtEntityViewpoint(this.mc.theWorld, var3, par1);
 
-            if (var7 != 0 && Block.blocksList[var7].blockMaterial == Material.water)
+            if (var6 != 0 && Block.blocksList[var6].blockMaterial == Material.water)
             {
                 var4 = var4 * 60.0F / 70.0F;
             }
@@ -500,11 +438,7 @@
             {
                 int var10 = this.mc.theWorld.getBlockId(MathHelper.floor_double(var2.posX), MathHelper.floor_double(var2.posY), MathHelper.floor_double(var2.posZ));
 
-                if (Reflector.ForgeHooksClient_orientBedCamera.exists())
-                {
-                    Reflector.callVoid(Reflector.ForgeHooksClient_orientBedCamera, new Object[] {this.mc, var2});
-                }
-                else if (var10 == Block.bed.blockID)
+                if (var10 == Block.bed.blockID)
                 {
                     int var11 = this.mc.theWorld.getBlockMetadata(MathHelper.floor_double(var2.posX), MathHelper.floor_double(var2.posY), MathHelper.floor_double(var2.posZ));
                     int var12 = var11 & 3;
@@ -523,25 +457,25 @@
 
             if (this.mc.gameSettings.debugCamEnable)
             {
-                var13 = this.prevDebugCamYaw + (this.debugCamYaw - this.prevDebugCamYaw) * par1;
-                var28 = this.prevDebugCamPitch + (this.debugCamPitch - this.prevDebugCamPitch) * par1;
+                var28 = this.prevDebugCamYaw + (this.debugCamYaw - this.prevDebugCamYaw) * par1;
+                var13 = this.prevDebugCamPitch + (this.debugCamPitch - this.prevDebugCamPitch) * par1;
                 GL11.glTranslatef(0.0F, 0.0F, (float)(-var27));
-                GL11.glRotatef(var28, 1.0F, 0.0F, 0.0F);
-                GL11.glRotatef(var13, 0.0F, 1.0F, 0.0F);
+                GL11.glRotatef(var13, 1.0F, 0.0F, 0.0F);
+                GL11.glRotatef(var28, 0.0F, 1.0F, 0.0F);
             }
             else
             {
-                var13 = var2.rotationYaw;
-                var28 = var2.rotationPitch;
+                var28 = var2.rotationYaw;
+                var13 = var2.rotationPitch;
 
                 if (this.mc.gameSettings.thirdPersonView == 2)
                 {
-                    var28 += 180.0F;
+                    var13 += 180.0F;
                 }
 
-                double var14 = (double)(-MathHelper.sin(var13 / 180.0F * (float)Math.PI) * MathHelper.cos(var28 / 180.0F * (float)Math.PI)) * var27;
-                double var16 = (double)(MathHelper.cos(var13 / 180.0F * (float)Math.PI) * MathHelper.cos(var28 / 180.0F * (float)Math.PI)) * var27;
-                double var18 = (double)(-MathHelper.sin(var28 / 180.0F * (float)Math.PI)) * var27;
+                double var14 = (double)(-MathHelper.sin(var28 / 180.0F * (float)Math.PI) * MathHelper.cos(var13 / 180.0F * (float)Math.PI)) * var27;
+                double var16 = (double)(MathHelper.cos(var28 / 180.0F * (float)Math.PI) * MathHelper.cos(var13 / 180.0F * (float)Math.PI)) * var27;
+                double var18 = (double)(-MathHelper.sin(var13 / 180.0F * (float)Math.PI)) * var27;
 
                 for (int var20 = 0; var20 < 8; ++var20)
                 {
@@ -569,11 +503,11 @@
                     GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
                 }
 
-                GL11.glRotatef(var2.rotationPitch - var28, 1.0F, 0.0F, 0.0F);
-                GL11.glRotatef(var2.rotationYaw - var13, 0.0F, 1.0F, 0.0F);
+                GL11.glRotatef(var2.rotationPitch - var13, 1.0F, 0.0F, 0.0F);
+                GL11.glRotatef(var2.rotationYaw - var28, 0.0F, 1.0F, 0.0F);
                 GL11.glTranslatef(0.0F, 0.0F, (float)(-var27));
-                GL11.glRotatef(var13 - var2.rotationYaw, 0.0F, 1.0F, 0.0F);
-                GL11.glRotatef(var28 - var2.rotationPitch, 1.0F, 0.0F, 0.0F);
+                GL11.glRotatef(var28 - var2.rotationYaw, 0.0F, 1.0F, 0.0F);
+                GL11.glRotatef(var13 - var2.rotationPitch, 1.0F, 0.0F, 0.0F);
             }
         }
         else
@@ -599,19 +533,7 @@
      */
     private void setupCameraTransform(float par1, int par2)
     {
-        this.farPlaneDistance = (float)(32 << 3 - this.mc.gameSettings.renderDistance);
-        this.farPlaneDistance = (float)this.mc.gameSettings.ofRenderDistanceFine;
-
-        if (Config.isFogFancy())
-        {
-            this.farPlaneDistance *= 0.95F;
-        }
-
-        if (Config.isFogFast())
-        {
-            this.farPlaneDistance *= 0.83F;
-        }
-
+        this.farPlaneDistance = (float)(256 >> this.mc.gameSettings.renderDistance);
         GL11.glMatrixMode(GL11.GL_PROJECTION);
         GL11.glLoadIdentity();
         float var3 = 0.07F;
@@ -621,26 +543,19 @@
             GL11.glTranslatef((float)(-(par2 * 2 - 1)) * var3, 0.0F, 0.0F);
         }
 
-        float var4 = this.farPlaneDistance * 2.0F;
-
-        if (var4 < 128.0F)
-        {
-            var4 = 128.0F;
-        }
-
         if (this.cameraZoom != 1.0D)
         {
             GL11.glTranslatef((float)this.cameraYaw, (float)(-this.cameraPitch), 0.0F);
             GL11.glScaled(this.cameraZoom, this.cameraZoom, 1.0D);
         }
 
-        Project.gluPerspective(this.getFOVModifier(par1, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, var4);
-        float var5;
+        Project.gluPerspective(this.getFOVModifier(par1, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
+        float var4;
 
         if (this.mc.playerController.enableEverythingIsScrewedUpMode())
         {
-            var5 = 0.6666667F;
-            GL11.glScalef(1.0F, var5, 1.0F);
+            var4 = 0.6666667F;
+            GL11.glScalef(1.0F, var4, 1.0F);
         }
 
         GL11.glMatrixMode(GL11.GL_MODELVIEW);
@@ -658,51 +573,51 @@
             this.setupViewBobbing(par1);
         }
 
-        var5 = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * par1;
+        var4 = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * par1;
 
-        if (var5 > 0.0F)
+        if (var4 > 0.0F)
         {
-            byte var6 = 20;
+            byte var5 = 20;
 
             if (this.mc.thePlayer.isPotionActive(Potion.confusion))
             {
-                var6 = 7;
+                var5 = 7;
             }
 
-            float var7 = 5.0F / (var5 * var5 + 5.0F) - var5 * 0.04F;
-            var7 *= var7;
-            GL11.glRotatef(((float)this.rendererUpdateCount + par1) * (float)var6, 0.0F, 1.0F, 1.0F);
-            GL11.glScalef(1.0F / var7, 1.0F, 1.0F);
-            GL11.glRotatef(-((float)this.rendererUpdateCount + par1) * (float)var6, 0.0F, 1.0F, 1.0F);
+            float var6 = 5.0F / (var4 * var4 + 5.0F) - var4 * 0.04F;
+            var6 *= var6;
+            GL11.glRotatef(((float)this.rendererUpdateCount + par1) * (float)var5, 0.0F, 1.0F, 1.0F);
+            GL11.glScalef(1.0F / var6, 1.0F, 1.0F);
+            GL11.glRotatef(-((float)this.rendererUpdateCount + par1) * (float)var5, 0.0F, 1.0F, 1.0F);
         }
 
         this.orientCamera(par1);
 
         if (this.debugViewDirection > 0)
         {
-            int var8 = this.debugViewDirection - 1;
+            int var7 = this.debugViewDirection - 1;
 
-            if (var8 == 1)
+            if (var7 == 1)
             {
                 GL11.glRotatef(90.0F, 0.0F, 1.0F, 0.0F);
             }
 
-            if (var8 == 2)
+            if (var7 == 2)
             {
                 GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
             }
 
-            if (var8 == 3)
+            if (var7 == 3)
             {
                 GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
             }
 
-            if (var8 == 4)
+            if (var7 == 4)
             {
                 GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
             }
 
-            if (var8 == 5)
+            if (var7 == 5)
             {
                 GL11.glRotatef(-90.0F, 1.0F, 0.0F, 0.0F);
             }
@@ -802,6 +717,8 @@
         this.mc.getTextureManager().bindTexture(this.locationLightMap);
         GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
         GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
+        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
         GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL11.GL_CLAMP);
         GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_CLAMP);
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
@@ -829,13 +746,6 @@
 
         if (var2 != null)
         {
-            if (CustomColorizer.updateLightmap(var2, this.torchFlickerX, this.lightmapColors, this.mc.thePlayer.isPotionActive(Potion.nightVision)))
-            {
-                this.lightmapTexture.updateDynamicTexture();
-                this.lightmapUpdateNeeded = false;
-                return;
-            }
-
             for (int var3 = 0; var3 < 256; ++var3)
             {
                 float var4 = var2.getSunBrightness(1.0F) * 0.95F + 0.05F;
@@ -849,117 +759,117 @@
 
                 float var7 = var5 * (var2.getSunBrightness(1.0F) * 0.65F + 0.35F);
                 float var8 = var5 * (var2.getSunBrightness(1.0F) * 0.65F + 0.35F);
-                float var9 = var6 * ((var6 * 0.6F + 0.4F) * 0.6F + 0.4F);
-                float var10 = var6 * (var6 * var6 * 0.6F + 0.4F);
-                float var11 = var7 + var6;
-                float var12 = var8 + var9;
-                float var13 = var5 + var10;
-                var11 = var11 * 0.96F + 0.03F;
-                var12 = var12 * 0.96F + 0.03F;
+                float var11 = var6 * ((var6 * 0.6F + 0.4F) * 0.6F + 0.4F);
+                float var12 = var6 * (var6 * var6 * 0.6F + 0.4F);
+                float var13 = var7 + var6;
+                float var14 = var8 + var11;
+                float var15 = var5 + var12;
                 var13 = var13 * 0.96F + 0.03F;
-                float var14;
+                var14 = var14 * 0.96F + 0.03F;
+                var15 = var15 * 0.96F + 0.03F;
+                float var16;
 
                 if (this.field_82831_U > 0.0F)
                 {
-                    var14 = this.field_82832_V + (this.field_82831_U - this.field_82832_V) * par1;
-                    var11 = var11 * (1.0F - var14) + var11 * 0.7F * var14;
-                    var12 = var12 * (1.0F - var14) + var12 * 0.6F * var14;
-                    var13 = var13 * (1.0F - var14) + var13 * 0.6F * var14;
+                    var16 = this.field_82832_V + (this.field_82831_U - this.field_82832_V) * par1;
+                    var13 = var13 * (1.0F - var16) + var13 * 0.7F * var16;
+                    var14 = var14 * (1.0F - var16) + var14 * 0.6F * var16;
+                    var15 = var15 * (1.0F - var16) + var15 * 0.6F * var16;
                 }
 
                 if (var2.provider.dimensionId == 1)
                 {
-                    var11 = 0.22F + var6 * 0.75F;
-                    var12 = 0.28F + var9 * 0.75F;
-                    var13 = 0.25F + var10 * 0.75F;
+                    var13 = 0.22F + var6 * 0.75F;
+                    var14 = 0.28F + var11 * 0.75F;
+                    var15 = 0.25F + var12 * 0.75F;
                 }
 
-                float var15;
+                float var17;
 
                 if (this.mc.thePlayer.isPotionActive(Potion.nightVision))
                 {
-                    var14 = this.getNightVisionBrightness(this.mc.thePlayer, par1);
-                    var15 = 1.0F / var11;
+                    var16 = this.getNightVisionBrightness(this.mc.thePlayer, par1);
+                    var17 = 1.0F / var13;
 
-                    if (var15 > 1.0F / var12)
+                    if (var17 > 1.0F / var14)
                     {
-                        var15 = 1.0F / var12;
+                        var17 = 1.0F / var14;
                     }
 
-                    if (var15 > 1.0F / var13)
+                    if (var17 > 1.0F / var15)
                     {
-                        var15 = 1.0F / var13;
+                        var17 = 1.0F / var15;
                     }
 
-                    var11 = var11 * (1.0F - var14) + var11 * var15 * var14;
-                    var12 = var12 * (1.0F - var14) + var12 * var15 * var14;
-                    var13 = var13 * (1.0F - var14) + var13 * var15 * var14;
+                    var13 = var13 * (1.0F - var16) + var13 * var17 * var16;
+                    var14 = var14 * (1.0F - var16) + var14 * var17 * var16;
+                    var15 = var15 * (1.0F - var16) + var15 * var17 * var16;
                 }
 
-                if (var11 > 1.0F)
+                if (var13 > 1.0F)
                 {
-                    var11 = 1.0F;
+                    var13 = 1.0F;
                 }
 
-                if (var12 > 1.0F)
+                if (var14 > 1.0F)
                 {
-                    var12 = 1.0F;
+                    var14 = 1.0F;
                 }
 
-                if (var13 > 1.0F)
+                if (var15 > 1.0F)
                 {
-                    var13 = 1.0F;
+                    var15 = 1.0F;
                 }
 
-                var14 = this.mc.gameSettings.gammaSetting;
-                var15 = 1.0F - var11;
-                float var16 = 1.0F - var12;
-                float var17 = 1.0F - var13;
-                var15 = 1.0F - var15 * var15 * var15 * var15;
-                var16 = 1.0F - var16 * var16 * var16 * var16;
+                var16 = this.mc.gameSettings.gammaSetting;
+                var17 = 1.0F - var13;
+                float var18 = 1.0F - var14;
+                float var19 = 1.0F - var15;
                 var17 = 1.0F - var17 * var17 * var17 * var17;
-                var11 = var11 * (1.0F - var14) + var15 * var14;
-                var12 = var12 * (1.0F - var14) + var16 * var14;
-                var13 = var13 * (1.0F - var14) + var17 * var14;
-                var11 = var11 * 0.96F + 0.03F;
-                var12 = var12 * 0.96F + 0.03F;
+                var18 = 1.0F - var18 * var18 * var18 * var18;
+                var19 = 1.0F - var19 * var19 * var19 * var19;
+                var13 = var13 * (1.0F - var16) + var17 * var16;
+                var14 = var14 * (1.0F - var16) + var18 * var16;
+                var15 = var15 * (1.0F - var16) + var19 * var16;
                 var13 = var13 * 0.96F + 0.03F;
+                var14 = var14 * 0.96F + 0.03F;
+                var15 = var15 * 0.96F + 0.03F;
 
-                if (var11 > 1.0F)
+                if (var13 > 1.0F)
                 {
-                    var11 = 1.0F;
+                    var13 = 1.0F;
                 }
 
-                if (var12 > 1.0F)
+                if (var14 > 1.0F)
                 {
-                    var12 = 1.0F;
+                    var14 = 1.0F;
                 }
 
-                if (var13 > 1.0F)
+                if (var15 > 1.0F)
                 {
-                    var13 = 1.0F;
+                    var15 = 1.0F;
                 }
 
-                if (var11 < 0.0F)
+                if (var13 < 0.0F)
                 {
-                    var11 = 0.0F;
+                    var13 = 0.0F;
                 }
 
-                if (var12 < 0.0F)
+                if (var14 < 0.0F)
                 {
-                    var12 = 0.0F;
+                    var14 = 0.0F;
                 }
 
-                if (var13 < 0.0F)
+                if (var15 < 0.0F)
                 {
-                    var13 = 0.0F;
+                    var15 = 0.0F;
                 }
 
-                short var18 = 255;
-                int var19 = (int)(var11 * 255.0F);
-                int var20 = (int)(var12 * 255.0F);
+                short var20 = 255;
                 int var21 = (int)(var13 * 255.0F);
-                this.lightmapColors[var3] = var18 << 24 | var19 << 16 | var20 << 8 | var21;
+                int var22 = (int)(var14 * 255.0F);
+                int var23 = (int)(var15 * 255.0F);
+                this.lightmapColors[var3] = var20 << 24 | var21 << 16 | var22 << 8 | var23;
             }
 
             this.lightmapTexture.updateDynamicTexture();
@@ -983,48 +893,15 @@
     {
         this.mc.mcProfiler.startSection("lightTex");
 
-        if (!this.initialized)
-        {
-            TextureUtils.registerResourceListener();
-            this.initialized = true;
-        }
-
-        Config.checkDisplayMode();
-        WorldClient var2 = this.mc.theWorld;
-
-        if (var2 != null && Config.getNewRelease() != null)
-        {
-            String var3 = "HD_U " + Config.getNewRelease();
-            this.mc.ingameGUI.getChatGUI().printChatMessage("A new \u00a7eOptiFine\u00a7f version is available: \u00a7e" + var3 + "\u00a7f");
-            Config.setNewRelease((String)null);
-        }
-
-        if (this.mc.currentScreen instanceof GuiMainMenu)
-        {
-            this.updateMainMenu((GuiMainMenu)this.mc.currentScreen);
-        }
-
-        if (this.updatedWorld != var2)
-        {
-            RandomMobs.worldChanged(this.updatedWorld, var2);
-            Config.updateThreadPriorities();
-            this.lastServerTime = 0L;
-            this.lastServerTicks = 0;
-            this.updatedWorld = var2;
-        }
-
-        RenderBlocks.fancyGrass = Config.isGrassFancy() || Config.isBetterGrassFancy();
-        Block.leaves.setGraphicsLevel(Config.isTreesFancy());
-
         if (this.lightmapUpdateNeeded)
         {
             this.updateLightmap(par1);
         }
 
         this.mc.mcProfiler.endSection();
-        boolean var14 = Display.isActive();
+        boolean var2 = Display.isActive();
 
-        if (!var14 && this.mc.gameSettings.pauseOnLostFocus && (!this.mc.gameSettings.touchscreen || !Mouse.isButtonDown(1)))
+        if (!var2 && this.mc.gameSettings.pauseOnLostFocus && (!this.mc.gameSettings.touchscreen || !Mouse.isButtonDown(1)))
         {
             if (Minecraft.getSystemTime() - this.prevFrameTime > 500L)
             {
@@ -1038,33 +915,33 @@
 
         this.mc.mcProfiler.startSection("mouse");
 
-        if (this.mc.inGameHasFocus && var14)
+        if (this.mc.inGameHasFocus && var2)
         {
             this.mc.mouseHelper.mouseXYChange();
-            float var4 = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
-            float var5 = var4 * var4 * var4 * 8.0F;
-            float var6 = (float)this.mc.mouseHelper.deltaX * var5;
-            float var7 = (float)this.mc.mouseHelper.deltaY * var5;
-            byte var8 = 1;
+            float var3 = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
+            float var4 = var3 * var3 * var3 * 8.0F;
+            float var5 = (float)this.mc.mouseHelper.deltaX * var4;
+            float var6 = (float)this.mc.mouseHelper.deltaY * var4;
+            byte var7 = 1;
 
             if (this.mc.gameSettings.invertMouse)
             {
-                var8 = -1;
+                var7 = -1;
             }
 
             if (this.mc.gameSettings.smoothCamera)
             {
-                this.smoothCamYaw += var6;
-                this.smoothCamPitch += var7;
-                float var9 = par1 - this.smoothCamPartialTicks;
+                this.smoothCamYaw += var5;
+                this.smoothCamPitch += var6;
+                float var8 = par1 - this.smoothCamPartialTicks;
                 this.smoothCamPartialTicks = par1;
-                var6 = this.smoothCamFilterX * var9;
-                var7 = this.smoothCamFilterY * var9;
-                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
+                var5 = this.smoothCamFilterX * var8;
+                var6 = this.smoothCamFilterY * var8;
+                this.mc.thePlayer.setAngles(var5, var6 * (float)var7);
             }
             else
             {
-                this.mc.thePlayer.setAngles(var6, var7 * (float)var8);
+                this.mc.thePlayer.setAngles(var5, var6 * (float)var7);
             }
         }
 
@@ -1073,12 +950,12 @@
         if (!this.mc.skipRenderWorld)
         {
             anaglyphEnable = this.mc.gameSettings.anaglyph;
-            ScaledResolution var15 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
-            int var16 = var15.getScaledWidth();
-            int var17 = var15.getScaledHeight();
-            int var18 = Mouse.getX() * var16 / this.mc.displayWidth;
-            int var20 = var17 - Mouse.getY() * var17 / this.mc.displayHeight - 1;
-            int var19 = performanceToFps(this.mc.gameSettings.limitFramerate);
+            ScaledResolution var13 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
+            int var14 = var13.getScaledWidth();
+            int var15 = var13.getScaledHeight();
+            int var16 = Mouse.getX() * var14 / this.mc.displayWidth;
+            int var17 = var15 - Mouse.getY() * var15 / this.mc.displayHeight - 1;
+            int var18 = performanceToFps(this.mc.gameSettings.limitFramerate);
 
             if (this.mc.theWorld != null)
             {
@@ -1090,7 +967,7 @@
                 }
                 else
                 {
-                    this.renderWorld(par1, this.renderEndNanoTime + (long)(1000000000 / var19));
+                    this.renderWorld(par1, this.renderEndNanoTime + (long)(1000000000 / var18));
                 }
 
                 this.renderEndNanoTime = System.nanoTime();
@@ -1098,7 +975,7 @@
 
                 if (!this.mc.gameSettings.hideGUI || this.mc.currentScreen != null)
                 {
-                    this.mc.ingameGUI.renderGameOverlay(par1, this.mc.currentScreen != null, var18, var20);
+                    this.mc.ingameGUI.renderGameOverlay(par1, this.mc.currentScreen != null, var16, var17);
                 }
 
                 this.mc.mcProfiler.endSection();
@@ -1120,224 +997,19 @@
 
                 try
                 {
-                    this.mc.currentScreen.drawScreen(var18, var20, par1);
+                    this.mc.currentScreen.drawScreen(var16, var17, par1);
                 }
-                catch (Throwable var13)
+                catch (Throwable var12)
                 {
-                    CrashReport var11 = CrashReport.makeCrashReport(var13, "Rendering screen");
-                    CrashReportCategory var12 = var11.makeCategory("Screen render details");
-                    var12.addCrashSectionCallable("Screen name", new CallableScreenName(this));
-                    var12.addCrashSectionCallable("Mouse location", new CallableMouseLocation(this, var18, var20));
-                    var12.addCrashSectionCallable("Screen size", new CallableScreenSize(this, var15));
-                    throw new ReportedException(var11);
+                    CrashReport var10 = CrashReport.makeCrashReport(var12, "Rendering screen");
+                    CrashReportCategory var11 = var10.makeCategory("Screen render details");
+                    var11.addCrashSectionCallable("Screen name", new CallableScreenName(this));
+                    var11.addCrashSectionCallable("Mouse location", new CallableMouseLocation(this, var16, var17));
+                    var11.addCrashSectionCallable("Screen size", new CallableScreenSize(this, var13));
+                    throw new ReportedException(var10);
                 }
             }
         }
-
-        this.waitForServerThread();
-
-        if (this.mc.gameSettings.showDebugInfo != this.lastShowDebugInfo)
-        {
-            this.showExtendedDebugInfo = this.mc.gameSettings.showDebugProfilerChart;
-            this.lastShowDebugInfo = this.mc.gameSettings.showDebugInfo;
-        }
-
-        if (this.mc.gameSettings.showDebugInfo)
-        {
-            this.showLagometer(this.mc.mcProfiler.timeTickNano, this.mc.mcProfiler.timeUpdateChunksNano);
-        }
-
-        if (this.mc.gameSettings.ofProfiler)
-        {
-            this.mc.gameSettings.showDebugProfilerChart = true;
-        }
-    }
-
-    private void waitForServerThread()
-    {
-        this.serverWaitTimeCurrent = 0;
-
-        if (!Config.isSmoothWorld())
-        {
-            this.lastServerTime = 0L;
-            this.lastServerTicks = 0;
-        }
-        else if (this.mc.getIntegratedServer() != null)
-        {
-            IntegratedServer srv = this.mc.getIntegratedServer();
-            boolean paused = srv.getServerListeningThread().isGamePaused();
-
-            if (paused)
-            {
-                if (this.mc.currentScreen instanceof GuiDownloadTerrain)
-                {
-                    Config.sleep(20L);
-                }
-
-                this.lastServerTime = 0L;
-                this.lastServerTicks = 0;
-            }
-            else
-            {
-                if (this.serverWaitTime > 0)
-                {
-                    Config.sleep((long)this.serverWaitTime);
-                    this.serverWaitTimeCurrent = this.serverWaitTime;
-                }
-
-                long timeNow = System.nanoTime() / 1000000L;
-
-                if (this.lastServerTime != 0L && this.lastServerTicks != 0)
-                {
-                    long timeDiff = timeNow - this.lastServerTime;
-
-                    if (timeDiff < 0L)
-                    {
-                        this.lastServerTime = timeNow;
-                        timeDiff = 0L;
-                    }
-
-                    if (timeDiff >= 50L)
-                    {
-                        this.lastServerTime = timeNow;
-                        int ticks = srv.getTickCounter();
-                        int tickDiff = ticks - this.lastServerTicks;
-
-                        if (tickDiff < 0)
-                        {
-                            this.lastServerTicks = ticks;
-                            tickDiff = 0;
-                        }
-
-                        if (tickDiff < 1 && this.serverWaitTime < 100)
-                        {
-                            this.serverWaitTime += 2;
-                        }
-
-                        if (tickDiff > 1 && this.serverWaitTime > 0)
-                        {
-                            --this.serverWaitTime;
-                        }
-
-                        this.lastServerTicks = ticks;
-                    }
-                }
-                else
-                {
-                    this.lastServerTime = timeNow;
-                    this.lastServerTicks = srv.getTickCounter();
-                    this.avgServerTickDiff = 1.0F;
-                    this.avgServerTimeDiff = 50.0F;
-                }
-            }
-        }
-    }
-
-    private void showLagometer(long tickTimeNano, long chunkTimeNano)
-    {
-        if (this.mc.gameSettings.ofLagometer || this.showExtendedDebugInfo)
-        {
-            if (this.prevFrameTimeNano == -1L)
-            {
-                this.prevFrameTimeNano = System.nanoTime();
-            }
-
-            long timeNowNano = System.nanoTime();
-            int currFrameIndex = this.numRecordedFrameTimes & this.frameTimes.length - 1;
-            this.tickTimes[currFrameIndex] = tickTimeNano;
-            this.chunkTimes[currFrameIndex] = chunkTimeNano;
-            this.serverTimes[currFrameIndex] = (long)this.serverWaitTimeCurrent;
-            this.frameTimes[currFrameIndex] = timeNowNano - this.prevFrameTimeNano;
-            ++this.numRecordedFrameTimes;
-            this.prevFrameTimeNano = timeNowNano;
-            GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-            GL11.glMatrixMode(GL11.GL_PROJECTION);
-            GL11.glEnable(GL11.GL_COLOR_MATERIAL);
-            GL11.glLoadIdentity();
-            GL11.glOrtho(0.0D, (double)this.mc.displayWidth, (double)this.mc.displayHeight, 0.0D, 1000.0D, 3000.0D);
-            GL11.glMatrixMode(GL11.GL_MODELVIEW);
-            GL11.glLoadIdentity();
-            GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
-            GL11.glLineWidth(1.0F);
-            GL11.glDisable(GL11.GL_TEXTURE_2D);
-            Tessellator tessellator = Tessellator.instance;
-            tessellator.startDrawing(1);
-
-            for (int frameNum = 0; frameNum < this.frameTimes.length; ++frameNum)
-            {
-                int lum = (frameNum - this.numRecordedFrameTimes & this.frameTimes.length - 1) * 255 / this.frameTimes.length;
-                long heightFrame = this.frameTimes[frameNum] / 200000L;
-                float baseHeight = (float)this.mc.displayHeight;
-                tessellator.setColorOpaque_I(-16777216 + lum * 256);
-                tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight - (float)heightFrame + 0.5F), 0.0D);
-                tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + 0.5F), 0.0D);
-                baseHeight -= (float)heightFrame;
-                long heightTick = this.tickTimes[frameNum] / 200000L;
-                tessellator.setColorOpaque_I(-16777216 + lum * 65536 + lum * 256 + lum * 1);
-                tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + 0.5F), 0.0D);
-                tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + (float)heightTick + 0.5F), 0.0D);
-                baseHeight += (float)heightTick;
-                long heightChunk = this.chunkTimes[frameNum] / 200000L;
-                tessellator.setColorOpaque_I(-16777216 + lum * 65536);
-                tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + 0.5F), 0.0D);
-                tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + (float)heightChunk + 0.5F), 0.0D);
-                baseHeight += (float)heightChunk;
-                long srvTime = this.serverTimes[frameNum];
-
-                if (srvTime > 0L)
-                {
-                    long heightSrv = srvTime * 1000000L / 200000L;
-                    tessellator.setColorOpaque_I(-16777216 + lum * 1);
-                    tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + 0.5F), 0.0D);
-                    tessellator.addVertex((double)((float)frameNum + 0.5F), (double)(baseHeight + (float)heightSrv + 0.5F), 0.0D);
-                }
-            }
-
-            tessellator.draw();
-        }
-    }
-
-    private void updateMainMenu(GuiMainMenu mainGui)
-    {
-        try
-        {
-            String e = null;
-            Calendar calendar = Calendar.getInstance();
-            calendar.setTime(new Date());
-            int day = calendar.get(5);
-            int month = calendar.get(2) + 1;
-
-            if (day == 8 && month == 4)
-            {
-                e = "Happy birthday, OptiFine!";
-            }
-
-            if (day == 14 && month == 8)
-            {
-                e = "Happy birthday, sp614x!";
-            }
-
-            if (e == null)
-            {
-                return;
-            }
-
-            Field[] fs = GuiMainMenu.class.getDeclaredFields();
-
-            for (int i = 0; i < fs.length; ++i)
-            {
-                if (fs[i].getType() == String.class)
-                {
-                    fs[i].setAccessible(true);
-                    fs[i].set(mainGui, e);
-                    break;
-                }
-            }
-        }
-        catch (Throwable var8)
-        {
-            ;
-        }
     }
 
     public void renderWorld(float par1, long par2)
@@ -1394,11 +1066,7 @@
             this.mc.mcProfiler.endStartSection("frustrum");
             ClippingHelperImpl.getInstance();
 
-            if (!Config.isSkyEnabled() && !Config.isSunMoonEnabled() && !Config.isStarsEnabled())
-            {
-                GL11.glDisable(GL11.GL_BLEND);
-            }
-            else
+            if (this.mc.gameSettings.renderDistance < 2)
             {
                 this.setupFog(-1, par1);
                 this.mc.mcProfiler.endStartSection("sky");
@@ -1446,38 +1114,28 @@
             this.mc.mcProfiler.endStartSection("terrain");
             var5.sortAndRender(var4, 0, (double)par1);
             GL11.glShadeModel(GL11.GL_FLAT);
-            boolean var16 = Reflector.ForgeHooksClient.exists();
-            EntityPlayer var18;
+            EntityPlayer var17;
 
             if (this.debugViewDirection == 0)
             {
                 RenderHelper.enableStandardItemLighting();
                 this.mc.mcProfiler.endStartSection("entities");
-
-                if (var16)
-                {
-                    Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(0)});
-                }
-
                 var5.renderEntities(var4.getPosition(par1), var14, par1);
-
-                if (var16)
-                {
-                    Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(-1)});
-                }
-
+                this.enableLightmap((double)par1);
+                this.mc.mcProfiler.endStartSection("litParticles");
+                var6.renderLitParticles(var4, par1);
                 RenderHelper.disableStandardItemLighting();
+                this.setupFog(0, par1);
+                this.mc.mcProfiler.endStartSection("particles");
+                var6.renderParticles(var4, par1);
+                this.disableLightmap((double)par1);
 
                 if (this.mc.objectMouseOver != null && var4.isInsideOfMaterial(Material.water) && var4 instanceof EntityPlayer && !this.mc.gameSettings.hideGUI)
                 {
-                    var18 = (EntityPlayer)var4;
+                    var17 = (EntityPlayer)var4;
                     GL11.glDisable(GL11.GL_ALPHA_TEST);
                     this.mc.mcProfiler.endStartSection("outline");
-
-                    if ((!var16 || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, new Object[] {var5, var18, this.mc.objectMouseOver, Integer.valueOf(0), var18.inventory.getCurrentItem(), Float.valueOf(par1)})) && !this.mc.gameSettings.hideGUI)
-                    {
-                        var5.drawSelectionBox(var18, this.mc.objectMouseOver, 0, par1);
-                    }
+                    var5.drawSelectionBox(var17, this.mc.objectMouseOver, 0, par1);
                     GL11.glEnable(GL11.GL_ALPHA_TEST);
                 }
             }
@@ -1490,9 +1148,8 @@
             GL11.glEnable(GL11.GL_BLEND);
             GL11.glDisable(GL11.GL_CULL_FACE);
             this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
-            WrUpdates.resumeBackgroundUpdates();
 
-            if (Config.isWaterFancy())
+            if (this.mc.gameSettings.fancyGraphics)
             {
                 this.mc.mcProfiler.endStartSection("water");
 
@@ -1502,7 +1159,7 @@
                 }
 
                 GL11.glColorMask(false, false, false, false);
-                int var17 = var5.renderAllSortedRenderers(1, (double)par1);
+                int var18 = var5.sortAndRender(var4, 1, (double)par1);
 
                 if (this.mc.gameSettings.anaglyph)
                 {
@@ -1520,9 +1177,9 @@
                     GL11.glColorMask(true, true, true, true);
                 }
 
-                if (var17 > 0)
+                if (var18 > 0)
                 {
-                    var5.renderAllSortedRenderers(1, (double)par1);
+                    var5.renderAllRenderLists(1, (double)par1);
                 }
 
                 GL11.glShadeModel(GL11.GL_FLAT);
@@ -1530,19 +1187,7 @@
             else
             {
                 this.mc.mcProfiler.endStartSection("water");
-                var5.renderAllSortedRenderers(1, (double)par1);
-            }
-
-            WrUpdates.pauseBackgroundUpdates();
-
-            if (var16 && this.debugViewDirection == 0)
-            {
-                RenderHelper.enableStandardItemLighting();
-                this.mc.mcProfiler.endStartSection("entities");
-                Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(1)});
-                this.mc.renderGlobal.renderEntities(var4.getPosition(par1), var14, par1);
-                Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(-1)});
-                RenderHelper.disableStandardItemLighting();
+                var5.sortAndRender(var4, 1, (double)par1);
             }
 
             GL11.glDepthMask(true);
@@ -1551,21 +1196,17 @@
 
             if (this.cameraZoom == 1.0D && var4 instanceof EntityPlayer && !this.mc.gameSettings.hideGUI && this.mc.objectMouseOver != null && !var4.isInsideOfMaterial(Material.water))
             {
-                var18 = (EntityPlayer)var4;
+                var17 = (EntityPlayer)var4;
                 GL11.glDisable(GL11.GL_ALPHA_TEST);
                 this.mc.mcProfiler.endStartSection("outline");
-
-                if ((!var16 || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, new Object[] {var5, var18, this.mc.objectMouseOver, Integer.valueOf(0), var18.inventory.getCurrentItem(), Float.valueOf(par1)})) && !this.mc.gameSettings.hideGUI)
-                {
-                    var5.drawSelectionBox(var18, this.mc.objectMouseOver, 0, par1);
-                }
+                var5.drawSelectionBox(var17, this.mc.objectMouseOver, 0, par1);
                 GL11.glEnable(GL11.GL_ALPHA_TEST);
             }
 
             this.mc.mcProfiler.endStartSection("destroyProgress");
             GL11.glEnable(GL11.GL_BLEND);
             GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);
-            var5.drawBlockDamageTexture(Tessellator.instance, var4, par1);
+            var5.drawBlockDamageTexture(Tessellator.instance, (EntityPlayer)var4, par1);
             GL11.glDisable(GL11.GL_BLEND);
             this.mc.mcProfiler.endStartSection("weather");
             this.renderRainSnow(par1);
@@ -1576,22 +1217,6 @@
                 this.renderCloudsCheck(var5, par1);
             }
 
-            this.enableLightmap((double)par1);
-            this.mc.mcProfiler.endStartSection("litParticles");
-            RenderHelper.enableStandardItemLighting();
-            var6.renderLitParticles(var4, par1);
-            RenderHelper.disableStandardItemLighting();
-            this.setupFog(0, par1);
-            this.mc.mcProfiler.endStartSection("particles");
-            var6.renderParticles(var4, par1);
-            this.disableLightmap((double)par1);
-
-            if (var16)
-            {
-                this.mc.mcProfiler.endStartSection("FRenderLast");
-                Reflector.callVoid(Reflector.ForgeHooksClient_dispatchRenderLast, new Object[] {var5, Float.valueOf(par1)});
-            }
-
             this.mc.mcProfiler.endStartSection("hand");
 
             if (this.cameraZoom == 1.0D)
@@ -1633,12 +1258,12 @@
     {
         float var1 = this.mc.theWorld.getRainStrength(1.0F);
 
-        if (!Config.isRainFancy())
+        if (!this.mc.gameSettings.fancyGraphics)
         {
             var1 /= 2.0F;
         }
 
-        if (Config.isRainSplash())
+        if (var1 != 0.0F)
         {
             this.random.setSeed((long)this.rendererUpdateCount * 312987231L);
             EntityLivingBase var2 = this.mc.renderViewEntity;
@@ -1692,9 +1317,7 @@
                                 var12 = (double)((float)var18 + var23);
                             }
 
-                            EntityRainFX var24 = new EntityRainFX(var3, (double)((float)var17 + var22), (double)((float)var19 + 0.1F) - Block.blocksList[var20].getBlockBoundsMinY(), (double)((float)var18 + var23));
-                            CustomColorizer.updateWaterFX(var24, var3);
-                            this.mc.effectRenderer.addEffect(var24);
+                            this.mc.effectRenderer.addEffect(new EntityRainFX(var3, (double)((float)var17 + var22), (double)((float)var19 + 0.1F) - Block.blocksList[var20].getBlockBoundsMinY(), (double)((float)var18 + var23)));
                         }
                     }
                 }
@@ -1745,11 +1368,6 @@
                 }
             }
 
-            if (Config.isRainOff())
-            {
-                return;
-            }
-
             EntityLivingBase var41 = this.mc.renderViewEntity;
             WorldClient var42 = this.mc.theWorld;
             int var43 = MathHelper.floor_double(var41.posX);
@@ -1768,7 +1386,7 @@
             int var15 = MathHelper.floor_double(var11);
             byte var16 = 5;
 
-            if (Config.isRainFancy())
+            if (this.mc.gameSettings.fancyGraphics)
             {
                 var16 = 10;
             }
@@ -1777,7 +1395,7 @@
             byte var18 = -1;
             float var19 = (float)this.rendererUpdateCount + par1;
 
-            if (Config.isRainFancy())
+            if (this.mc.gameSettings.fancyGraphics)
             {
                 var16 = 10;
             }
@@ -1822,8 +1440,8 @@
                         {
                             this.random.setSeed((long)(var21 * var21 * 3121 + var21 * 45238971 ^ var20 * var20 * 418711 + var20 * 13761));
                             float var31 = var25.getFloatTemperature();
-                            float var34;
-                            double var32;
+                            double var35;
+                            float var32;
 
                             if (var42.getWorldChunkManager().getTemperatureAtHeight(var31, var26) >= 0.15F)
                             {
@@ -1839,18 +1457,18 @@
                                     var8.startDrawingQuads();
                                 }
 
-                                var34 = ((float)(this.rendererUpdateCount + var21 * var21 * 3121 + var21 * 45238971 + var20 * var20 * 418711 + var20 * 13761 & 31) + par1) / 32.0F * (3.0F + this.random.nextFloat());
-                                double var35 = (double)((float)var21 + 0.5F) - var41.posX;
-                                var32 = (double)((float)var20 + 0.5F) - var41.posZ;
-                                float var37 = MathHelper.sqrt_double(var35 * var35 + var32 * var32) / (float)var16;
+                                var32 = ((float)(this.rendererUpdateCount + var21 * var21 * 3121 + var21 * 45238971 + var20 * var20 * 418711 + var20 * 13761 & 31) + par1) / 32.0F * (3.0F + this.random.nextFloat());
+                                double var33 = (double)((float)var21 + 0.5F) - var41.posX;
+                                var35 = (double)((float)var20 + 0.5F) - var41.posZ;
+                                float var37 = MathHelper.sqrt_double(var33 * var33 + var35 * var35) / (float)var16;
                                 float var38 = 1.0F;
                                 var8.setBrightness(var42.getLightBrightnessForSkyBlocks(var21, var30, var20, 0));
                                 var8.setColorRGBA_F(var38, var38, var38, ((1.0F - var37 * var37) * 0.5F + 0.5F) * var2);
                                 var8.setTranslation(-var9 * 1.0D, -var11 * 1.0D, -var13 * 1.0D);
-                                var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var27, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29), (double)((float)var27 * var29 / 4.0F + var34 * var29));
-                                var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var27, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29), (double)((float)var27 * var29 / 4.0F + var34 * var29));
-                                var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var28, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29), (double)((float)var28 * var29 / 4.0F + var34 * var29));
-                                var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var28, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29), (double)((float)var28 * var29 / 4.0F + var34 * var29));
+                                var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var27, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29), (double)((float)var27 * var29 / 4.0F + var32 * var29));
+                                var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var27, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29), (double)((float)var27 * var29 / 4.0F + var32 * var29));
+                                var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var28, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29), (double)((float)var28 * var29 / 4.0F + var32 * var29));
+                                var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var28, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29), (double)((float)var28 * var29 / 4.0F + var32 * var29));
                                 var8.setTranslation(0.0D, 0.0D, 0.0D);
                             }
                             else
@@ -1867,20 +1485,20 @@
                                     var8.startDrawingQuads();
                                 }
 
-                                var34 = ((float)(this.rendererUpdateCount & 511) + par1) / 512.0F;
+                                var32 = ((float)(this.rendererUpdateCount & 511) + par1) / 512.0F;
                                 float var46 = this.random.nextFloat() + var19 * 0.01F * (float)this.random.nextGaussian();
-                                float var36 = this.random.nextFloat() + var19 * (float)this.random.nextGaussian() * 0.001F;
-                                var32 = (double)((float)var21 + 0.5F) - var41.posX;
+                                float var34 = this.random.nextFloat() + var19 * (float)this.random.nextGaussian() * 0.001F;
+                                var35 = (double)((float)var21 + 0.5F) - var41.posX;
                                 double var47 = (double)((float)var20 + 0.5F) - var41.posZ;
-                                float var39 = MathHelper.sqrt_double(var32 * var32 + var47 * var47) / (float)var16;
+                                float var39 = MathHelper.sqrt_double(var35 * var35 + var47 * var47) / (float)var16;
                                 float var40 = 1.0F;
                                 var8.setBrightness((var42.getLightBrightnessForSkyBlocks(var21, var30, var20, 0) * 3 + 15728880) / 4);
                                 var8.setColorRGBA_F(var40, var40, var40, ((1.0F - var39 * var39) * 0.3F + 0.5F) * var2);
                                 var8.setTranslation(-var9 * 1.0D, -var11 * 1.0D, -var13 * 1.0D);
-                                var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var27, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29 + var46), (double)((float)var27 * var29 / 4.0F + var34 * var29 + var36));
-                                var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var27, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29 + var46), (double)((float)var27 * var29 / 4.0F + var34 * var29 + var36));
-                                var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var28, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29 + var46), (double)((float)var28 * var29 / 4.0F + var34 * var29 + var36));
-                                var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var28, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29 + var46), (double)((float)var28 * var29 / 4.0F + var34 * var29 + var36));
+                                var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var27, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29 + var46), (double)((float)var27 * var29 / 4.0F + var32 * var29 + var34));
+                                var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var27, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29 + var46), (double)((float)var27 * var29 / 4.0F + var32 * var29 + var34));
+                                var8.addVertexWithUV((double)((float)var21 + var23) + 0.5D, (double)var28, (double)((float)var20 + var24) + 0.5D, (double)(1.0F * var29 + var46), (double)((float)var28 * var29 / 4.0F + var32 * var29 + var34));
+                                var8.addVertexWithUV((double)((float)var21 - var23) + 0.5D, (double)var28, (double)((float)var20 - var24) + 0.5D, (double)(0.0F * var29 + var46), (double)((float)var28 * var29 / 4.0F + var32 * var29 + var34));
                                 var8.setTranslation(0.0D, 0.0D, 0.0D);
                             }
                         }
@@ -1925,46 +1543,19 @@
         float var4 = 1.0F / (float)(4 - this.mc.gameSettings.renderDistance);
         var4 = 1.0F - (float)Math.pow((double)var4, 0.25D);
         Vec3 var5 = var2.getSkyColor(this.mc.renderViewEntity, par1);
-        int var6 = var2.provider.dimensionId;
-
-        switch (var6)
-        {
-            case 0:
-                var5 = CustomColorizer.getSkyColor(var5, this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
-                break;
-
-            case 1:
-                var5 = CustomColorizer.getSkyColorEnd(var5);
-        }
-
-        float var7 = (float)var5.xCoord;
-        float var8 = (float)var5.yCoord;
-        float var9 = (float)var5.zCoord;
-        Vec3 var10 = var2.getFogColor(par1);
-
-        switch (var6)
-        {
-            case -1:
-                var10 = CustomColorizer.getFogColorNether(var10);
-                break;
-
-            case 0:
-                var10 = CustomColorizer.getFogColor(var10, this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
-                break;
-
-            case 1:
-                var10 = CustomColorizer.getFogColorEnd(var10);
-        }
-
-        this.fogColorRed = (float)var10.xCoord;
-        this.fogColorGreen = (float)var10.yCoord;
-        this.fogColorBlue = (float)var10.zCoord;
+        float var6 = (float)var5.xCoord;
+        float var7 = (float)var5.yCoord;
+        float var8 = (float)var5.zCoord;
+        Vec3 var9 = var2.getFogColor(par1);
+        this.fogColorRed = (float)var9.xCoord;
+        this.fogColorGreen = (float)var9.yCoord;
+        this.fogColorBlue = (float)var9.zCoord;
         float var11;
 
         if (this.mc.gameSettings.renderDistance < 2)
         {
-            Vec3 var12 = MathHelper.sin(var2.getCelestialAngleRadians(par1)) > 0.0F ? var2.getWorldVec3Pool().getVecFromPool(-1.0D, 0.0D, 0.0D) : var2.getWorldVec3Pool().getVecFromPool(1.0D, 0.0D, 0.0D);
-            var11 = (float)var3.getLook(par1).dotProduct(var12);
+            Vec3 var10 = MathHelper.sin(var2.getCelestialAngleRadians(par1)) > 0.0F ? var2.getWorldVec3Pool().getVecFromPool(-1.0D, 0.0D, 0.0D) : var2.getWorldVec3Pool().getVecFromPool(1.0D, 0.0D, 0.0D);
+            var11 = (float)var3.getLook(par1).dotProduct(var10);
 
             if (var11 < 0.0F)
             {
@@ -1973,156 +1564,140 @@
 
             if (var11 > 0.0F)
             {
-                float[] var13 = var2.provider.calcSunriseSunsetColors(var2.getCelestialAngle(par1), par1);
+                float[] var12 = var2.provider.calcSunriseSunsetColors(var2.getCelestialAngle(par1), par1);
 
-                if (var13 != null)
+                if (var12 != null)
                 {
-                    var11 *= var13[3];
-                    this.fogColorRed = this.fogColorRed * (1.0F - var11) + var13[0] * var11;
-                    this.fogColorGreen = this.fogColorGreen * (1.0F - var11) + var13[1] * var11;
-                    this.fogColorBlue = this.fogColorBlue * (1.0F - var11) + var13[2] * var11;
+                    var11 *= var12[3];
+                    this.fogColorRed = this.fogColorRed * (1.0F - var11) + var12[0] * var11;
+                    this.fogColorGreen = this.fogColorGreen * (1.0F - var11) + var12[1] * var11;
+                    this.fogColorBlue = this.fogColorBlue * (1.0F - var11) + var12[2] * var11;
                 }
             }
         }
 
-        this.fogColorRed += (var7 - this.fogColorRed) * var4;
-        this.fogColorGreen += (var8 - this.fogColorGreen) * var4;
-        this.fogColorBlue += (var9 - this.fogColorBlue) * var4;
-        float var23 = var2.getRainStrength(par1);
-        float var24;
+        this.fogColorRed += (var6 - this.fogColorRed) * var4;
+        this.fogColorGreen += (var7 - this.fogColorGreen) * var4;
+        this.fogColorBlue += (var8 - this.fogColorBlue) * var4;
+        float var19 = var2.getRainStrength(par1);
+        float var20;
 
-        if (var23 > 0.0F)
+        if (var19 > 0.0F)
         {
-            var11 = 1.0F - var23 * 0.5F;
-            var24 = 1.0F - var23 * 0.4F;
+            var11 = 1.0F - var19 * 0.5F;
+            var20 = 1.0F - var19 * 0.4F;
             this.fogColorRed *= var11;
             this.fogColorGreen *= var11;
-            this.fogColorBlue *= var24;
+            this.fogColorBlue *= var20;
         }
 
         var11 = var2.getWeightedThunderStrength(par1);
 
         if (var11 > 0.0F)
         {
-            var24 = 1.0F - var11 * 0.5F;
-            this.fogColorRed *= var24;
-            this.fogColorGreen *= var24;
-            this.fogColorBlue *= var24;
+            var20 = 1.0F - var11 * 0.5F;
+            this.fogColorRed *= var20;
+            this.fogColorGreen *= var20;
+            this.fogColorBlue *= var20;
         }
 
-        int var14 = ActiveRenderInfo.getBlockIdAtEntityViewpoint(this.mc.theWorld, var3, par1);
-        float var15;
-        Vec3 var16;
+        int var21 = ActiveRenderInfo.getBlockIdAtEntityViewpoint(this.mc.theWorld, var3, par1);
+        float var22;
 
         if (this.cloudFog)
         {
-            var16 = var2.getCloudColour(par1);
-            this.fogColorRed = (float)var16.xCoord;
-            this.fogColorGreen = (float)var16.yCoord;
-            this.fogColorBlue = (float)var16.zCoord;
+            Vec3 var13 = var2.getCloudColour(par1);
+            this.fogColorRed = (float)var13.xCoord;
+            this.fogColorGreen = (float)var13.yCoord;
+            this.fogColorBlue = (float)var13.zCoord;
+        }
+        else if (var21 != 0 && Block.blocksList[var21].blockMaterial == Material.water)
+        {
+            var22 = (float)EnchantmentHelper.getRespiration(var3) * 0.2F;
+            this.fogColorRed = 0.02F + var22;
+            this.fogColorGreen = 0.02F + var22;
+            this.fogColorBlue = 0.2F + var22;
         }
-        else if (var14 != 0 && Block.blocksList[var14].blockMaterial == Material.water)
-        {
-            var15 = (float)EnchantmentHelper.getRespiration(var3) * 0.2F;
-            this.fogColorRed = 0.02F + var15;
-            this.fogColorGreen = 0.02F + var15;
-            this.fogColorBlue = 0.2F + var15;
-            var16 = CustomColorizer.getUnderwaterColor(this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
-
-            if (var16 != null)
-            {
-                this.fogColorRed = (float)var16.xCoord;
-                this.fogColorGreen = (float)var16.yCoord;
-                this.fogColorBlue = (float)var16.zCoord;
-            }
-        }
-        else if (var14 != 0 && Block.blocksList[var14].blockMaterial == Material.lava)
+        else if (var21 != 0 && Block.blocksList[var21].blockMaterial == Material.lava)
         {
             this.fogColorRed = 0.6F;
             this.fogColorGreen = 0.1F;
             this.fogColorBlue = 0.0F;
         }
 
-        var15 = this.fogColor2 + (this.fogColor1 - this.fogColor2) * par1;
-        this.fogColorRed *= var15;
-        this.fogColorGreen *= var15;
-        this.fogColorBlue *= var15;
-        double var25 = var2.provider.getVoidFogYFactor();
-
-        if (!Config.isDepthFog())
-        {
-            var25 = 1.0D;
-        }
-
-        double var18 = (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)par1) * var25;
+        var22 = this.fogColor2 + (this.fogColor1 - this.fogColor2) * par1;
+        this.fogColorRed *= var22;
+        this.fogColorGreen *= var22;
+        this.fogColorBlue *= var22;
+        double var14 = (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)par1) * var2.provider.getVoidFogYFactor();
 
         if (var3.isPotionActive(Potion.blindness))
         {
-            int var20 = var3.getActivePotionEffect(Potion.blindness).getDuration();
+            int var16 = var3.getActivePotionEffect(Potion.blindness).getDuration();
 
-            if (var20 < 20)
+            if (var16 < 20)
             {
-                var18 *= (double)(1.0F - (float)var20 / 20.0F);
+                var14 *= (double)(1.0F - (float)var16 / 20.0F);
             }
             else
             {
-                var18 = 0.0D;
+                var14 = 0.0D;
             }
         }
 
-        if (var18 < 1.0D)
+        if (var14 < 1.0D)
         {
-            if (var18 < 0.0D)
+            if (var14 < 0.0D)
             {
-                var18 = 0.0D;
+                var14 = 0.0D;
             }
 
-            var18 *= var18;
-            this.fogColorRed = (float)((double)this.fogColorRed * var18);
-            this.fogColorGreen = (float)((double)this.fogColorGreen * var18);
-            this.fogColorBlue = (float)((double)this.fogColorBlue * var18);
+            var14 *= var14;
+            this.fogColorRed = (float)((double)this.fogColorRed * var14);
+            this.fogColorGreen = (float)((double)this.fogColorGreen * var14);
+            this.fogColorBlue = (float)((double)this.fogColorBlue * var14);
         }
 
-        float var26;
+        float var23;
 
         if (this.field_82831_U > 0.0F)
         {
-            var26 = this.field_82832_V + (this.field_82831_U - this.field_82832_V) * par1;
-            this.fogColorRed = this.fogColorRed * (1.0F - var26) + this.fogColorRed * 0.7F * var26;
-            this.fogColorGreen = this.fogColorGreen * (1.0F - var26) + this.fogColorGreen * 0.6F * var26;
-            this.fogColorBlue = this.fogColorBlue * (1.0F - var26) + this.fogColorBlue * 0.6F * var26;
+            var23 = this.field_82832_V + (this.field_82831_U - this.field_82832_V) * par1;
+            this.fogColorRed = this.fogColorRed * (1.0F - var23) + this.fogColorRed * 0.7F * var23;
+            this.fogColorGreen = this.fogColorGreen * (1.0F - var23) + this.fogColorGreen * 0.6F * var23;
+            this.fogColorBlue = this.fogColorBlue * (1.0F - var23) + this.fogColorBlue * 0.6F * var23;
         }
 
-        float var21;
+        float var17;
 
         if (var3.isPotionActive(Potion.nightVision))
         {
-            var26 = this.getNightVisionBrightness(this.mc.thePlayer, par1);
-            var21 = 1.0F / this.fogColorRed;
+            var23 = this.getNightVisionBrightness(this.mc.thePlayer, par1);
+            var17 = 1.0F / this.fogColorRed;
 
-            if (var21 > 1.0F / this.fogColorGreen)
+            if (var17 > 1.0F / this.fogColorGreen)
             {
-                var21 = 1.0F / this.fogColorGreen;
+                var17 = 1.0F / this.fogColorGreen;
             }
 
-            if (var21 > 1.0F / this.fogColorBlue)
+            if (var17 > 1.0F / this.fogColorBlue)
             {
-                var21 = 1.0F / this.fogColorBlue;
+                var17 = 1.0F / this.fogColorBlue;
             }
 
-            this.fogColorRed = this.fogColorRed * (1.0F - var26) + this.fogColorRed * var21 * var26;
-            this.fogColorGreen = this.fogColorGreen * (1.0F - var26) + this.fogColorGreen * var21 * var26;
-            this.fogColorBlue = this.fogColorBlue * (1.0F - var26) + this.fogColorBlue * var21 * var26;
+            this.fogColorRed = this.fogColorRed * (1.0F - var23) + this.fogColorRed * var17 * var23;
+            this.fogColorGreen = this.fogColorGreen * (1.0F - var23) + this.fogColorGreen * var17 * var23;
+            this.fogColorBlue = this.fogColorBlue * (1.0F - var23) + this.fogColorBlue * var17 * var23;
         }
 
         if (this.mc.gameSettings.anaglyph)
         {
-            var26 = (this.fogColorRed * 30.0F + this.fogColorGreen * 59.0F + this.fogColorBlue * 11.0F) / 100.0F;
-            var21 = (this.fogColorRed * 30.0F + this.fogColorGreen * 70.0F) / 100.0F;
-            float var22 = (this.fogColorRed * 30.0F + this.fogColorBlue * 70.0F) / 100.0F;
-            this.fogColorRed = var26;
-            this.fogColorGreen = var21;
-            this.fogColorBlue = var22;
+            var23 = (this.fogColorRed * 30.0F + this.fogColorGreen * 59.0F + this.fogColorBlue * 11.0F) / 100.0F;
+            var17 = (this.fogColorRed * 30.0F + this.fogColorGreen * 70.0F) / 100.0F;
+            float var18 = (this.fogColorRed * 30.0F + this.fogColorBlue * 70.0F) / 100.0F;
+            this.fogColorRed = var23;
+            this.fogColorGreen = var17;
+            this.fogColorBlue = var18;
         }
 
         GL11.glClearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
@@ -2136,7 +1711,6 @@
     {
         EntityLivingBase var3 = this.mc.renderViewEntity;
         boolean var4 = false;
-        this.fogStandard = false;
 
         if (var3 instanceof EntityPlayer)
         {
@@ -2188,7 +1762,7 @@
                     GL11.glFogf(GL11.GL_FOG_END, var6);
                 }
 
-                if (Config.isFogFancy())
+                if (GLContext.getCapabilities().GL_NV_fog_distance)
                 {
                     GL11.glFogi(34138, 34139);
                 }
@@ -2210,11 +1784,6 @@
                 {
                     GL11.glFogf(GL11.GL_FOG_DENSITY, 0.1F - (float)EnchantmentHelper.getRespiration(var3) * 0.03F);
                 }
-
-                if (Config.isClearWater())
-                {
-                    GL11.glFogf(GL11.GL_FOG_DENSITY, 0.02F);
-                }
             }
             else if (var5 > 0 && Block.blocksList[var5].blockMaterial == Material.lava)
             {
@@ -2224,9 +1793,8 @@
             else
             {
                 var6 = this.farPlaneDistance;
-                this.fogStandard = true;
 
-                if (Config.isDepthFog() && this.mc.theWorld.provider.getWorldHasVoidParticles() && !var4)
+                if (this.mc.theWorld.provider.getWorldHasVoidParticles() && !var4)
                 {
                     double var10 = (double)((var3.getBrightnessForRender(par2) & 15728640) >> 20) / 16.0D + (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)par2 + 4.0D) / 32.0D;
 
@@ -2254,37 +1822,27 @@
 
                 GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
 
-                if (GLContext.getCapabilities().GL_NV_fog_distance)
+                if (par1 < 0)
                 {
-                    if (Config.isFogFancy())
-                    {
-                        GL11.glFogi(34138, 34139);
-                    }
-
-                    if (Config.isFogFast())
-                    {
-                        GL11.glFogi(34138, 34140);
-                    }
+                    GL11.glFogf(GL11.GL_FOG_START, 0.0F);
+                    GL11.glFogf(GL11.GL_FOG_END, var6 * 0.8F);
+                }
+                else
+                {
+                    GL11.glFogf(GL11.GL_FOG_START, var6 * 0.25F);
+                    GL11.glFogf(GL11.GL_FOG_END, var6);
                 }
 
-                float var11 = Config.getFogStart();
-                float var8 = 1.0F;
-
-                if (par1 < 0)
+                if (GLContext.getCapabilities().GL_NV_fog_distance)
                 {
-                    var11 = 0.0F;
-                    var8 = 0.8F;
+                    GL11.glFogi(34138, 34139);
                 }
 
                 if (this.mc.theWorld.provider.doesXZShowFog((int)var3.posX, (int)var3.posZ))
                 {
-                    var11 = 0.05F;
-                    var8 = 1.0F;
-                    var6 = this.farPlaneDistance;
+                    GL11.glFogf(GL11.GL_FOG_START, var6 * 0.05F);
+                    GL11.glFogf(GL11.GL_FOG_END, Math.min(var6, 192.0F) * 0.5F);
                 }
-
-                GL11.glFogf(GL11.GL_FOG_START, var6 * var11);
-                GL11.glFogf(GL11.GL_FOG_END, var6 * var8);
             }
 
             GL11.glEnable(GL11.GL_COLOR_MATERIAL);
@@ -2308,27 +1866,19 @@
      */
     public static int performanceToFps(int par0)
     {
-        Minecraft var1 = Config.getMinecraft();
+        short var1 = 200;
 
-        if (var1.currentScreen != null && var1.currentScreen instanceof GuiMainMenu)
+        if (par0 == 1)
         {
-            return 35;
+            var1 = 120;
         }
-        else if (var1.theWorld == null)
+
+        if (par0 == 2)
         {
-            return 35;
+            var1 = 35;
         }
-        else
-        {
-            int var2 = Config.getGameSettings().ofLimitFramerateFine;
 
-            if (var2 <= 0)
-            {
-                var2 = 10000;
-            }
-
-            return var2;
-        }
+        return var1;
     }
 
     /**
