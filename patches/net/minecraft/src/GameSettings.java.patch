--- a/net/minecraft/src/GameSettings.java
+++ b/net/minecraft/src/GameSettings.java
@@ -7,6 +7,7 @@
 import java.io.PrintWriter;
 import java.util.Arrays;
 import java.util.List;
+
 import net.minecraft.client.Minecraft;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
@@ -14,6 +15,19 @@
 
 public class GameSettings
 {
+    // Minecrift
+    public static final int POS_TRACK_NECK = 0;
+    public static final int POS_TRACK_HYDRA = 1;
+
+    private static final String[] POS_TRACK_HYDRA_LOC = new String[] {"HMD (L&R sides)", "HMD (Left side)", "HMD (Top)", "HMD (Right side)", "Back Of Head BETA", "Direct"};
+    //TODO: Shouldn't these be an enum? 
+    public static final int POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT = 0;
+    public static final int POS_TRACK_HYDRA_LOC_HMD_LEFT = 1;
+    public static final int POS_TRACK_HYDRA_LOC_HMD_TOP = 2;
+    public static final int POS_TRACK_HYDRA_LOC_HMD_RIGHT = 3;
+    public static final int POS_TRACK_HYDRA_LOC_BACK_OF_HEAD = 4;
+    //public static final int POS_TRACK_HYDRA_LOC_DIRECT = 5;
+
     private static final String[] RENDER_DISTANCES = new String[] {"options.renderDistance.far", "options.renderDistance.normal", "options.renderDistance.short", "options.renderDistance.tiny"};
     private static final String[] DIFFICULTIES = new String[] {"options.difficulty.peaceful", "options.difficulty.easy", "options.difficulty.normal", "options.difficulty.hard"};
 
@@ -28,6 +42,7 @@
     public float musicVolume = 1.0F;
     public float soundVolume = 1.0F;
     public float mouseSensitivity = 0.5F;
+
     public boolean invertMouse = false;
     public int renderDistance = 0;
     public boolean viewBobbing = true;
@@ -133,6 +148,64 @@
     public boolean enableVsync = true;
     public boolean hideServerAddress = false;
 
+    // Minecrift
+    public boolean useVRRenderer    = false; //default to false
+	public float playerHeight = 1.74f;
+	public float eyeProtrusion = 0.185f;
+	public float neckBaseToEyeHeight = 0.225f;
+    public float movementSpeedMultiplier = 1.0f;
+    public boolean useDistortion = true;
+    public boolean useHeadTracking = true;
+    public boolean useHeadTrackPrediction = true;
+    public float headTrackPredictionTimeSecs = 0.015f;
+    public float ipd = 0.0635F;
+    public boolean useHudOpacity = false;
+    public boolean renderHeadWear = false;
+    public float renderPlayerOffset = 0.25f;
+    public boolean useChromaticAbCorrection = false;
+    public float hudScale = 1.0f;
+    public boolean pitchInputAffectsCamera = false;
+    public float hudDistance = 1.0f;
+    public float fovScaleFactor = 1.0f;
+    public int distortionFitPoint = 5;
+    public float headTrackSensitivity = 1.0f;
+    public boolean useSupersample = false;
+    public float superSampleScaleFactor = 2.0f;
+    public boolean useMipMaps = false;
+    public boolean lookMoveDecoupled = false;
+	public boolean lookAimYawDecoupled = false;
+	public boolean lookAimPitchDecoupled = false;
+    public int posTrackHydraLoc = POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT;
+    public boolean posTrackHydraUseController1 = true;
+    public boolean posTrackHydraDebugCentreEyePos = false;
+    public float posTrackHydraDistanceScale = 1.02f;
+    public boolean posTrackResetPosition = true;
+    public float posTrackHydraLROffsetX = 0.0f;
+    public float posTrackHydraLROffsetY = 0.0f;
+    public float posTrackHydraLROffsetZ = 0.0f;
+    public float posTrackHydraLOffsetX = -0.108f;
+    public float posTrackHydraLOffsetY = 0.0f;
+    public float posTrackHydraLOffsetZ = 0.0f;
+    public float posTrackHydraROffsetX = 0.108f;
+    public float posTrackHydraROffsetY = 0.0f;
+    public float posTrackHydraROffsetZ = 0.0f;
+    public float posTrackHydraTOffsetX = 0.0f;
+    public float posTrackHydraTOffsetY = 0.085f;
+    public float posTrackHydraTOffsetZ = 0.0f;
+    public float posTrackHydraBOffsetX = 0.0f;
+    public float posTrackHydraBOffsetY = 0.05f;
+    public float posTrackHydraBOffsetZ = -0.25f;
+    public float posTrackHydraYAxisDistanceSkewAngleDeg = 0.0f;
+	public float joystickSensitivity = 3f;
+	public float aimKeyholeWidthDegrees = 90f;
+    public boolean hydraUseFilter = true;
+    public float magRefDistance = 0.15f;
+	public String headPositionPluginID = "oculus";
+	public String headTrackerPluginID = "oculus";
+	public String hmdPluginID = "oculus";
+	public String controllerPluginID = "mouse";
+
+
     /**
      * Whether to show advanced information on item tooltips, toggled by F3+H
      */
@@ -166,7 +239,7 @@
     public KeyBinding keyBindPickBlock = new KeyBinding("key.pickItem", -98);
     public KeyBinding keyBindCommand = new KeyBinding("key.command", 53);
     public KeyBinding[] keyBindings;
-    protected Minecraft mc;
+    public Minecraft mc;
     private File optionsFile;
     public int difficulty;
     public boolean hideGUI;
@@ -175,6 +248,7 @@
     /** true if debug info should be displayed instead of version */
     public boolean showDebugInfo;
     public boolean showDebugProfilerChart;
+	public boolean showOculusDebugInfo;
 
     /** The lastServer string. */
     public String lastServer;
@@ -203,6 +277,7 @@
     /** Game settings language */
     public String language;
     private File optionsFileOF;
+    private File optionsFileMinecrift;
 
     public GameSettings(Minecraft par1Minecraft, File par2File)
     {
@@ -211,7 +286,7 @@
         this.ofKeyBindZoom = new KeyBinding("Zoom", 29);
         this.keyBindings = new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.ofKeyBindZoom, this.keyBindCommand};
         this.difficulty = 2;
-        this.hideGUI = false;
+        this.hideGUI = true;       // TODO: Default
         this.thirdPersonView = 0;
         this.showDebugInfo = false;
         this.showDebugProfilerChart = false;
@@ -229,6 +304,7 @@
         this.mc = par1Minecraft;
         this.optionsFile = new File(par2File, "options.txt");
         this.optionsFileOF = new File(par2File, "optionsof.txt");
+        this.optionsFileMinecrift = new File(par2File, "optionsvr.txt");
         this.loadOptions();
         Config.setGameSettings(this);
     }
@@ -240,7 +316,7 @@
         this.ofKeyBindZoom = new KeyBinding("Zoom", 29);
         this.keyBindings = new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.ofKeyBindZoom, this.keyBindCommand};
         this.difficulty = 2;
-        this.hideGUI = false;
+        this.hideGUI = true;     // TODO: Default
         this.thirdPersonView = 0;
         this.showDebugInfo = false;
         this.showDebugProfilerChart = false;
@@ -414,6 +490,159 @@
             this.chatScale = par2;
             this.mc.ingameGUI.getChatGUI().func_96132_b();
         }
+
+        // Minecrift
+        if (par1EnumOptions == EnumOptions.PLAYER_HEIGHT)
+        {
+            this.playerHeight = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.EYE_PROTRUSION)
+        {
+            this.eyeProtrusion = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.NECK_LENGTH)
+        {
+            this.neckBaseToEyeHeight = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.MOVEMENT_MULTIPLIER)
+        {
+            this.movementSpeedMultiplier = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.IPD)
+        {
+            this.ipd = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.HEAD_TRACK_PREDICTION_TIME)
+        {
+            this.headTrackPredictionTimeSecs = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.JOYSTICK_SENSITIVITY)
+        {
+            this.joystickSensitivity = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.KEYHOLE_WIDTH)
+        {
+            this.aimKeyholeWidthDegrees = par2;
+            this.lookAimYawDecoupled = par2 >= 5;
+        }
+
+        if (par1EnumOptions == EnumOptions.HUD_SCALE)
+        {
+            this.hudScale = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.RENDER_PLAYER_OFFSET)
+        {
+            this.renderPlayerOffset = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.HUD_DISTANCE)
+        {
+            this.hudDistance = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.FOV_SCALE_FACTOR)
+        {
+            this.fovScaleFactor = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.HEAD_TRACK_SENSITIVITY)
+        {
+            this.headTrackSensitivity = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.SUPERSAMPLE_SCALEFACTOR)
+        {
+            this.superSampleScaleFactor = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.DISTORTION_FIT_POINT)
+        {
+            this.distortionFitPoint = (int)Math.floor(par2);
+        }
+
+        if (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_X)
+        {
+            switch (this.posTrackHydraLoc)
+            {
+                case POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT:
+                    this.posTrackHydraLROffsetX = par2;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_LEFT:
+                    this.posTrackHydraLOffsetX = par2;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_RIGHT:
+                    this.posTrackHydraROffsetX = par2;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_TOP:
+                    this.posTrackHydraTOffsetX = par2;
+                    break;
+                case POS_TRACK_HYDRA_LOC_BACK_OF_HEAD:
+                    this.posTrackHydraBOffsetX = par2;
+                    break;
+            }
+        }
+
+        if (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Y)
+        {
+            switch (this.posTrackHydraLoc)
+            {
+                case POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT:
+                    this.posTrackHydraLROffsetY = par2;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_LEFT:
+                    this.posTrackHydraLOffsetY = par2;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_RIGHT:
+                    this.posTrackHydraROffsetY = par2;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_TOP:
+                    this.posTrackHydraTOffsetY = par2;
+                    break;
+                case POS_TRACK_HYDRA_LOC_BACK_OF_HEAD:
+                    this.posTrackHydraBOffsetY = par2;
+                    break;
+            }
+        }
+
+        if (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Z)
+        {
+            switch (this.posTrackHydraLoc)
+            {
+                case POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT:
+                    this.posTrackHydraLROffsetZ = par2;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_LEFT:
+                    this.posTrackHydraLOffsetZ = par2;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_RIGHT:
+                    this.posTrackHydraROffsetZ = par2;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_TOP:
+                    this.posTrackHydraTOffsetZ = par2;
+                    break;
+                case POS_TRACK_HYDRA_LOC_BACK_OF_HEAD:
+                    this.posTrackHydraBOffsetZ = par2;
+                    break;
+            }
+        }
+
+        if (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_DISTANCE_SCALE)
+        {
+            this.posTrackHydraDistanceScale = par2;
+        }
+
+        if (par1EnumOptions == EnumOptions.POS_TRACK_Y_AXIS_DISTANCE_SKEW)
+        {
+            this.posTrackHydraYAxisDistanceSkewAngleDeg = par2;
+        }
     }
 
     private void updateWaterOpacity()
@@ -1162,12 +1391,133 @@
             Display.setVSyncEnabled(this.enableVsync);
         }
 
+        // Minecrift
+        if (par1EnumOptions == EnumOptions.USE_VR)
+        {
+            this.useVRRenderer = !this.useVRRenderer;
+            mc.setUseVRRenderer(useVRRenderer);
+        }
+
+        if (par1EnumOptions == EnumOptions.USE_DISTORTION)
+        {
+            this.useDistortion = !this.useDistortion;
+        }
+
+        if (par1EnumOptions == EnumOptions.HEAD_TRACKING)
+        {
+            this.useHeadTracking = !this.useHeadTracking;
+        }
+
+        if (par1EnumOptions == EnumOptions.RENDER_OWN_HEADWEAR)
+        {
+            this.renderHeadWear = !this.renderHeadWear;
+        }
+
+        if (par1EnumOptions == EnumOptions.HEAD_TRACK_PREDICTION)
+        {
+            this.useHeadTrackPrediction = !this.useHeadTrackPrediction;
+        }
+
+        if (par1EnumOptions == EnumOptions.HUD_OPACITY)
+        {
+            this.useHudOpacity = !this.useHudOpacity;
+        }
+
+        if (par1EnumOptions == EnumOptions.CHROM_AB_CORRECTION)
+        {
+            this.useChromaticAbCorrection = !this.useChromaticAbCorrection;
+        }
+
+        if (par1EnumOptions == EnumOptions.PITCH_AFFECTS_CAMERA)
+        {
+            this.pitchInputAffectsCamera = !this.pitchInputAffectsCamera;
+        }
+
+        if (par1EnumOptions == EnumOptions.SUPERSAMPLING)
+        {
+            this.useSupersample = !this.useSupersample;
+        }
+
+        if (par1EnumOptions == EnumOptions.DECOUPLE_LOOK_MOVE)
+        {
+            this.lookMoveDecoupled = !this.lookMoveDecoupled;
+        }
+
+        if (par1EnumOptions == EnumOptions.DECOUPLE_LOOK_AIM_PITCH)
+        {
+            this.lookAimPitchDecoupled = !this.lookAimPitchDecoupled;
+        }
+
+        if (par1EnumOptions == EnumOptions.POS_TRACK_HYDRALOC)
+        {
+            this.posTrackHydraLoc += 1;
+            if (this.posTrackHydraLoc > POS_TRACK_HYDRA_LOC_BACK_OF_HEAD)
+            {
+                this.posTrackHydraLoc = POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT;
+            }
+        }
+
+        if (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_USE_CONTROLLER_ONE)
+        {
+            this.posTrackHydraUseController1 = !this.posTrackHydraUseController1;
+        }
+
+        if (par1EnumOptions == EnumOptions.HYDRA_USE_FILTER)
+        {
+            this.hydraUseFilter = !this.hydraUseFilter;
+        }
+
         this.saveOptions();
     }
 
     public float getOptionFloatValue(EnumOptions par1EnumOptions)
     {
-        return par1EnumOptions == EnumOptions.CLOUD_HEIGHT ? this.ofCloudsHeight : (par1EnumOptions == EnumOptions.AO_LEVEL ? this.ofAoLevel : (par1EnumOptions == EnumOptions.RENDER_DISTANCE_FINE ? (float)(this.ofRenderDistanceFine - 32) / 480.0F : (par1EnumOptions == EnumOptions.FRAMERATE_LIMIT_FINE ? (this.ofLimitFramerateFine > 0 && this.ofLimitFramerateFine < 200 ? (float)this.ofLimitFramerateFine / 200.0F : (this.enableVsync ? 0.0F : 1.0F)) : (par1EnumOptions == EnumOptions.FOV ? this.fovSetting : (par1EnumOptions == EnumOptions.GAMMA ? this.gammaSetting : (par1EnumOptions == EnumOptions.MUSIC ? this.musicVolume : (par1EnumOptions == EnumOptions.SOUND ? this.soundVolume : (par1EnumOptions == EnumOptions.SENSITIVITY ? this.mouseSensitivity : (par1EnumOptions == EnumOptions.CHAT_OPACITY ? this.chatOpacity : (par1EnumOptions == EnumOptions.CHAT_HEIGHT_FOCUSED ? this.chatHeightFocused : (par1EnumOptions == EnumOptions.CHAT_HEIGHT_UNFOCUSED ? this.chatHeightUnfocused : (par1EnumOptions == EnumOptions.CHAT_SCALE ? this.chatScale : (par1EnumOptions == EnumOptions.CHAT_WIDTH ? this.chatWidth : 0.0F)))))))))))));
+        return par1EnumOptions == EnumOptions.PLAYER_HEIGHT ? this.playerHeight :
+              (par1EnumOptions == EnumOptions.EYE_PROTRUSION ? this.eyeProtrusion :
+              (par1EnumOptions == EnumOptions.NECK_LENGTH ? this.neckBaseToEyeHeight :
+              (par1EnumOptions == EnumOptions.MOVEMENT_MULTIPLIER ? this.movementSpeedMultiplier :
+              (par1EnumOptions == EnumOptions.IPD ? this.ipd :
+              (par1EnumOptions == EnumOptions.HEAD_TRACK_PREDICTION_TIME) ? this.headTrackPredictionTimeSecs :
+              (par1EnumOptions == EnumOptions.JOYSTICK_SENSITIVITY) ? this.joystickSensitivity:
+              (par1EnumOptions == EnumOptions.KEYHOLE_WIDTH) ? this.aimKeyholeWidthDegrees:
+              (par1EnumOptions == EnumOptions.HUD_SCALE ? this.hudScale :
+              (par1EnumOptions == EnumOptions.RENDER_PLAYER_OFFSET ? this.renderPlayerOffset :
+              (par1EnumOptions == EnumOptions.HUD_DISTANCE ? this.hudDistance :
+              (par1EnumOptions == EnumOptions.FOV_SCALE_FACTOR ? this.fovScaleFactor :
+              (par1EnumOptions == EnumOptions.HEAD_TRACK_SENSITIVITY ? this.headTrackSensitivity :
+              (par1EnumOptions == EnumOptions.SUPERSAMPLE_SCALEFACTOR ? this.superSampleScaleFactor :
+              (par1EnumOptions == EnumOptions.DISTORTION_FIT_POINT ? (float)this.distortionFitPoint :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_X && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT ? this.posTrackHydraLROffsetX :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_X && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_HMD_LEFT ? this.posTrackHydraLOffsetX :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_X && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_HMD_RIGHT ? this.posTrackHydraROffsetX :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_X && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_HMD_TOP ? this.posTrackHydraTOffsetX :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_X && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_BACK_OF_HEAD ? this.posTrackHydraBOffsetX :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Y && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT ? this.posTrackHydraLROffsetY :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Y && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_HMD_LEFT ? this.posTrackHydraLOffsetY :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Y && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_HMD_RIGHT ? this.posTrackHydraROffsetY :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Y && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_HMD_TOP ? this.posTrackHydraTOffsetY :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Y && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_BACK_OF_HEAD ? this.posTrackHydraBOffsetY :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Z && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT ? this.posTrackHydraLROffsetZ :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Z && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_HMD_LEFT ? this.posTrackHydraLOffsetZ :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Z && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_HMD_RIGHT ? this.posTrackHydraROffsetZ :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Z && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_HMD_TOP ? this.posTrackHydraTOffsetZ :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Z && this.posTrackHydraLoc == POS_TRACK_HYDRA_LOC_BACK_OF_HEAD ? this.posTrackHydraBOffsetZ :
+              (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_DISTANCE_SCALE ? this.posTrackHydraDistanceScale :
+              (par1EnumOptions == EnumOptions.POS_TRACK_Y_AXIS_DISTANCE_SKEW ? this.posTrackHydraYAxisDistanceSkewAngleDeg :
+              (par1EnumOptions == EnumOptions.CLOUD_HEIGHT ? this.ofCloudsHeight :
+              (par1EnumOptions == EnumOptions.AO_LEVEL ? this.ofAoLevel :
+              (par1EnumOptions == EnumOptions.RENDER_DISTANCE_FINE ? (float)(this.ofRenderDistanceFine - 32) / 480.0F :
+              (par1EnumOptions == EnumOptions.FRAMERATE_LIMIT_FINE ? (this.ofLimitFramerateFine > 0 && this.ofLimitFramerateFine < 200 ? (float)this.ofLimitFramerateFine / 200.0F : (this.enableVsync ? 0.0F : 1.0F)) :
+              (par1EnumOptions == EnumOptions.FOV ? this.fovSetting :
+              (par1EnumOptions == EnumOptions.GAMMA ? this.gammaSetting :
+              (par1EnumOptions == EnumOptions.MUSIC ? this.musicVolume :
+              (par1EnumOptions == EnumOptions.SOUND ? this.soundVolume :
+              (par1EnumOptions == EnumOptions.SENSITIVITY ? this.mouseSensitivity :
+              (par1EnumOptions == EnumOptions.CHAT_OPACITY ? this.chatOpacity :
+              (par1EnumOptions == EnumOptions.CHAT_HEIGHT_FOCUSED ? this.chatHeightFocused :
+              (par1EnumOptions == EnumOptions.CHAT_HEIGHT_UNFOCUSED ? this.chatHeightUnfocused :
+              (par1EnumOptions == EnumOptions.CHAT_SCALE ? this.chatScale :
+              (par1EnumOptions == EnumOptions.CHAT_WIDTH ? this.chatWidth : 0.0F))))))))))))))))))))))))))))))))))))))))));
     }
 
     public boolean getOptionOrdinalValue(EnumOptions par1EnumOptions)
@@ -1625,6 +1975,229 @@
         {
             return this.heldItemTooltips ? var4 + "ON" : var4 + "OFF";
         }
+
+        // Minecrift
+        else if (par1EnumOptions == EnumOptions.USE_VR)
+        {
+            return this.useVRRenderer ? var4 + "ON" : var4 + "OFF";
+        }
+        else if (par1EnumOptions == EnumOptions.PLAYER_HEIGHT)
+        {
+            return var4 + String.format("%.2fm", new Object[] { Float.valueOf(this.playerHeight) });
+        }
+        else if (par1EnumOptions == EnumOptions.EYE_PROTRUSION)
+        {
+            return var4 + String.format("%.3fm", new Object[] { Float.valueOf(this.eyeProtrusion) });
+        }
+        else if (par1EnumOptions == EnumOptions.NECK_LENGTH)
+        {
+            return var4 + String.format("%.3fm", new Object[] { Float.valueOf(this.neckBaseToEyeHeight) });
+        }
+        else if (par1EnumOptions == EnumOptions.MOVEMENT_MULTIPLIER)
+        {
+            return var4 + String.format("%.2f", new Object[] { Float.valueOf(this.movementSpeedMultiplier) });
+        }
+        else if (par1EnumOptions == EnumOptions.USE_DISTORTION)
+        {
+            return this.useDistortion ? var4 + "ON" : var4 + "OFF";
+        }
+        else if (par1EnumOptions == EnumOptions.HEAD_TRACKING)
+        {
+            return this.useHeadTracking ? var4 + "ON" : var4 + "OFF";
+        }
+        else if (par1EnumOptions == EnumOptions.HEAD_TRACK_PREDICTION)
+        {
+            return this.useHeadTrackPrediction ? var4 + "ON" : var4 + "OFF";
+        }
+        else if (par1EnumOptions == EnumOptions.IPD)
+        {
+            return var4 + String.format("%.1fmm", new Object[] { Float.valueOf(this.ipd * 1000) });
+        }
+        else if (par1EnumOptions == EnumOptions.HEAD_TRACK_PREDICTION_TIME)
+        {
+            return var4 + String.format("%.0fms", new Object[] { Float.valueOf(this.headTrackPredictionTimeSecs * 1000) });
+        }
+        else if (par1EnumOptions == EnumOptions.HUD_OPACITY)
+        {
+            return this.useHudOpacity ? var4 + "ON" : var4 + "OFF";
+        }
+        else if (par1EnumOptions == EnumOptions.RENDER_OWN_HEADWEAR)
+        {
+            return this.renderHeadWear ? var4 + "ON" : var4 + "OFF";
+        }
+        else if (par1EnumOptions == EnumOptions.CHROM_AB_CORRECTION)
+        {
+            return this.useChromaticAbCorrection ? var4 + "ON" : var4 + "OFF";
+        }
+        else if (par1EnumOptions == EnumOptions.HUD_SCALE)
+        {
+            return var4 + String.format("%.2f", new Object[] { Float.valueOf(this.hudScale) });
+        }
+        else if (par1EnumOptions == EnumOptions.RENDER_PLAYER_OFFSET)
+        {
+            if (this.renderPlayerOffset < 0.01f)
+                return var4 + "None";
+            else
+                return var4 + String.format("%.2fcm", new Object[] { Float.valueOf(this.renderPlayerOffset) });
+        }
+        else if (par1EnumOptions == EnumOptions.PITCH_AFFECTS_CAMERA)
+        {
+            return this.pitchInputAffectsCamera ? var4 + "ON" : var4 + "OFF";
+        }
+        else if (par1EnumOptions == EnumOptions.HUD_DISTANCE)
+        {
+            return var4 + String.format("%.2f", new Object[] { Float.valueOf(this.hudDistance) });
+        }
+        else if (par1EnumOptions == EnumOptions.FOV_SCALE_FACTOR)
+        {
+            return var4 + String.format("%.2f", new Object[] { Float.valueOf(this.fovScaleFactor) });
+        }
+        else if (par1EnumOptions == EnumOptions.DISTORTION_FIT_POINT)
+        {
+            if (this.distortionFitPoint < 1)
+                return var4 + "None";
+            else if (this.distortionFitPoint > 13)
+                return var4 + "Large";
+            else if (this.distortionFitPoint == 5)
+                return var4 + "Normal";
+            else
+                return var4 + String.format("%.0f", new Object[] { Float.valueOf(this.distortionFitPoint) });
+        }
+        else if (par1EnumOptions == EnumOptions.HEAD_TRACK_SENSITIVITY)
+        {
+            return var4 + String.format("%.2f", new Object[] { Float.valueOf(this.headTrackSensitivity) });
+        }
+        else if (par1EnumOptions == EnumOptions.SUPERSAMPLING)
+        {
+            return this.useSupersample ? var4 + "ON" : var4 + "OFF";
+        }
+        else if (par1EnumOptions == EnumOptions.SUPERSAMPLE_SCALEFACTOR)
+        {
+            return var4 + String.format("%.1f", new Object[] { Float.valueOf(this.superSampleScaleFactor) });
+        }
+        else if (par1EnumOptions == EnumOptions.DECOUPLE_LOOK_MOVE)
+        {
+            return this.lookMoveDecoupled? var4 + "ON" : var4 + "OFF";
+        }
+        else if (par1EnumOptions == EnumOptions.DECOUPLE_LOOK_AIM_PITCH)
+        {
+            return this.lookAimPitchDecoupled? var4 + "ON" : var4 + "OFF";
+        }
+        else if (par1EnumOptions == EnumOptions.JOYSTICK_SENSITIVITY)
+        {
+            return var4 + String.format("%.1f", new Object[] { Float.valueOf(this.joystickSensitivity) });
+        }
+        else if (par1EnumOptions == EnumOptions.KEYHOLE_WIDTH)
+        {
+        	if(this.aimKeyholeWidthDegrees>=5)
+	            return var4 + String.format("%.0f°", new Object[] { Float.valueOf(this.aimKeyholeWidthDegrees) });
+        	else
+        		return var4 + "Fully Coupled";
+        }
+        else if (par1EnumOptions == EnumOptions.POS_TRACK_HYDRALOC)
+        {
+            String s = var4 + "Unknown";
+
+            if (this.posTrackHydraLoc >= 0 && this.posTrackHydraLoc < POS_TRACK_HYDRA_LOC.length)
+                s = var4 + POS_TRACK_HYDRA_LOC[this.posTrackHydraLoc];
+
+            return s;
+        }
+        else if (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_X)
+        {
+            float value = 0.0f;
+
+            switch (this.posTrackHydraLoc)
+            {
+                case POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT:
+                    value = this.posTrackHydraLROffsetX;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_LEFT:
+                    value = this.posTrackHydraLOffsetX;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_RIGHT:
+                    value = this.posTrackHydraROffsetX;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_TOP:
+                    value = this.posTrackHydraTOffsetX;
+                    break;
+                case POS_TRACK_HYDRA_LOC_BACK_OF_HEAD:
+                    value = this.posTrackHydraBOffsetX;
+                    break;
+            }
+
+            return var4 + String.format("%.0fmm", new Object[] { Float.valueOf(value * 1000) });
+        }
+        else if (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Y)
+        {
+            float value = 0.0f;
+
+            switch (this.posTrackHydraLoc)
+            {
+                case POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT:
+                    value = this.posTrackHydraLROffsetY;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_LEFT:
+                    value = this.posTrackHydraLOffsetY;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_RIGHT:
+                    value = this.posTrackHydraROffsetY;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_TOP:
+                    value = this.posTrackHydraTOffsetY;
+                    break;
+                case POS_TRACK_HYDRA_LOC_BACK_OF_HEAD:
+                    value = this.posTrackHydraBOffsetY;
+                    break;
+            }
+
+            return var4 + String.format("%.0fmm", new Object[] { Float.valueOf(value * 1000) });
+        }
+        else if (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_OFFSET_Z)
+        {
+            float value = 0.0f;
+
+            switch (this.posTrackHydraLoc)
+            {
+                case POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT:
+                    value = this.posTrackHydraLROffsetZ;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_LEFT:
+                    value = this.posTrackHydraLOffsetZ;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_RIGHT:
+                    value = this.posTrackHydraROffsetZ;
+                    break;
+                case POS_TRACK_HYDRA_LOC_HMD_TOP:
+                    value = this.posTrackHydraTOffsetZ;
+                    break;
+                case POS_TRACK_HYDRA_LOC_BACK_OF_HEAD:
+                    value = this.posTrackHydraBOffsetZ;
+                    break;
+            }
+
+            return var4 + String.format("%.0fmm", new Object[] { Float.valueOf(value * 1000) });
+        }
+        else if (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_DISTANCE_SCALE)
+        {
+            return var4 + String.format("%.3f", new Object[] { Float.valueOf(this.posTrackHydraDistanceScale) });
+        }
+        else if (par1EnumOptions == EnumOptions.POS_TRACK_Y_AXIS_DISTANCE_SKEW)
+    {
+        return var4 + String.format("%.1f", new Object[] { Float.valueOf(this.posTrackHydraYAxisDistanceSkewAngleDeg) });
+    }
+        else if (par1EnumOptions == EnumOptions.POS_TRACK_HYDRA_USE_CONTROLLER_ONE)
+        {
+            if (this.posTrackHydraLoc == GameSettings.POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT)
+                return var4 + "Both";
+
+            return this.posTrackHydraUseController1? var4 + "Left" : var4 + "Right";
+        }
+        else if (par1EnumOptions == EnumOptions.HYDRA_USE_FILTER)
+        {
+            return this.hydraUseFilter ? var4 + "ON" : var4 + "OFF";
+        }
+        // End Minecrift
         else if (par1EnumOptions.getEnumFloat())
         {
             float var10 = this.getOptionFloatValue(par1EnumOptions);
@@ -2319,6 +2892,302 @@
             Config.dbg("Failed to load options");
             var6.printStackTrace();
         }
+
+        // Load Minecrift options
+        try
+        {
+            BufferedReader var1;
+            boolean useMinecriftFile = true;
+
+            if (!this.optionsFileMinecrift.exists())
+            {
+                useMinecriftFile = false;
+                if (!this.optionsFile.exists())
+                {
+                    return;
+                }
+            }
+
+            if (useMinecriftFile)
+            {
+                var1 = new BufferedReader(new FileReader(this.optionsFileMinecrift));
+            }
+            else
+            {
+                var1 = new BufferedReader(new FileReader(this.optionsFile));
+            }
+
+            String var2 = "";
+
+            while ((var2 = var1.readLine()) != null)
+            {
+                try
+                {
+                    String[] var3 = var2.split(":");
+
+                    if (var3[0].equals("useVRRenderer"))
+                    {
+                        this.useVRRenderer = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("playerHeight"))
+                    {
+                        this.playerHeight = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("neckBaseToEyeHeight"))
+                    {
+                        this.neckBaseToEyeHeight = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("eyeProtrusion"))
+                    {
+                        this.eyeProtrusion = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("ipd"))
+                    {
+                        this.ipd = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("headTrackPredictionTimeSecs"))
+                    {
+                        this.headTrackPredictionTimeSecs = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("headTrackerPluginID"))
+                    {
+                        this.headTrackerPluginID = var3[1];
+                    }
+
+                    if (var3[0].equals("headPositionPluginID"))
+                    {
+                        this.headPositionPluginID = var3[1];
+                    }
+
+                    if (var3[0].equals("hmdPluginID"))
+                    {
+                        this.hmdPluginID = var3[1];
+                    }
+
+                    if (var3[0].equals("controllerPluginID"))
+                    {
+                        this.controllerPluginID = var3[1];
+                    }
+
+                    if (var3[0].equals("hudOpacity"))
+                    {
+                        this.useHudOpacity = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("useHeadTrackPrediction"))
+                    {
+                        this.useHeadTrackPrediction = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("renderHeadWear"))
+                    {
+                        this.renderHeadWear = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("useChromaticAbCorrection"))
+                    {
+                        this.useChromaticAbCorrection = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("hudScale"))
+                    {
+                        this.hudScale = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("renderPlayerOffset"))
+                    {
+                        this.renderPlayerOffset = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("allowMousePitchInput"))
+                    {
+                        this.pitchInputAffectsCamera = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("hudDistance"))
+                    {
+                        this.hudDistance = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("useSupersample"))
+                    {
+                        this.useSupersample = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("superSampleScaleFactor"))
+                    {
+                        this.superSampleScaleFactor = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("fovScaleFactor"))
+                    {
+                        this.fovScaleFactor = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("distortionFitPoint"))
+                    {
+                        this.distortionFitPoint = Integer.parseInt(var3[1]);
+                    }
+
+                    if (var3[0].equals("headTrackSensitivity"))
+                    {
+                        this.headTrackSensitivity = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("movementSpeedMultiplier"))
+                    {
+                        this.movementSpeedMultiplier = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("lookMoveDecoupled"))
+                    {
+                        this.lookMoveDecoupled = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("lookAimPitchDecoupled"))
+                    {
+                        this.lookAimPitchDecoupled = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("posTrackHydraLoc"))
+                    {
+                        this.posTrackHydraLoc = Integer.parseInt(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraLROffsetX"))
+                    {
+                        this.posTrackHydraLROffsetX = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraLROffsetY"))
+                    {
+                        this.posTrackHydraLROffsetY = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraLROffsetZ"))
+                    {
+                        this.posTrackHydraLROffsetZ = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraLOffsetX"))
+                    {
+                        this.posTrackHydraLOffsetX = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraLOffsetY"))
+                    {
+                        this.posTrackHydraLOffsetY = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraLOffsetZ"))
+                    {
+                        this.posTrackHydraLOffsetZ = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraROffsetX"))
+                    {
+                        this.posTrackHydraROffsetX = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraROffsetY"))
+                    {
+                        this.posTrackHydraROffsetY = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraROffsetZ"))
+                    {
+                        this.posTrackHydraROffsetZ = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraTOffsetX"))
+                    {
+                        this.posTrackHydraTOffsetX = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraTOffsetY"))
+                    {
+                        this.posTrackHydraTOffsetY = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraTOffsetZ"))
+                    {
+                        this.posTrackHydraTOffsetZ = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraBOffsetX"))
+                    {
+                        this.posTrackHydraBOffsetX = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraBOffsetY"))
+                    {
+                        this.posTrackHydraBOffsetY = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraBOffsetZ"))
+                    {
+                        this.posTrackHydraBOffsetZ = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraDistanceScale"))
+                    {
+                        this.posTrackHydraDistanceScale = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("posTrackHydraUseController1"))
+                    {
+                        this.posTrackHydraUseController1 = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("hydraUseFilter"))
+                    {
+                        this.hydraUseFilter = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("joystickSensitivity"))
+                    {
+                        this.joystickSensitivity = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("keyholeWidth"))
+                    {
+                        this.aimKeyholeWidthDegrees = this.parseFloat(var3[1]);
+                    	this.lookAimYawDecoupled =  this.aimKeyholeWidthDegrees >= 5;
+                    }
+
+                    if (var3[0].equals("posTrackHydraYAxisDistanceSkewAngleDeg"))
+                    {
+                        this.posTrackHydraYAxisDistanceSkewAngleDeg = this.parseFloat(var3[1]);
+                    }
+//                    for (int var4 = 0; var4 < this.keyBindings.length; ++var4)
+//                    {
+//                        if (var3[0].equals("key_" + this.keyBindings[var4].keyDescription))
+//                        {
+//                            this.keyBindings[var4].keyCode = Integer.parseInt(var3[1]);
+//                        }
+//                    }
+                }
+                catch (Exception var7)
+                {
+                    this.mc.getLogAgent().logWarning("Skipping bad VR option: " + var2);
+                    var7.printStackTrace();
+                }
+            }
+
+            //KeyBinding.resetKeyBindingArrayAndHash();
+            var1.close();
+        }
+        catch (Exception var8)
+        {
+            this.mc.getLogAgent().logWarning("Failed to load VR options!");
+            var8.printStackTrace();
+        }
     }
 
     /**
@@ -2479,6 +3348,68 @@
             var3.printStackTrace();
         }
 
+        // Save Minecrift settings
+        try
+        {
+            var5 = new PrintWriter(new FileWriter(this.optionsFileMinecrift));
+
+            var5.println("useVRRenderer:"+ this.useVRRenderer );
+            var5.println("playerHeight:" + this.playerHeight );
+            var5.println("eyeProtrusion:" + this.eyeProtrusion );
+            var5.println("neckBaseToEyeHeight:" + this.neckBaseToEyeHeight );
+            var5.println("headTrackerPluginID:"+ this.headTrackerPluginID);
+            var5.println("headPositionPluginID:"+ this.headPositionPluginID);
+            var5.println("hmdPluginID:"+ this.hmdPluginID);
+            var5.println("controllerPluginID:"+ this.controllerPluginID);
+            var5.println("ipd:" + this.ipd);
+            var5.println("headTrackPredictionTimeSecs:" + this.headTrackPredictionTimeSecs);
+            var5.println("hudOpacity:" + this.useHudOpacity);
+            var5.println("useHeadTrackPrediction:" + this.useHeadTrackPrediction);
+            var5.println("renderHeadWear:" + this.renderHeadWear);
+            var5.println("useChromaticAbCorrection:" + this.useChromaticAbCorrection);
+            var5.println("hudScale:" + this.hudScale);
+            var5.println("renderPlayerOffset:" + this.renderPlayerOffset);
+            var5.println("allowMousePitchInput:" + this.pitchInputAffectsCamera);
+            var5.println("hudDistance:" + this.hudDistance);
+            var5.println("useSupersample:" + this.useSupersample);
+            var5.println("superSampleScaleFactor:" + this.superSampleScaleFactor);
+            var5.println("fovScaleFactor:" + this.fovScaleFactor);
+            var5.println("distortionFitPoint:" + this.distortionFitPoint);
+            var5.println("headTrackSensitivity:" + this.headTrackSensitivity);
+            var5.println("movementSpeedMultiplier:" + this.movementSpeedMultiplier);
+            var5.println("lookMoveDecoupled:" + this.lookMoveDecoupled);
+            var5.println("lookAimPitchDecoupled:" + this.lookAimPitchDecoupled);
+            var5.println("posTrackHydraLoc:" + this.posTrackHydraLoc);
+            var5.println("posTrackHydraLROffsetX:" + this.posTrackHydraLROffsetX);
+            var5.println("posTrackHydraLROffsetY:" + this.posTrackHydraLROffsetY);
+            var5.println("posTrackHydraLROffsetZ:" + this.posTrackHydraLROffsetZ);
+            var5.println("posTrackHydraLOffsetX:" + this.posTrackHydraLOffsetX);
+            var5.println("posTrackHydraLOffsetY:" + this.posTrackHydraLOffsetY);
+            var5.println("posTrackHydraLOffsetZ:" + this.posTrackHydraLOffsetZ);
+            var5.println("posTrackHydraROffsetX:" + this.posTrackHydraROffsetX);
+            var5.println("posTrackHydraROffsetY:" + this.posTrackHydraROffsetY);
+            var5.println("posTrackHydraROffsetZ:" + this.posTrackHydraROffsetZ);
+            var5.println("posTrackHydraTOffsetX:" + this.posTrackHydraTOffsetX);
+            var5.println("posTrackHydraTOffsetY:" + this.posTrackHydraTOffsetY);
+            var5.println("posTrackHydraTOffsetZ:" + this.posTrackHydraTOffsetZ);
+            var5.println("posTrackHydraBOffsetX:" + this.posTrackHydraBOffsetX);
+            var5.println("posTrackHydraBOffsetY:" + this.posTrackHydraBOffsetY);
+            var5.println("posTrackHydraBOffsetZ:" + this.posTrackHydraBOffsetZ);
+            var5.println("posTrackHydraDistanceScale:" + this.posTrackHydraDistanceScale);
+            var5.println("posTrackHydraUseController1:" + this.posTrackHydraUseController1);
+            var5.println("posTrackHydraYAxisDistanceSkewAngleDeg:" + this.posTrackHydraYAxisDistanceSkewAngleDeg);
+            var5.println("hydraUseFilter:" + this.hydraUseFilter);
+            var5.println("joystickSensitivity:" + this.joystickSensitivity);
+            var5.println("keyholeWidth:" + this.aimKeyholeWidthDegrees);
+
+            var5.close();
+        }
+        catch (Exception var3)
+        {
+            Config.dbg("Failed to save VR options");
+            var3.printStackTrace();
+        }
+
         this.sendSettingsToServer();
     }
 
@@ -2657,4 +3588,74 @@
     {
         return this.ofRenderDistanceFine > 64 && this.clouds;
     }
+
+
+    public float getPosTrackHydraOffsetX()
+    {
+        float par2 = 0.0f;
+
+        switch (this.posTrackHydraLoc)
+        {
+            case POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT:
+                par2 = this.posTrackHydraLROffsetX;
+                break;
+            case POS_TRACK_HYDRA_LOC_HMD_LEFT:
+                par2 = this.posTrackHydraLOffsetX;
+                break;
+            case POS_TRACK_HYDRA_LOC_HMD_RIGHT:
+                par2 = this.posTrackHydraROffsetX;
+                break;
+            case POS_TRACK_HYDRA_LOC_HMD_TOP:
+                par2 = this.posTrackHydraTOffsetX;
+                break;
+        }
+
+        return par2;
+    }
+
+    public float getPosTrackHydraOffsetY()
+    {
+        float par2 = 0.0f;
+
+        switch (this.posTrackHydraLoc)
+        {
+            case POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT:
+                par2 = this.posTrackHydraLROffsetY;
+                break;
+            case POS_TRACK_HYDRA_LOC_HMD_LEFT:
+                par2 = this.posTrackHydraLOffsetY;
+                break;
+            case POS_TRACK_HYDRA_LOC_HMD_RIGHT:
+                par2 = this.posTrackHydraROffsetY;
+                break;
+            case POS_TRACK_HYDRA_LOC_HMD_TOP:
+                par2 = this.posTrackHydraTOffsetY;
+                break;
+        }
+
+        return par2;
+    }
+
+    public float getPosTrackHydraOffsetZ()
+    {
+        float par2 = 0.0f;
+
+        switch (this.posTrackHydraLoc)
+        {
+            case POS_TRACK_HYDRA_LOC_HMD_LEFT_AND_RIGHT:
+                par2 = this.posTrackHydraLROffsetZ;
+                break;
+            case POS_TRACK_HYDRA_LOC_HMD_LEFT:
+                par2 = this.posTrackHydraLOffsetZ;
+                break;
+            case POS_TRACK_HYDRA_LOC_HMD_RIGHT:
+                par2 = this.posTrackHydraROffsetZ;
+                break;
+            case POS_TRACK_HYDRA_LOC_HMD_TOP:
+                par2 = this.posTrackHydraTOffsetZ;
+                break;
+        }
+
+        return par2;
+    }
 }
