--- a/net/minecraft/src/GameSettings.java
+++ b/net/minecraft/src/GameSettings.java
@@ -28,10 +28,13 @@
     public float musicVolume = 1.0F;
     public float soundVolume = 1.0F;
     public float mouseSensitivity = 0.5F;
+
     public boolean invertMouse = false;
     public int renderDistance = 0;
     public boolean viewBobbing = true;
     public boolean anaglyph = false;
+    public boolean useVR    = true;
+    public String vrImplementation = "de.fruitfly.ovr.OculusRift";
 
     /** Advanced OpenGL */
     public boolean advancedOpengl = false;
@@ -133,6 +136,33 @@
     public boolean enableVsync = true;
     public boolean hideServerAddress = false;
 
+    // TODO: Additional Oculus stuff
+	public float playerHeight = 1.74f;
+	public float eyeProtrusion = 0.185f;
+	public float neckBaseToEyeHeight = 0.225f;
+    public boolean useDistortion = true;
+    public boolean useHeadTracking = true;
+    public boolean useHeadTrackPrediction = true;
+    public float ipd = 0.0635F;
+    public boolean useHudOpacity = false;
+    public boolean renderHeadWear = false;
+    public boolean useChromaticAbCorrection = false;
+    public float hudScale = 1.0f;
+    public boolean allowMousePitchInput = false;
+    public float hudDistance = 1.0f;
+    public float fovScaleFactor = 1.0f;
+    public int distortionFitPoint = 5;
+    public float headTrackSensitivity = 1.0f;
+
+    public boolean lockHud = false;
+    public float lastHudYaw = 1000.0f;
+    public float lastHudPitch = 1000.0f;
+    public float lastHudRoll = 1000.0f;
+
+    public boolean useSupersample = false;
+    public float superSampleScaleFactor = 2.0f;
+    public boolean useMipMaps = false;
+
     /**
      * Whether to show advanced information on item tooltips, toggled by F3+H
      */
@@ -175,6 +205,7 @@
     /** true if debug info should be displayed instead of version */
     public boolean showDebugInfo;
     public boolean showDebugProfilerChart;
+	public boolean showOculusDebugInfo;
 
     /** The lastServer string. */
     public String lastServer;
@@ -204,6 +235,7 @@
     public String language;
     private File optionsFileOF;
 
+
     public GameSettings(Minecraft par1Minecraft, File par2File)
     {
         this.renderDistance = 1;
@@ -211,7 +243,7 @@
         this.ofKeyBindZoom = new KeyBinding("Zoom", 29);
         this.keyBindings = new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.ofKeyBindZoom, this.keyBindCommand};
         this.difficulty = 2;
-        this.hideGUI = false;
+        this.hideGUI = true;       // TODO: Default
         this.thirdPersonView = 0;
         this.showDebugInfo = false;
         this.showDebugProfilerChart = false;
@@ -240,7 +272,7 @@
         this.ofKeyBindZoom = new KeyBinding("Zoom", 29);
         this.keyBindings = new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.ofKeyBindZoom, this.keyBindCommand};
         this.difficulty = 2;
-        this.hideGUI = false;
+        this.hideGUI = true;     // TODO: Default
         this.thirdPersonView = 0;
         this.showDebugInfo = false;
         this.showDebugProfilerChart = false;
@@ -1677,6 +1709,98 @@
                         this.mouseSensitivity = this.parseFloat(var3[1]);
                     }
 
+                    // TODO: Load oculus settings
+                    if (var3[0].equals("useVR"))
+                    {
+                        this.useVR = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("playerHeight"))
+                    {
+                        this.playerHeight = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("neckBaseToEyeHeight"))
+                    {
+                        this.neckBaseToEyeHeight = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("eyeProtrusion"))
+                    {
+                        this.eyeProtrusion = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("ipd"))
+                    {
+                        this.ipd = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("vrImplementation"))
+                    {
+                        this.vrImplementation = var3[1];
+                    }
+
+                    if (var3[0].equals("hudOpacity"))
+                    {
+                        this.useHudOpacity = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("useHeadTrackPrediction"))
+                    {
+                        this.useHeadTrackPrediction = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("renderHeadWear"))
+                    {
+                        this.renderHeadWear = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("useChromaticAbCorrection"))
+                    {
+                        this.useChromaticAbCorrection = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("hudScale"))
+                    {
+                        this.hudScale = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("allowMousePitchInput"))
+                    {
+                        this.allowMousePitchInput = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("hudDistance"))
+                    {
+                        this.hudDistance = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("useSupersample"))
+                    {
+                        this.useSupersample = var3[1].equals("true");
+                    }
+
+                    if (var3[0].equals("superSampleScaleFactor"))
+                    {
+                        this.superSampleScaleFactor = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("fovScaleFactor"))
+                    {
+                        this.fovScaleFactor = this.parseFloat(var3[1]);
+                    }
+
+                    if (var3[0].equals("distortionFitPoint"))
+                    {
+                        this.distortionFitPoint = Integer.parseInt(var3[1]);
+                    }
+
+                    if (var3[0].equals("headTrackSensitivity"))
+                    {
+                        this.headTrackSensitivity = this.parseFloat(var3[1]);
+                    }
+                    //////
+
                     if (var3[0].equals("fov"))
                     {
                         this.fovSetting = this.parseFloat(var3[1]);
@@ -2365,6 +2489,27 @@
             var5.println("difficulty:" + this.difficulty);
             var5.println("fancyGraphics:" + this.fancyGraphics);
             var5.println("ao:" + this.ambientOcclusion);
+
+            // TODO: Save oculus settings
+            var5.println("useVR:"+ this.useVR );
+            var5.println("playerHeight:" + this.playerHeight );
+            var5.println("eyeProtrusion:" + this.eyeProtrusion );
+            var5.println("neckBaseToEyeHeight:" + this.neckBaseToEyeHeight );
+            var5.println("vrImplementation:"+ this.vrImplementation );
+            var5.println("ipd:" + this.ipd);
+            var5.println("hudOpacity:" + this.useHudOpacity);
+            var5.println("useHeadTrackPrediction:" + this.useHeadTrackPrediction);
+            var5.println("renderHeadWear:" + this.renderHeadWear);
+            var5.println("useChromaticAbCorrection:" + this.useChromaticAbCorrection);
+            var5.println("hudScale:" + this.hudScale);
+            var5.println("allowMousePitchInput:" + this.allowMousePitchInput);
+            var5.println("hudDistance:" + this.hudDistance);
+            var5.println("useSupersample:" + this.useSupersample);
+            var5.println("superSampleScaleFactor:" + this.superSampleScaleFactor);
+            var5.println("fovScaleFactor:" + this.fovScaleFactor);
+            var5.println("distortionFitPoint:" + this.distortionFitPoint);
+            var5.println("headTrackSensitivity:" + this.headTrackSensitivity);
+
             var5.println("clouds:" + this.clouds);
             var5.println("skin:" + this.skin);
             var5.println("lastServer:" + this.lastServer);
