--- a/net/minecraft/src/RenderBlocks.java
+++ b/net/minecraft/src/RenderBlocks.java
@@ -271,7 +271,6 @@
     public float colorBlueTopRight;
     public boolean aoLightValuesCalculated;
     public float aoLightValueOpaque = 0.2F;
-    public boolean betterSnowEnabled = true;
 
     public RenderBlocks(IBlockAccess par1IBlockAccess)
     {
@@ -410,72 +409,51 @@
             {
                 case 0:
                     return this.renderStandardBlock(par1Block, par2, par3, par4);
-
                 case 1:
                     return this.renderCrossedSquares(par1Block, par2, par3, par4);
-
                 case 2:
                     return this.renderBlockTorch(par1Block, par2, par3, par4);
-
                 case 3:
                     return this.renderBlockFire((BlockFire)par1Block, par2, par3, par4);
-
                 case 4:
                     return this.renderBlockFluids(par1Block, par2, par3, par4);
-
                 case 5:
                     return this.renderBlockRedstoneWire(par1Block, par2, par3, par4);
-
                 case 6:
                     return this.renderBlockCrops(par1Block, par2, par3, par4);
-
                 case 7:
                     return this.renderBlockDoor(par1Block, par2, par3, par4);
-
                 case 8:
                     return this.renderBlockLadder(par1Block, par2, par3, par4);
-
                 case 9:
                     return this.renderBlockMinecartTrack((BlockRailBase)par1Block, par2, par3, par4);
-
                 case 10:
                     return this.renderBlockStairs((BlockStairs)par1Block, par2, par3, par4);
-
                 case 11:
                     return this.renderBlockFence((BlockFence)par1Block, par2, par3, par4);
-
                 case 12:
                     return this.renderBlockLever(par1Block, par2, par3, par4);
-
                 case 13:
                     return this.renderBlockCactus(par1Block, par2, par3, par4);
-
                 case 14:
                     return this.renderBlockBed(par1Block, par2, par3, par4);
-
                 case 15:
                     return this.renderBlockRepeater((BlockRedstoneRepeater)par1Block, par2, par3, par4);
-
                 case 16:
                     return this.renderPistonBase(par1Block, par2, par3, par4, false);
-
                 case 17:
                     return this.renderPistonExtension(par1Block, par2, par3, par4, true);
-
                 case 18:
                     return this.renderBlockPane((BlockPane)par1Block, par2, par3, par4);
-
                 case 19:
                     return this.renderBlockStem(par1Block, par2, par3, par4);
-
                 case 20:
                     return this.renderBlockVine(par1Block, par2, par3, par4);
-
                 case 21:
                     return this.renderBlockFenceGate((BlockFenceGate)par1Block, par2, par3, par4);
-
                 case 22:
                 default:
+
                     if (Reflector.ModLoader.exists())
                     {
                         return Reflector.callBoolean(Reflector.ModLoader_renderWorldBlock, new Object[] {this, this.blockAccess, Integer.valueOf(par2), Integer.valueOf(par3), Integer.valueOf(par4), par1Block, Integer.valueOf(var5)});
@@ -492,52 +470,36 @@
 
                 case 23:
                     return this.renderBlockLilyPad(par1Block, par2, par3, par4);
-
                 case 24:
                     return this.renderBlockCauldron((BlockCauldron)par1Block, par2, par3, par4);
-
                 case 25:
                     return this.renderBlockBrewingStand((BlockBrewingStand)par1Block, par2, par3, par4);
-
                 case 26:
                     return this.renderBlockEndPortalFrame((BlockEndPortalFrame)par1Block, par2, par3, par4);
-
                 case 27:
                     return this.renderBlockDragonEgg((BlockDragonEgg)par1Block, par2, par3, par4);
-
                 case 28:
                     return this.renderBlockCocoa((BlockCocoa)par1Block, par2, par3, par4);
-
                 case 29:
                     return this.renderBlockTripWireSource(par1Block, par2, par3, par4);
-
                 case 30:
                     return this.renderBlockTripWire(par1Block, par2, par3, par4);
-
                 case 31:
                     return this.renderBlockLog(par1Block, par2, par3, par4);
-
                 case 32:
                     return this.renderBlockWall((BlockWall)par1Block, par2, par3, par4);
-
                 case 33:
                     return this.renderBlockFlowerpot((BlockFlowerPot)par1Block, par2, par3, par4);
-
                 case 34:
                     return this.renderBlockBeacon((BlockBeacon)par1Block, par2, par3, par4);
-
                 case 35:
                     return this.renderBlockAnvil((BlockAnvil)par1Block, par2, par3, par4);
-
                 case 36:
                     return this.renderBlockRedstoneLogic((BlockRedstoneLogic)par1Block, par2, par3, par4);
-
                 case 37:
                     return this.renderBlockComparator((BlockComparator)par1Block, par2, par3, par4);
-
                 case 38:
                     return this.renderBlockHopper((BlockHopper)par1Block, par2, par3, par4);
-
                 case 39:
                     return this.renderBlockQuartz(par1Block, par2, par3, par4);
             }
@@ -705,14 +667,11 @@
             case 0:
                 var50 = 5;
                 break;
-
             case 1:
                 var50 = 3;
-
             case 2:
             default:
                 break;
-
             case 3:
                 var50 = 2;
         }
@@ -861,14 +820,14 @@
         this.renderFaceXNeg(par1BlockCauldron, (double)((float)par2 + 1.0F - var11), (double)par3, (double)par4, var20);
         this.renderFaceZPos(par1BlockCauldron, (double)par2, (double)par3, (double)((float)par4 - 1.0F + var11), var20);
         this.renderFaceZNeg(par1BlockCauldron, (double)par2, (double)par3, (double)((float)par4 + 1.0F - var11), var20);
-        Icon var21 = BlockCauldron.getCauldronIcon("inner");
+        Icon var21 = BlockCauldron.func_94375_b("inner");
         this.renderFaceYPos(par1BlockCauldron, (double)par2, (double)((float)par3 - 1.0F + 0.25F), (double)par4, var21);
         this.renderFaceYNeg(par1BlockCauldron, (double)par2, (double)((float)par3 + 1.0F - 0.75F), (double)par4, var21);
         int var14 = this.blockAccess.getBlockMetadata(par2, par3, par4);
 
         if (var14 > 0)
         {
-            Icon var15 = BlockFluid.getFluidIcon("water_still");
+            Icon var15 = BlockFluid.func_94424_b("water_still");
 
             if (var14 > 3)
             {
@@ -934,27 +893,22 @@
                 case 1:
                     var17 = Block.plantRed;
                     break;
-
                 case 2:
                     var17 = Block.plantYellow;
-
                 case 3:
                 case 4:
                 case 5:
                 case 6:
                 default:
                     break;
-
                 case 7:
                     var17 = Block.mushroomRed;
                     break;
-
                 case 8:
                     var17 = Block.mushroomBrown;
             }
 
             var5.addTranslation(var13 / 16.0F, var15 / 16.0F, var16 / 16.0F);
-            this.betterSnowEnabled = false;
 
             if (var17 != null)
             {
@@ -1006,13 +960,6 @@
             var5.addTranslation(-var13 / 16.0F, -var15 / 16.0F, -var16 / 16.0F);
         }
 
-        this.betterSnowEnabled = true;
-
-        if (Config.isBetterSnow() && this.hasSnowNeighbours(par2, par3, par4))
-        {
-            this.renderSnow(par2, par3, par4, Block.snow.maxY);
-        }
-
         return true;
     }
 
@@ -1068,7 +1015,6 @@
                 this.uvRotateTop = 3;
                 this.uvRotateBottom = 3;
                 break;
-
             case 1:
                 this.uvRotateEast = 1;
                 this.uvRotateWest = 2;
@@ -1076,12 +1022,10 @@
                 this.uvRotateBottom = 1;
                 var8 = true;
                 break;
-
             case 2:
                 this.uvRotateSouth = 1;
                 this.uvRotateNorth = 2;
                 break;
-
             case 3:
                 this.uvRotateEast = 2;
                 this.uvRotateWest = 1;
@@ -1223,17 +1167,14 @@
                 var18 = -0.3125D;
                 var14 = BlockRedstoneRepeater.repeaterTorchOffset[var7];
                 break;
-
             case 1:
                 var16 = 0.3125D;
                 var12 = -BlockRedstoneRepeater.repeaterTorchOffset[var7];
                 break;
-
             case 2:
                 var18 = 0.3125D;
                 var14 = -BlockRedstoneRepeater.repeaterTorchOffset[var7];
                 break;
-
             case 3:
                 var16 = -0.3125D;
                 var12 = BlockRedstoneRepeater.repeaterTorchOffset[var7];
@@ -1260,7 +1201,6 @@
                     var22 = 9.0F;
                     var23 = 2.0F;
                     var24 = 14.0F;
-
                 case 0:
                 case 2:
                 default:
@@ -1316,17 +1256,14 @@
                 var12 = -0.3125D;
                 var16 = 1.0D;
                 break;
-
             case 1:
                 var8 = 0.3125D;
                 var14 = -1.0D;
                 break;
-
             case 2:
                 var12 = 0.3125D;
                 var16 = -1.0D;
                 break;
-
             case 3:
                 var8 = -0.3125D;
                 var14 = 1.0D;
@@ -1430,17 +1367,14 @@
                     this.uvRotateNorth = 3;
                     this.setRenderBounds(0.0D, 0.25D, 0.0D, 1.0D, 1.0D, 1.0D);
                     break;
-
                 case 1:
                     this.setRenderBounds(0.0D, 0.0D, 0.0D, 1.0D, 0.75D, 1.0D);
                     break;
-
                 case 2:
                     this.uvRotateSouth = 1;
                     this.uvRotateNorth = 2;
                     this.setRenderBounds(0.0D, 0.0D, 0.25D, 1.0D, 1.0D, 1.0D);
                     break;
-
                 case 3:
                     this.uvRotateSouth = 2;
                     this.uvRotateNorth = 1;
@@ -1448,7 +1382,6 @@
                     this.uvRotateBottom = 3;
                     this.setRenderBounds(0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 0.75D);
                     break;
-
                 case 4:
                     this.uvRotateEast = 1;
                     this.uvRotateWest = 2;
@@ -1456,7 +1389,6 @@
                     this.uvRotateBottom = 1;
                     this.setRenderBounds(0.25D, 0.0D, 0.0D, 1.0D, 1.0D, 1.0D);
                     break;
-
                 case 5:
                     this.uvRotateEast = 2;
                     this.uvRotateWest = 1;
@@ -1485,30 +1417,25 @@
                     this.uvRotateWest = 3;
                     this.uvRotateSouth = 3;
                     this.uvRotateNorth = 3;
-
                 case 1:
                 default:
                     break;
-
                 case 2:
                     this.uvRotateSouth = 1;
                     this.uvRotateNorth = 2;
                     break;
-
                 case 3:
                     this.uvRotateSouth = 2;
                     this.uvRotateNorth = 1;
                     this.uvRotateTop = 3;
                     this.uvRotateBottom = 3;
                     break;
-
                 case 4:
                     this.uvRotateEast = 1;
                     this.uvRotateWest = 2;
                     this.uvRotateTop = 2;
                     this.uvRotateBottom = 1;
                     break;
-
                 case 5:
                     this.uvRotateEast = 2;
                     this.uvRotateWest = 1;
@@ -1533,7 +1460,7 @@
      */
     public void renderPistonRodUD(double par1, double par3, double par5, double par7, double par9, double par11, float par13, double par14)
     {
-        Icon var16 = BlockPistonBase.getPistonBaseIcon("piston_side");
+        Icon var16 = BlockPistonBase.func_94496_b("piston_side");
 
         if (this.hasOverrideBlockTexture())
         {
@@ -1557,7 +1484,7 @@
      */
     public void renderPistonRodSN(double par1, double par3, double par5, double par7, double par9, double par11, float par13, double par14)
     {
-        Icon var16 = BlockPistonBase.getPistonBaseIcon("piston_side");
+        Icon var16 = BlockPistonBase.func_94496_b("piston_side");
 
         if (this.hasOverrideBlockTexture())
         {
@@ -1581,7 +1508,7 @@
      */
     public void renderPistonRodEW(double par1, double par3, double par5, double par7, double par9, double par11, float par13, double par14)
     {
-        Icon var16 = BlockPistonBase.getPistonBaseIcon("piston_side");
+        Icon var16 = BlockPistonBase.func_94496_b("piston_side");
 
         if (this.hasOverrideBlockTexture())
         {
@@ -1638,7 +1565,6 @@
                 this.renderPistonRodUD((double)((float)par2 + 0.375F), (double)((float)par2 + 0.375F), (double)((float)par3 + 0.25F), (double)((float)par3 + 0.25F + var12), (double)((float)par4 + 0.375F), (double)((float)par4 + 0.625F), var11 * 0.6F, var13);
                 this.renderPistonRodUD((double)((float)par2 + 0.625F), (double)((float)par2 + 0.625F), (double)((float)par3 + 0.25F), (double)((float)par3 + 0.25F + var12), (double)((float)par4 + 0.625F), (double)((float)par4 + 0.375F), var11 * 0.6F, var13);
                 break;
-
             case 1:
                 this.setRenderBounds(0.0D, 0.75D, 0.0D, 1.0D, 1.0D, 1.0D);
                 this.renderStandardBlock(par1Block, par2, par3, par4);
@@ -1647,7 +1573,6 @@
                 this.renderPistonRodUD((double)((float)par2 + 0.375F), (double)((float)par2 + 0.375F), (double)((float)par3 - 0.25F + 1.0F - var12), (double)((float)par3 - 0.25F + 1.0F), (double)((float)par4 + 0.375F), (double)((float)par4 + 0.625F), var11 * 0.6F, var13);
                 this.renderPistonRodUD((double)((float)par2 + 0.625F), (double)((float)par2 + 0.625F), (double)((float)par3 - 0.25F + 1.0F - var12), (double)((float)par3 - 0.25F + 1.0F), (double)((float)par4 + 0.625F), (double)((float)par4 + 0.375F), var11 * 0.6F, var13);
                 break;
-
             case 2:
                 this.uvRotateSouth = 1;
                 this.uvRotateNorth = 2;
@@ -1658,7 +1583,6 @@
                 this.renderPistonRodSN((double)((float)par2 + 0.375F), (double)((float)par2 + 0.625F), (double)((float)par3 + 0.375F), (double)((float)par3 + 0.375F), (double)((float)par4 + 0.25F), (double)((float)par4 + 0.25F + var12), var11 * 0.5F, var13);
                 this.renderPistonRodSN((double)((float)par2 + 0.625F), (double)((float)par2 + 0.375F), (double)((float)par3 + 0.625F), (double)((float)par3 + 0.625F), (double)((float)par4 + 0.25F), (double)((float)par4 + 0.25F + var12), var11, var13);
                 break;
-
             case 3:
                 this.uvRotateSouth = 2;
                 this.uvRotateNorth = 1;
@@ -1671,7 +1595,6 @@
                 this.renderPistonRodSN((double)((float)par2 + 0.375F), (double)((float)par2 + 0.625F), (double)((float)par3 + 0.375F), (double)((float)par3 + 0.375F), (double)((float)par4 - 0.25F + 1.0F - var12), (double)((float)par4 - 0.25F + 1.0F), var11 * 0.5F, var13);
                 this.renderPistonRodSN((double)((float)par2 + 0.625F), (double)((float)par2 + 0.375F), (double)((float)par3 + 0.625F), (double)((float)par3 + 0.625F), (double)((float)par4 - 0.25F + 1.0F - var12), (double)((float)par4 - 0.25F + 1.0F), var11, var13);
                 break;
-
             case 4:
                 this.uvRotateEast = 1;
                 this.uvRotateWest = 2;
@@ -1684,7 +1607,6 @@
                 this.renderPistonRodEW((double)((float)par2 + 0.25F), (double)((float)par2 + 0.25F + var12), (double)((float)par3 + 0.375F), (double)((float)par3 + 0.625F), (double)((float)par4 + 0.375F), (double)((float)par4 + 0.375F), var11 * 0.6F, var13);
                 this.renderPistonRodEW((double)((float)par2 + 0.25F), (double)((float)par2 + 0.25F + var12), (double)((float)par3 + 0.625F), (double)((float)par3 + 0.375F), (double)((float)par4 + 0.625F), (double)((float)par4 + 0.625F), var11 * 0.6F, var13);
                 break;
-
             case 5:
                 this.uvRotateEast = 2;
                 this.uvRotateWest = 1;
@@ -2471,8 +2393,8 @@
     public boolean renderBlockFire(BlockFire par1BlockFire, int par2, int par3, int par4)
     {
         Tessellator var5 = Tessellator.instance;
-        Icon var6 = par1BlockFire.getFireIcon(0);
-        Icon var7 = par1BlockFire.getFireIcon(1);
+        Icon var6 = par1BlockFire.func_94438_c(0);
+        Icon var7 = par1BlockFire.func_94438_c(1);
         Icon var8 = var6;
 
         if (this.hasOverrideBlockTexture())
@@ -2682,10 +2604,10 @@
     {
         Tessellator var5 = Tessellator.instance;
         int var6 = this.blockAccess.getBlockMetadata(par2, par3, par4);
-        Icon var7 = BlockRedstoneWire.getRedstoneWireIcon("cross");
-        Icon var8 = BlockRedstoneWire.getRedstoneWireIcon("line");
-        Icon var9 = BlockRedstoneWire.getRedstoneWireIcon("cross_overlay");
-        Icon var10 = BlockRedstoneWire.getRedstoneWireIcon("line_overlay");
+        Icon var7 = BlockRedstoneWire.func_94409_b("cross");
+        Icon var8 = BlockRedstoneWire.func_94409_b("line");
+        Icon var9 = BlockRedstoneWire.func_94409_b("cross_overlay");
+        Icon var10 = BlockRedstoneWire.func_94409_b("line_overlay");
         var5.setBrightness(par1Block.getMixedBrightnessForBlock(this.blockAccess, par2, par3, par4));
         float var11 = 1.0F;
         float var12 = (float)var6 / 15.0F;
@@ -3033,53 +2955,52 @@
             var6 = this.overrideBlockTexture;
         }
 
-        int var7 = this.blockAccess.getBlockMetadata(par2, par3, par4);
-
         if (Config.isConnectedTextures() && this.overrideBlockTexture == null)
         {
-            var6 = ConnectedTextures.getConnectedTexture(this.blockAccess, par1Block, par2, par3, par4, var7, var6);
+            var6 = ConnectedTextures.getConnectedTexture(this.blockAccess, par1Block, par2, par3, par4, -1, var6);
         }
 
         var5.setBrightness(par1Block.getMixedBrightnessForBlock(this.blockAccess, par2, par3, par4));
-        float var8 = 1.0F;
-        var5.setColorOpaque_F(var8, var8, var8);
-        double var9 = (double)var6.getMinU();
-        double var11 = (double)var6.getMinV();
-        double var13 = (double)var6.getMaxU();
-        double var15 = (double)var6.getMaxV();
+        float var7 = 1.0F;
+        var5.setColorOpaque_F(var7, var7, var7);
+        double var8 = (double)var6.getMinU();
+        double var10 = (double)var6.getMinV();
+        double var12 = (double)var6.getMaxU();
+        double var14 = (double)var6.getMaxV();
+        int var16 = this.blockAccess.getBlockMetadata(par2, par3, par4);
         double var17 = 0.0D;
         double var19 = 0.05000000074505806D;
 
-        if (var7 == 5)
+        if (var16 == 5)
         {
-            var5.addVertexWithUV((double)par2 + var19, (double)(par3 + 1) + var17, (double)(par4 + 1) + var17, var9, var11);
-            var5.addVertexWithUV((double)par2 + var19, (double)(par3 + 0) - var17, (double)(par4 + 1) + var17, var9, var15);
-            var5.addVertexWithUV((double)par2 + var19, (double)(par3 + 0) - var17, (double)(par4 + 0) - var17, var13, var15);
-            var5.addVertexWithUV((double)par2 + var19, (double)(par3 + 1) + var17, (double)(par4 + 0) - var17, var13, var11);
+            var5.addVertexWithUV((double)par2 + var19, (double)(par3 + 1) + var17, (double)(par4 + 1) + var17, var8, var10);
+            var5.addVertexWithUV((double)par2 + var19, (double)(par3 + 0) - var17, (double)(par4 + 1) + var17, var8, var14);
+            var5.addVertexWithUV((double)par2 + var19, (double)(par3 + 0) - var17, (double)(par4 + 0) - var17, var12, var14);
+            var5.addVertexWithUV((double)par2 + var19, (double)(par3 + 1) + var17, (double)(par4 + 0) - var17, var12, var10);
         }
 
-        if (var7 == 4)
+        if (var16 == 4)
         {
-            var5.addVertexWithUV((double)(par2 + 1) - var19, (double)(par3 + 0) - var17, (double)(par4 + 1) + var17, var13, var15);
-            var5.addVertexWithUV((double)(par2 + 1) - var19, (double)(par3 + 1) + var17, (double)(par4 + 1) + var17, var13, var11);
-            var5.addVertexWithUV((double)(par2 + 1) - var19, (double)(par3 + 1) + var17, (double)(par4 + 0) - var17, var9, var11);
-            var5.addVertexWithUV((double)(par2 + 1) - var19, (double)(par3 + 0) - var17, (double)(par4 + 0) - var17, var9, var15);
+            var5.addVertexWithUV((double)(par2 + 1) - var19, (double)(par3 + 0) - var17, (double)(par4 + 1) + var17, var12, var14);
+            var5.addVertexWithUV((double)(par2 + 1) - var19, (double)(par3 + 1) + var17, (double)(par4 + 1) + var17, var12, var10);
+            var5.addVertexWithUV((double)(par2 + 1) - var19, (double)(par3 + 1) + var17, (double)(par4 + 0) - var17, var8, var10);
+            var5.addVertexWithUV((double)(par2 + 1) - var19, (double)(par3 + 0) - var17, (double)(par4 + 0) - var17, var8, var14);
         }
 
-        if (var7 == 3)
+        if (var16 == 3)
         {
-            var5.addVertexWithUV((double)(par2 + 1) + var17, (double)(par3 + 0) - var17, (double)par4 + var19, var13, var15);
-            var5.addVertexWithUV((double)(par2 + 1) + var17, (double)(par3 + 1) + var17, (double)par4 + var19, var13, var11);
-            var5.addVertexWithUV((double)(par2 + 0) - var17, (double)(par3 + 1) + var17, (double)par4 + var19, var9, var11);
-            var5.addVertexWithUV((double)(par2 + 0) - var17, (double)(par3 + 0) - var17, (double)par4 + var19, var9, var15);
+            var5.addVertexWithUV((double)(par2 + 1) + var17, (double)(par3 + 0) - var17, (double)par4 + var19, var12, var14);
+            var5.addVertexWithUV((double)(par2 + 1) + var17, (double)(par3 + 1) + var17, (double)par4 + var19, var12, var10);
+            var5.addVertexWithUV((double)(par2 + 0) - var17, (double)(par3 + 1) + var17, (double)par4 + var19, var8, var10);
+            var5.addVertexWithUV((double)(par2 + 0) - var17, (double)(par3 + 0) - var17, (double)par4 + var19, var8, var14);
         }
 
-        if (var7 == 2)
+        if (var16 == 2)
         {
-            var5.addVertexWithUV((double)(par2 + 1) + var17, (double)(par3 + 1) + var17, (double)(par4 + 1) - var19, var9, var11);
-            var5.addVertexWithUV((double)(par2 + 1) + var17, (double)(par3 + 0) - var17, (double)(par4 + 1) - var19, var9, var15);
-            var5.addVertexWithUV((double)(par2 + 0) - var17, (double)(par3 + 0) - var17, (double)(par4 + 1) - var19, var13, var15);
-            var5.addVertexWithUV((double)(par2 + 0) - var17, (double)(par3 + 1) + var17, (double)(par4 + 1) - var19, var13, var11);
+            var5.addVertexWithUV((double)(par2 + 1) + var17, (double)(par3 + 1) + var17, (double)(par4 + 1) - var19, var8, var10);
+            var5.addVertexWithUV((double)(par2 + 1) + var17, (double)(par3 + 0) - var17, (double)(par4 + 1) - var19, var8, var14);
+            var5.addVertexWithUV((double)(par2 + 0) - var17, (double)(par3 + 0) - var17, (double)(par4 + 1) - var19, var12, var14);
+            var5.addVertexWithUV((double)(par2 + 0) - var17, (double)(par3 + 1) + var17, (double)(par4 + 1) - var19, var12, var10);
         }
 
         return true;
@@ -3098,99 +3019,79 @@
             var6 = this.overrideBlockTexture;
         }
 
-        int var7 = this.blockAccess.getBlockMetadata(par2, par3, par4);
-
         if (Config.isConnectedTextures() && this.overrideBlockTexture == null)
         {
-            byte var8 = 0;
-
-            if ((var7 & 1) != 0)
-            {
-                var8 = 2;
-            }
-            else if ((var7 & 2) != 0)
-            {
-                var8 = 5;
-            }
-            else if ((var7 & 4) != 0)
-            {
-                var8 = 3;
-            }
-            else if ((var7 & 8) != 0)
-            {
-                var8 = 4;
-            }
-
-            var6 = ConnectedTextures.getConnectedTexture(this.blockAccess, par1Block, par2, par3, par4, var8, var6);
+            var6 = ConnectedTextures.getConnectedTexture(this.blockAccess, par1Block, par2, par3, par4, -1, var6);
         }
 
-        float var23 = 1.0F;
+        float var7 = 1.0F;
         var5.setBrightness(par1Block.getMixedBrightnessForBlock(this.blockAccess, par2, par3, par4));
-        int var9 = CustomColorizer.getColorMultiplier(par1Block, this.blockAccess, par2, par3, par4);
-        float var10 = (float)(var9 >> 16 & 255) / 255.0F;
-        float var11 = (float)(var9 >> 8 & 255) / 255.0F;
-        float var12 = (float)(var9 & 255) / 255.0F;
-        var5.setColorOpaque_F(var23 * var10, var23 * var11, var23 * var12);
-        double var13 = (double)var6.getMinU();
-        double var15 = (double)var6.getMinV();
-        double var17 = (double)var6.getMaxU();
-        double var19 = (double)var6.getMaxV();
-        double var21 = 0.05000000074505806D;
-
-        if ((var7 & 2) != 0)
-        {
-            var5.addVertexWithUV((double)par2 + var21, (double)(par3 + 1), (double)(par4 + 1), var13, var15);
-            var5.addVertexWithUV((double)par2 + var21, (double)(par3 + 0), (double)(par4 + 1), var13, var19);
-            var5.addVertexWithUV((double)par2 + var21, (double)(par3 + 0), (double)(par4 + 0), var17, var19);
-            var5.addVertexWithUV((double)par2 + var21, (double)(par3 + 1), (double)(par4 + 0), var17, var15);
-            var5.addVertexWithUV((double)par2 + var21, (double)(par3 + 1), (double)(par4 + 0), var17, var15);
-            var5.addVertexWithUV((double)par2 + var21, (double)(par3 + 0), (double)(par4 + 0), var17, var19);
-            var5.addVertexWithUV((double)par2 + var21, (double)(par3 + 0), (double)(par4 + 1), var13, var19);
-            var5.addVertexWithUV((double)par2 + var21, (double)(par3 + 1), (double)(par4 + 1), var13, var15);
-        }
-
-        if ((var7 & 8) != 0)
-        {
-            var5.addVertexWithUV((double)(par2 + 1) - var21, (double)(par3 + 0), (double)(par4 + 1), var17, var19);
-            var5.addVertexWithUV((double)(par2 + 1) - var21, (double)(par3 + 1), (double)(par4 + 1), var17, var15);
-            var5.addVertexWithUV((double)(par2 + 1) - var21, (double)(par3 + 1), (double)(par4 + 0), var13, var15);
-            var5.addVertexWithUV((double)(par2 + 1) - var21, (double)(par3 + 0), (double)(par4 + 0), var13, var19);
-            var5.addVertexWithUV((double)(par2 + 1) - var21, (double)(par3 + 0), (double)(par4 + 0), var13, var19);
-            var5.addVertexWithUV((double)(par2 + 1) - var21, (double)(par3 + 1), (double)(par4 + 0), var13, var15);
-            var5.addVertexWithUV((double)(par2 + 1) - var21, (double)(par3 + 1), (double)(par4 + 1), var17, var15);
-            var5.addVertexWithUV((double)(par2 + 1) - var21, (double)(par3 + 0), (double)(par4 + 1), var17, var19);
-        }
-
-        if ((var7 & 4) != 0)
-        {
-            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 0), (double)par4 + var21, var17, var19);
-            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 1), (double)par4 + var21, var17, var15);
-            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 1), (double)par4 + var21, var13, var15);
-            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 0), (double)par4 + var21, var13, var19);
-            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 0), (double)par4 + var21, var13, var19);
-            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 1), (double)par4 + var21, var13, var15);
-            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 1), (double)par4 + var21, var17, var15);
-            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 0), (double)par4 + var21, var17, var19);
-        }
-
-        if ((var7 & 1) != 0)
-        {
-            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 1), (double)(par4 + 1) - var21, var13, var15);
-            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 0), (double)(par4 + 1) - var21, var13, var19);
-            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 0), (double)(par4 + 1) - var21, var17, var19);
-            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 1), (double)(par4 + 1) - var21, var17, var15);
-            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 1), (double)(par4 + 1) - var21, var17, var15);
-            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 0), (double)(par4 + 1) - var21, var17, var19);
-            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 0), (double)(par4 + 1) - var21, var13, var19);
-            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 1), (double)(par4 + 1) - var21, var13, var15);
+        int var8 = CustomColorizer.getColorMultiplier(par1Block, this.blockAccess, par2, par3, par4);
+        float var9 = (float)(var8 >> 16 & 255) / 255.0F;
+        float var10 = (float)(var8 >> 8 & 255) / 255.0F;
+        float var11 = (float)(var8 & 255) / 255.0F;
+        var5.setColorOpaque_F(var7 * var9, var7 * var10, var7 * var11);
+        double var12 = (double)var6.getMinU();
+        double var14 = (double)var6.getMinV();
+        double var16 = (double)var6.getMaxU();
+        double var18 = (double)var6.getMaxV();
+        double var20 = 0.05000000074505806D;
+        int var22 = this.blockAccess.getBlockMetadata(par2, par3, par4);
+
+        if ((var22 & 2) != 0)
+        {
+            var5.addVertexWithUV((double)par2 + var20, (double)(par3 + 1), (double)(par4 + 1), var12, var14);
+            var5.addVertexWithUV((double)par2 + var20, (double)(par3 + 0), (double)(par4 + 1), var12, var18);
+            var5.addVertexWithUV((double)par2 + var20, (double)(par3 + 0), (double)(par4 + 0), var16, var18);
+            var5.addVertexWithUV((double)par2 + var20, (double)(par3 + 1), (double)(par4 + 0), var16, var14);
+            var5.addVertexWithUV((double)par2 + var20, (double)(par3 + 1), (double)(par4 + 0), var16, var14);
+            var5.addVertexWithUV((double)par2 + var20, (double)(par3 + 0), (double)(par4 + 0), var16, var18);
+            var5.addVertexWithUV((double)par2 + var20, (double)(par3 + 0), (double)(par4 + 1), var12, var18);
+            var5.addVertexWithUV((double)par2 + var20, (double)(par3 + 1), (double)(par4 + 1), var12, var14);
+        }
+
+        if ((var22 & 8) != 0)
+        {
+            var5.addVertexWithUV((double)(par2 + 1) - var20, (double)(par3 + 0), (double)(par4 + 1), var16, var18);
+            var5.addVertexWithUV((double)(par2 + 1) - var20, (double)(par3 + 1), (double)(par4 + 1), var16, var14);
+            var5.addVertexWithUV((double)(par2 + 1) - var20, (double)(par3 + 1), (double)(par4 + 0), var12, var14);
+            var5.addVertexWithUV((double)(par2 + 1) - var20, (double)(par3 + 0), (double)(par4 + 0), var12, var18);
+            var5.addVertexWithUV((double)(par2 + 1) - var20, (double)(par3 + 0), (double)(par4 + 0), var12, var18);
+            var5.addVertexWithUV((double)(par2 + 1) - var20, (double)(par3 + 1), (double)(par4 + 0), var12, var14);
+            var5.addVertexWithUV((double)(par2 + 1) - var20, (double)(par3 + 1), (double)(par4 + 1), var16, var14);
+            var5.addVertexWithUV((double)(par2 + 1) - var20, (double)(par3 + 0), (double)(par4 + 1), var16, var18);
+        }
+
+        if ((var22 & 4) != 0)
+        {
+            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 0), (double)par4 + var20, var16, var18);
+            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 1), (double)par4 + var20, var16, var14);
+            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 1), (double)par4 + var20, var12, var14);
+            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 0), (double)par4 + var20, var12, var18);
+            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 0), (double)par4 + var20, var12, var18);
+            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 1), (double)par4 + var20, var12, var14);
+            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 1), (double)par4 + var20, var16, var14);
+            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 0), (double)par4 + var20, var16, var18);
+        }
+
+        if ((var22 & 1) != 0)
+        {
+            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 1), (double)(par4 + 1) - var20, var12, var14);
+            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 0), (double)(par4 + 1) - var20, var12, var18);
+            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 0), (double)(par4 + 1) - var20, var16, var18);
+            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 1), (double)(par4 + 1) - var20, var16, var14);
+            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 1), (double)(par4 + 1) - var20, var16, var14);
+            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 0), (double)(par4 + 1) - var20, var16, var18);
+            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 0), (double)(par4 + 1) - var20, var12, var18);
+            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 1), (double)(par4 + 1) - var20, var12, var14);
         }
 
         if (this.blockAccess.isBlockNormalCube(par2, par3 + 1, par4))
         {
-            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 1) - var21, (double)(par4 + 0), var13, var15);
-            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 1) - var21, (double)(par4 + 1), var13, var19);
-            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 1) - var21, (double)(par4 + 1), var17, var19);
-            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 1) - var21, (double)(par4 + 0), var17, var15);
+            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 1) - var20, (double)(par4 + 0), var12, var14);
+            var5.addVertexWithUV((double)(par2 + 1), (double)(par3 + 1) - var20, (double)(par4 + 1), var12, var18);
+            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 1) - var20, (double)(par4 + 1), var16, var18);
+            var5.addVertexWithUV((double)(par2 + 0), (double)(par3 + 1) - var20, (double)(par4 + 0), var16, var14);
         }
 
         return true;
@@ -3720,7 +3621,7 @@
 
         if (par1Block == Block.tallGrass)
         {
-            long var17 = (long)(par2 * 3129871) ^ (long)par4 * 116129781L ^ (long)par3;
+            long var17 = (long)(par2 * 3129871) ^(long)par4 * 116129781L ^(long)par3;
             var17 = var17 * var17 * 42317861L + var17 * 11L;
             var19 += ((double)((float)(var17 >> 16 & 15L) / 15.0F) - 0.5D) * 0.5D;
             var20 += ((double)((float)(var17 >> 20 & 15L) / 15.0F) - 1.0D) * 0.2D;
@@ -3948,7 +3849,7 @@
 
         if (Config.isConnectedTextures() && this.overrideBlockTexture == null)
         {
-            var6 = ConnectedTextures.getConnectedTexture(this.blockAccess, par1Block, par2, par3, par4, 1, var6);
+            var6 = ConnectedTextures.getConnectedTexture(this.blockAccess, par1Block, par2, par3, par4, -1, var6);
         }
 
         float var7 = 0.015625F;
@@ -3956,7 +3857,7 @@
         double var10 = (double)var6.getMinV();
         double var12 = (double)var6.getMaxU();
         double var14 = (double)var6.getMaxV();
-        long var16 = (long)(par2 * 3129871) ^ (long)par4 * 116129781L ^ (long)par3;
+        long var16 = (long)(par2 * 3129871) ^(long)par4 * 116129781L ^(long)par3;
         var16 = var16 * var16 * 42317861L + var16 * 11L;
         int var18 = (int)(var16 >> 16 & 3L);
         var5.setBrightness(par1Block.getMixedBrightnessForBlock(this.blockAccess, par2, par3, par4));
@@ -3984,7 +3885,7 @@
     public void renderBlockStemBig(BlockStem par1BlockStem, int par2, int par3, double par4, double par6, double par8, double par10)
     {
         Tessellator var12 = Tessellator.instance;
-        Icon var13 = par1BlockStem.getStemIcon();
+        Icon var13 = par1BlockStem.func_94368_p();
 
         if (this.hasOverrideBlockTexture())
         {
@@ -4430,7 +4331,7 @@
             var8 = var11;
         }
 
-        return Minecraft.isAmbientOcclusionEnabled() && Block.lightValue[par1Block.blockID] == 0 ? (this.partialRenderBounds ? this.renderStandardBlockWithAmbientOcclusionPartial(par1Block, par2, par3, par4, var6, var7, var8) : this.renderStandardBlockWithAmbientOcclusion(par1Block, par2, par3, par4, var6, var7, var8)) : this.renderStandardBlockWithColorMultiplier(par1Block, par2, par3, par4, var6, var7, var8);
+        return Minecraft.isAmbientOcclusionEnabled() && Block.lightValue[par1Block.blockID] == 0 ? (this.partialRenderBounds ? this.renderBlockWithAmbientOcclusion(par1Block, par2, par3, par4, var6, var7, var8) : this.renderStandardBlockWithAmbientOcclusion(par1Block, par2, par3, par4, var6, var7, var8)) : this.renderStandardBlockWithColorMultiplier(par1Block, par2, par3, par4, var6, var7, var8);
     }
 
     /**
@@ -5396,7 +5297,7 @@
     /**
      * Renders non-full-cube block with ambient occusion.  Args: block, x, y, z, red, green, blue (lighting)
      */
-    public boolean renderStandardBlockWithAmbientOcclusionPartial(Block par1Block, int par2, int par3, int par4, float par5, float par6, float par7)
+    public boolean renderBlockWithAmbientOcclusion(Block par1Block, int par2, int par3, int par4, float par5, float par6, float par7)
     {
         this.enableAO = true;
         boolean var8 = false;
@@ -6539,7 +6440,7 @@
         int var6 = this.blockAccess.getBlockMetadata(par2, par3, par4);
         int var7 = BlockDirectional.getDirection(var6);
         int var8 = BlockCocoa.func_72219_c(var6);
-        Icon var9 = par1BlockCocoa.getCocoaIcon(var8);
+        Icon var9 = par1BlockCocoa.func_94468_i_(var8);
         int var10 = 4 + var8 * 2;
         int var11 = 5 + var8 * 2;
         double var12 = 15.0D - (double)var10;
@@ -6559,17 +6460,14 @@
                 var28 = 8.0D - (double)(var10 / 2);
                 var30 = 15.0D - (double)var10;
                 break;
-
             case 1:
                 var28 = 1.0D;
                 var30 = 8.0D - (double)(var10 / 2);
                 break;
-
             case 2:
                 var28 = 8.0D - (double)(var10 / 2);
                 var30 = 1.0D;
                 break;
-
             case 3:
                 var28 = 15.0D - (double)var10;
                 var30 = 8.0D - (double)(var10 / 2);
@@ -6633,17 +6531,14 @@
                 var20 = var22;
                 var22 = var45;
                 break;
-
             case 1:
                 var28 = 0.0D;
                 var30 = 8.0D;
                 break;
-
             case 2:
                 var28 = 8.0D;
                 var30 = 0.0D;
                 break;
-
             case 3:
                 var28 = 12.0D;
                 var30 = 8.0D;
@@ -9105,7 +9000,6 @@
             case 35:
             case 39:
                 return true;
-
             case 1:
             case 2:
             case 3:
@@ -9161,7 +9055,7 @@
     {
         if (par1Icon == null)
         {
-            par1Icon = ((TextureMap)Minecraft.getMinecraft().getTextureManager().getTexture(TextureMap.locationBlocksTexture)).getAtlasSprite("missingno");
+            par1Icon = ((TextureMap)Minecraft.getMinecraft().func_110434_K().func_110581_b(TextureMap.field_110575_b)).func_110572_b("missingno");
         }
 
         return (Icon)par1Icon;
@@ -9221,11 +9115,8 @@
 
     private void renderSnow(int x, int y, int z, double maxY)
     {
-        if (this.betterSnowEnabled)
-        {
-            this.setRenderBoundsFromBlock(Block.snow);
-            this.renderMaxY = maxY;
-            this.renderStandardBlock(Block.snow, x, y, z);
-        }
+        this.setRenderBoundsFromBlock(Block.snow);
+        this.renderMaxY = maxY;
+        this.renderStandardBlock(Block.snow, x, y, z);
     }
 }
