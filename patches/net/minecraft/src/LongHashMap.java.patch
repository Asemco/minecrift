--- a/net/minecraft/src/LongHashMap.java
+++ b/net/minecraft/src/LongHashMap.java
@@ -3,7 +3,7 @@
 public class LongHashMap
 {
     /** the array of all elements in the hash */
-    private transient LongHashMapEntry[] hashArray = new LongHashMapEntry[1024];
+    private transient LongHashMapEntry[] hashArray = new LongHashMapEntry[16];
 
     /** the number of elements in the hash array */
     private transient int numHashElements;
@@ -11,28 +11,22 @@
     /**
      * the maximum amount of elements in the hash (probably 3/4 the size due to meh hashing function)
      */
-    private int capacity;
+    private int capacity = 12;
 
     /**
      * percent of the hasharray that can be used without hash colliding probably
      */
-    private final float percentUseable;
+    private final float percentUseable = 0.75F;
 
     /** count of times elements have been added/removed */
     private transient volatile int modCount;
 
-    public LongHashMap()
-    {
-        this.capacity = (int)(0.75F * (float)this.hashArray.length);
-        this.percentUseable = 0.75F;
-    }
-
     /**
      * returns the hashed key given the original key
      */
     private static int getHashedKey(long par0)
     {
-        return (int)(par0 ^ par0 >>> 27);
+        return hash((int)(par0 ^ par0 >>> 32));
     }
 
     /**
@@ -133,9 +127,7 @@
             LongHashMapEntry[] var4 = new LongHashMapEntry[par1];
             this.copyHashTableTo(var4);
             this.hashArray = var4;
-            float var10001 = (float)par1;
-            this.getClass();
-            this.capacity = (int)(var10001 * 0.75F);
+            this.capacity = (int)((float)par1 * this.percentUseable);
         }
     }
 
@@ -237,19 +229,4 @@
     {
         return getHashedKey(par0);
     }
-
-    public double getKeyDistribution()
-    {
-        int countValid = 0;
-
-        for (int i = 0; i < this.hashArray.length; ++i)
-        {
-            if (this.hashArray[i] != null)
-            {
-                ++countValid;
-            }
-        }
-
-        return 1.0D * (double)countValid / (double)this.numHashElements;
-    }
 }
