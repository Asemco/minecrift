--- a/net/minecraft/src/FontRenderer.java
+++ b/net/minecraft/src/FontRenderer.java
@@ -16,7 +16,7 @@
 
 public class FontRenderer implements ResourceManagerReloadListener
 {
-    private static final ResourceLocation[] unicodePageLocations = new ResourceLocation[256];
+    private static final ResourceLocation[] field_111274_c = new ResourceLocation[256];
 
     /** Array of width of all the characters in default.png */
     private float[] charWidth = new float[256];
@@ -35,7 +35,7 @@
      * drop shadows.
      */
     private int[] colorCode = new int[32];
-    private ResourceLocation locationFontTexture;
+    private ResourceLocation field_111273_g;
 
     /** The RenderEngine used to load and setup glyph textures. */
     private final TextureManager renderEngine;
@@ -97,11 +97,11 @@
     {
         this.gameSettings = par1GameSettings;
         this.locationFontTextureBase = par2ResourceLocation;
-        this.locationFontTexture = par2ResourceLocation;
+        this.field_111273_g = par2ResourceLocation;
         this.renderEngine = par3TextureManager;
         this.unicodeFlag = par4;
-        this.locationFontTexture = getHdFontLocation(this.locationFontTextureBase);
-        par3TextureManager.bindTexture(this.locationFontTexture);
+        this.field_111273_g = getHdFontLocation(this.locationFontTextureBase);
+        par3TextureManager.func_110577_a(this.field_111273_g);
 
         for (int var5 = 0; var5 < 32; ++var5)
         {
@@ -138,25 +138,25 @@
         this.readGlyphSizes();
     }
 
-    public void onResourceManagerReload(ResourceManager par1ResourceManager)
+    public void func_110549_a(ResourceManager par1ResourceManager)
     {
-        this.locationFontTexture = getHdFontLocation(this.locationFontTextureBase);
+        this.field_111273_g = getHdFontLocation(this.locationFontTextureBase);
 
-        for (int var2 = 0; var2 < unicodePageLocations.length; ++var2)
+        for (int var2 = 0; var2 < field_111274_c.length; ++var2)
         {
-            unicodePageLocations[var2] = null;
+            field_111274_c[var2] = null;
         }
 
-        this.readFontTexture();
+        this.func_111272_d();
     }
 
-    private void readFontTexture()
+    private void func_111272_d()
     {
         BufferedImage var1;
 
         try
         {
-            var1 = ImageIO.read(Minecraft.getMinecraft().getResourceManager().getResource(this.locationFontTexture).getInputStream());
+            var1 = ImageIO.read(Minecraft.getMinecraft().func_110442_L().func_110536_a(this.field_111273_g).func_110527_b());
         }
         catch (IOException var18)
         {
@@ -235,7 +235,7 @@
     {
         try
         {
-            InputStream var1 = Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation("font/glyph_sizes.bin")).getInputStream();
+            InputStream var1 = Minecraft.getMinecraft().func_110442_L().func_110536_a(new ResourceLocation("font/glyph_sizes.bin")).func_110527_b();
             var1.read(this.glyphWidth);
         }
         catch (IOException var2)
@@ -260,30 +260,30 @@
         float var3 = (float)(par1 % 16 * 8);
         float var4 = (float)(par1 / 16 * 8);
         float var5 = par2 ? 1.0F : 0.0F;
-        this.renderEngine.bindTexture(this.locationFontTexture);
+        this.renderEngine.func_110577_a(this.field_111273_g);
         float var6 = this.charWidth[par1] - 0.01F;
         GL11.glBegin(GL11.GL_TRIANGLE_STRIP);
         GL11.glTexCoord2f(var3 / 128.0F, var4 / 128.0F);
         GL11.glVertex3f(this.posX + var5, this.posY, 0.0F);
         GL11.glTexCoord2f(var3 / 128.0F, (var4 + 7.99F) / 128.0F);
         GL11.glVertex3f(this.posX - var5, this.posY + 7.99F, 0.0F);
-        GL11.glTexCoord2f((var3 + var6 - 1.0F) / 128.0F, var4 / 128.0F);
-        GL11.glVertex3f(this.posX + var6 - 1.0F + var5, this.posY, 0.0F);
-        GL11.glTexCoord2f((var3 + var6 - 1.0F) / 128.0F, (var4 + 7.99F) / 128.0F);
-        GL11.glVertex3f(this.posX + var6 - 1.0F - var5, this.posY + 7.99F, 0.0F);
+        GL11.glTexCoord2f((var3 + var6) / 128.0F, var4 / 128.0F);
+        GL11.glVertex3f(this.posX + var6 + var5, this.posY, 0.0F);
+        GL11.glTexCoord2f((var3 + var6) / 128.0F, (var4 + 7.99F) / 128.0F);
+        GL11.glVertex3f(this.posX + var6 - var5, this.posY + 7.99F, 0.0F);
         GL11.glEnd();
         return this.charWidth[par1];
     }
 
-    private ResourceLocation getUnicodePageLocation(int par1)
+    private ResourceLocation func_111271_a(int par1)
     {
-        if (unicodePageLocations[par1] == null)
+        if (field_111274_c[par1] == null)
         {
-            unicodePageLocations[par1] = new ResourceLocation(String.format("textures/font/unicode_page_%02x.png", new Object[] {Integer.valueOf(par1)}));
-            unicodePageLocations[par1] = getHdFontLocation(unicodePageLocations[par1]);
+            field_111274_c[par1] = new ResourceLocation(String.format("textures/font/unicode_page_%02x.png", new Object[] {Integer.valueOf(par1)}));
+            field_111274_c[par1] = getHdFontLocation(field_111274_c[par1]);
         }
 
-        return unicodePageLocations[par1];
+        return field_111274_c[par1];
     }
 
     /**
@@ -291,7 +291,7 @@
      */
     private void loadGlyphTexture(int par1)
     {
-        this.renderEngine.bindTexture(this.getUnicodePageLocation(par1));
+        this.renderEngine.func_110577_a(this.func_111271_a(par1));
     }
 
     /**
@@ -962,8 +962,8 @@
                 case 10:
                     --var5;
                     break;
-
                 case 167:
+
                     if (var5 < var3 - 1)
                     {
                         ++var5;
@@ -983,10 +983,8 @@
                     }
 
                     break;
-
                 case 32:
                     var6 = var5;
-
                 default:
                     var4 += this.getCharWidthFloat(var8);
 
@@ -1067,7 +1065,7 @@
 
     private void readCustomCharWidths()
     {
-        String fontFileName = this.locationFontTexture.getResourcePath();
+        String fontFileName = this.field_111273_g.func_110623_a();
         String suffix = ".png";
 
         if (fontFileName.endsWith(suffix))
@@ -1076,7 +1074,7 @@
 
             try
             {
-                ResourceLocation e = new ResourceLocation(this.locationFontTexture.getResourceDomain(), fileName);
+                ResourceLocation e = new ResourceLocation(this.field_111273_g.func_110624_b(), fileName);
                 InputStream in = Config.getResourceStream(Config.getResourceManager(), e);
 
                 if (in == null)
@@ -1136,7 +1134,7 @@
         }
         else
         {
-            String fontName = fontLoc.getResourcePath();
+            String fontName = fontLoc.func_110623_a();
             String texturesStr = "textures/";
             String mcpatcherStr = "mcpatcher/";
 
@@ -1148,7 +1146,7 @@
             {
                 fontName = fontName.substring(texturesStr.length());
                 fontName = mcpatcherStr + fontName;
-                ResourceLocation fontLocHD = new ResourceLocation(fontLoc.getResourceDomain(), fontName);
+                ResourceLocation fontLocHD = new ResourceLocation(fontLoc.func_110624_b(), fontName);
                 return Config.hasResource(Config.getResourceManager(), fontLocHD) ? fontLocHD : fontLoc;
             }
         }
