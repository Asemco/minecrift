--- a/net/minecraft/src/RenderGlobal.java
+++ b/net/minecraft/src/RenderGlobal.java
@@ -15,10 +15,10 @@
 
 public class RenderGlobal implements IWorldAccess
 {
-    private static final ResourceLocation locationMoonPhasesPng = new ResourceLocation("textures/environment/moon_phases.png");
-    private static final ResourceLocation locationSunPng = new ResourceLocation("textures/environment/sun.png");
-    private static final ResourceLocation locationCloudsPng = new ResourceLocation("textures/environment/clouds.png");
-    private static final ResourceLocation locationEndSkyPng = new ResourceLocation("textures/environment/end_sky.png");
+    private static final ResourceLocation field_110927_h = new ResourceLocation("textures/environment/moon_phases.png");
+    private static final ResourceLocation field_110928_i = new ResourceLocation("textures/environment/sun.png");
+    private static final ResourceLocation field_110925_j = new ResourceLocation("textures/environment/clouds.png");
+    private static final ResourceLocation field_110926_k = new ResourceLocation("textures/environment/end_sky.png");
     public List tileEntities = new ArrayList();
     public WorldClient theWorld;
 
@@ -153,12 +153,11 @@
     public Entity renderedEntity;
     private long lastMovedTime = System.currentTimeMillis();
     private long lastActionTime = System.currentTimeMillis();
-    private static AxisAlignedBB AABB_INFINITE = AxisAlignedBB.getBoundingBox(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
 
     public RenderGlobal(Minecraft par1Minecraft)
     {
         this.mc = par1Minecraft;
-        this.renderEngine = par1Minecraft.getTextureManager();
+        this.renderEngine = par1Minecraft.func_110434_K();
         byte var2 = 65;
         byte var3 = 16;
         this.glRenderListBase = GLAllocation.generateDisplayLists(var2 * var2 * var3 * 3);
@@ -340,12 +339,14 @@
                 var1 = var3;
             }
 
+            // TODO: Set chunk renderer attribs for greater draw distance
             this.prevReposX = -9999.0D;
             this.prevReposY = -9999.0D;
             this.prevReposZ = -9999.0D;
             this.renderChunksWide = var1 / 16 + 1;
             this.renderChunksTall = 16;
             this.renderChunksDeep = var1 / 16 + 1;
+
             this.worldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
             this.sortedWorldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
             int var4 = 0;
@@ -427,161 +428,129 @@
      */
     public void renderEntities(Vec3 par1Vec3, ICamera par2ICamera, float par3)
     {
-        int var4 = 0;
-
-        if (Reflector.MinecraftForgeClient_getRenderPass.exists())
-        {
-            var4 = Reflector.callInt(Reflector.MinecraftForgeClient_getRenderPass, new Object[0]);
-        }
-
-        boolean var5 = Reflector.ForgeEntity_shouldRenderInPass.exists();
-        boolean var6 = Reflector.ForgeTileEntity_shouldRenderInPass.exists();
-
         if (this.renderEntitiesStartupCounter > 0)
         {
-            if (var4 > 0)
-            {
-                return;
-            }
-
             --this.renderEntitiesStartupCounter;
         }
         else
         {
             this.theWorld.theProfiler.startSection("prepare");
-            TileEntityRenderer.instance.cacheActiveRenderInfo(this.theWorld, this.mc.getTextureManager(), this.mc.fontRenderer, this.mc.renderViewEntity, par3);
-            RenderManager.instance.cacheActiveRenderInfo(this.theWorld, this.mc.getTextureManager(), this.mc.fontRenderer, this.mc.renderViewEntity, this.mc.pointedEntityLiving, this.mc.gameSettings, par3);
-
-            if (var4 == 0)
-            {
-                this.countEntitiesTotal = 0;
-                this.countEntitiesRendered = 0;
-                this.countEntitiesHidden = 0;
-                EntityLivingBase var7 = this.mc.renderViewEntity;
-                RenderManager.renderPosX = var7.lastTickPosX + (var7.posX - var7.lastTickPosX) * (double)par3;
-                RenderManager.renderPosY = var7.lastTickPosY + (var7.posY - var7.lastTickPosY) * (double)par3;
-                RenderManager.renderPosZ = var7.lastTickPosZ + (var7.posZ - var7.lastTickPosZ) * (double)par3;
-                TileEntityRenderer.staticPlayerX = var7.lastTickPosX + (var7.posX - var7.lastTickPosX) * (double)par3;
-                TileEntityRenderer.staticPlayerY = var7.lastTickPosY + (var7.posY - var7.lastTickPosY) * (double)par3;
-                TileEntityRenderer.staticPlayerZ = var7.lastTickPosZ + (var7.posZ - var7.lastTickPosZ) * (double)par3;
-            }
-
+            TileEntityRenderer.instance.cacheActiveRenderInfo(this.theWorld, this.mc.func_110434_K(), this.mc.fontRenderer, this.mc.renderViewEntity, par3);
+            RenderManager.instance.cacheActiveRenderInfo(this.theWorld, this.mc.func_110434_K(), this.mc.fontRenderer, this.mc.renderViewEntity, this.mc.pointedEntityLiving, this.mc.gameSettings, par3);
+            this.countEntitiesTotal = 0;
+            this.countEntitiesRendered = 0;
+            this.countEntitiesHidden = 0;
+            EntityLivingBase var4 = this.mc.renderViewEntity;
+            RenderManager.renderPosX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)par3;
+            RenderManager.renderPosY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)par3;
+            RenderManager.renderPosZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)par3;
+            TileEntityRenderer.staticPlayerX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)par3;
+            TileEntityRenderer.staticPlayerY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)par3;
+            TileEntityRenderer.staticPlayerZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)par3;
             this.mc.entityRenderer.enableLightmap((double)par3);
             this.theWorld.theProfiler.endStartSection("global");
-            List var18 = this.theWorld.getLoadedEntityList();
+            List var5 = this.theWorld.getLoadedEntityList();
+            this.countEntitiesTotal = var5.size();
+            int var6;
+            Entity var7;
 
-            if (var4 == 0)
+            for (var6 = 0; var6 < this.theWorld.weatherEffects.size(); ++var6)
             {
-                this.countEntitiesTotal = var18.size();
-            }
+                var7 = (Entity)this.theWorld.weatherEffects.get(var6);
+                ++this.countEntitiesRendered;
 
-            if (Config.isFogOff() && this.mc.entityRenderer.fogStandard)
-            {
-                GL11.glDisable(GL11.GL_FOG);
+                if (var7.isInRangeToRenderVec3D(par1Vec3))
+                {
+                    RenderManager.instance.renderEntity(var7, par3);
+                }
             }
 
-            int var8;
-            Entity var9;
+            this.theWorld.theProfiler.endStartSection("entities");
+            boolean var8 = this.mc.gameSettings.fancyGraphics;
+            this.mc.gameSettings.fancyGraphics = Config.isDroppedItemsFancy();
 
-            for (var8 = 0; var8 < this.theWorld.weatherEffects.size(); ++var8)
+            for (var6 = 0; var6 < var5.size(); ++var6)
             {
-                var9 = (Entity)this.theWorld.weatherEffects.get(var8);
+                var7 = (Entity)var5.get(var6);
+                boolean render = var7.isInRangeToRenderVec3D(par1Vec3) && (var7.ignoreFrustumCheck || par2ICamera.isBoundingBoxInFrustum(var7.boundingBox) || var7.riddenByEntity == this.mc.thePlayer);
 
-                if (!var5 || Reflector.callBoolean(var9, Reflector.ForgeEntity_shouldRenderInPass, new Object[] {Integer.valueOf(var4)}))
+                if (!render && var7 instanceof EntityLiving)
                 {
-                    ++this.countEntitiesRendered;
+                    EntityLiving var10 = (EntityLiving)var7;
 
-                    if (var9.isInRangeToRenderVec3D(par1Vec3))
+                    if (var10.func_110167_bD() && var10.func_110166_bE() != null)
                     {
-                        RenderManager.instance.renderEntity(var9, par3);
+                        Entity var11 = var10.func_110166_bE();
+                        render = par2ICamera.isBoundingBoxInFrustum(var11.boundingBox);
                     }
                 }
-            }
 
-            this.theWorld.theProfiler.endStartSection("entities");
-            boolean var10 = this.mc.gameSettings.fancyGraphics;
-            this.mc.gameSettings.fancyGraphics = Config.isDroppedItemsFancy();
 
-            for (var8 = 0; var8 < var18.size(); ++var8)
-            {
-                var9 = (Entity)var18.get(var8);
+                RenderPlayer renderPlayer = (RenderPlayer)RenderManager.instance.getEntityRenderObject(this.mc.thePlayer);
 
-                if (!var5 || Reflector.callBoolean(var9, Reflector.ForgeEntity_shouldRenderInPass, new Object[] {Integer.valueOf(var4)}))
+                if (var7 == this.mc.renderViewEntity && this.mc.gameSettings.thirdPersonView == 0 && !mc.renderViewEntity.isPlayerSleeping() )
                 {
-                    boolean var11 = var9.isInRangeToRenderVec3D(par1Vec3) && (var9.ignoreFrustumCheck || par2ICamera.isBoundingBoxInFrustum(var9.boundingBox) || var9.riddenByEntity == this.mc.thePlayer);
-
-                    if (!var11 && var9 instanceof EntityLiving)
-                    {
-                        EntityLiving var12 = (EntityLiving)var9;
+                	renderPlayer.setVR(true,this.mc.vrSettings.renderHeadWear, this.mc.vrSettings.renderPlayerOffset);
+                    if (this.mc.vrSettings.renderFullFirstPersonModel == false || this.mc.vrSettings.useVRRenderer == false)
+                        render = false;
+                }
 
-                        if (var12.getLeashed() && var12.getLeashedToEntity() != null)
-                        {
-                            Entity var13 = var12.getLeashedToEntity();
-                            var11 = par2ICamera.isBoundingBoxInFrustum(var13.boundingBox);
-                        }
-                    }
+                if (render)
+                {
+                    ++this.countEntitiesRendered;
 
-                    if (var11 && (var9 != this.mc.renderViewEntity || this.mc.gameSettings.thirdPersonView != 0 || this.mc.renderViewEntity.isPlayerSleeping()) && this.theWorld.blockExists(MathHelper.floor_double(var9.posX), 0, MathHelper.floor_double(var9.posZ)))
+                    if (var7.getClass() == EntityItemFrame.class)
                     {
-                        ++this.countEntitiesRendered;
+                        var7.renderDistanceWeight = 0.06D;
+                    }
 
-                        if (var9.getClass() == EntityItemFrame.class)
-                        {
-                            var9.renderDistanceWeight = 0.06D;
-                        }
+                    this.renderedEntity = var7;
+                    RenderManager.instance.renderEntity(var7, par3);
+                    this.renderedEntity = null;
+                }
 
-                        this.renderedEntity = var9;
-                        RenderManager.instance.renderEntity(var9, par3);
-                        this.renderedEntity = null;
-                    }
+                if (var7 == this.mc.renderViewEntity && this.mc.gameSettings.thirdPersonView == 0 && !mc.renderViewEntity.isPlayerSleeping() )
+                {
+                	renderPlayer.setVR(false,true,0.0F);
                 }
             }
 
-            this.mc.gameSettings.fancyGraphics = var10;
+            this.mc.gameSettings.fancyGraphics = var8;
             this.theWorld.theProfiler.endStartSection("tileentities");
             RenderHelper.enableStandardItemLighting();
 
-            for (var8 = 0; var8 < this.tileEntities.size(); ++var8)
+            for (var6 = 0; var6 < this.tileEntities.size(); ++var6)
             {
-                TileEntity var20 = (TileEntity)this.tileEntities.get(var8);
+                TileEntity var15 = (TileEntity)this.tileEntities.get(var6);
+                Class var17 = var15.getClass();
 
-                if (!var6 || Reflector.callBoolean(var20, Reflector.ForgeTileEntity_shouldRenderInPass, new Object[] {Integer.valueOf(var4)}))
+                if (var17 == TileEntitySign.class && !Config.zoomMode)
                 {
-                    AxisAlignedBB var19 = this.getTileEntityBoundingBox(var20);
+                    EntityClientPlayerMP var16 = this.mc.thePlayer;
+                    double var12 = var15.getDistanceFrom(var16.posX, var16.posY, var16.posZ);
 
-                    if (par2ICamera.isBoundingBoxInFrustum(var19))
+                    if (var12 > 256.0D)
                     {
-                        Class var21 = var20.getClass();
-
-                        if (var21 == TileEntitySign.class && !Config.zoomMode)
-                        {
-                            EntityClientPlayerMP var14 = this.mc.thePlayer;
-                            double var15 = var20.getDistanceFrom(var14.posX, var14.posY, var14.posZ);
-
-                            if (var15 > 256.0D)
-                            {
-                                FontRenderer var17 = TileEntityRenderer.instance.getFontRenderer();
-                                var17.enabled = false;
-                                TileEntityRenderer.instance.renderTileEntity(var20, par3);
-                                var17.enabled = true;
-                                continue;
-                            }
-                        }
-
-                        if (var21 == TileEntityChest.class)
-                        {
-                            int var23 = this.theWorld.getBlockId(var20.xCoord, var20.yCoord, var20.zCoord);
-                            Block var22 = Block.blocksList[var23];
+                        FontRenderer var14 = TileEntityRenderer.instance.getFontRenderer();
+                        var14.enabled = false;
+                        TileEntityRenderer.instance.renderTileEntity(var15, par3);
+                        var14.enabled = true;
+                        continue;
+                    }
+                }
 
-                            if (!(var22 instanceof BlockChest))
-                            {
-                                continue;
-                            }
-                        }
+                if (var17 == TileEntityChest.class)
+                {
+                    int var19 = this.theWorld.getBlockId(var15.xCoord, var15.yCoord, var15.zCoord);
+                    Block var18 = Block.blocksList[var19];
 
-                        TileEntityRenderer.instance.renderTileEntity(var20, par3);
+                    if (!(var18 instanceof BlockChest))
+                    {
+                        continue;
                     }
                 }
+
+                TileEntityRenderer.instance.renderTileEntity(var15, par3);
             }
 
             this.mc.entityRenderer.disableLightmap((double)par3);
@@ -779,10 +748,11 @@
         RenderHelper.disableStandardItemLighting();
         WrUpdates.preRender(this, par1EntityLivingBase);
 
-        if (this.mc.gameSettings.ofSmoothFps && par2 == 0)
-        {
-            GL11.glFinish();
-        }
+        // VR renderer already calls this.
+//        if (this.mc.gameSettings.ofSmoothFps && par2 == 0)
+//        {
+//            GL11.glFinish();
+//        }
 
         byte var42 = 0;
         int var44 = 0;
@@ -988,25 +958,24 @@
     {
         this.glListBuffer.clear();
         int var6 = 0;
-        boolean var7 = this.mc.gameSettings.showDebugInfo;
 
-        for (int var8 = par1; var8 < par2; ++var8)
+        for (int var7 = par1; var7 < par2; ++var7)
         {
-            WorldRenderer var9 = this.sortedWorldRenderers[var8];
+            WorldRenderer var8 = this.sortedWorldRenderers[var7];
 
-            if (var7 && par3 == 0)
+            if (par3 == 0)
             {
                 ++this.renderersLoaded;
 
-                if (var9.skipRenderPass[par3])
+                if (var8.skipRenderPass[par3])
                 {
                     ++this.renderersSkippingRenderPass;
                 }
-                else if (!var9.isInFrustum)
+                else if (!var8.isInFrustum)
                 {
                     ++this.renderersBeingClipped;
                 }
-                else if (this.occlusionEnabled && !var9.isVisible)
+                else if (this.occlusionEnabled && !var8.isVisible)
                 {
                     ++this.renderersBeingOccluded;
                 }
@@ -1016,13 +985,13 @@
                 }
             }
 
-            if (var9.isInFrustum && !var9.skipRenderPass[par3] && (!this.occlusionEnabled || var9.isVisible))
+            if (var8.isInFrustum && !var8.skipRenderPass[par3] && (!this.occlusionEnabled || var8.isVisible))
             {
-                int var10 = var9.getGLCallListForPass(par3);
+                int var9 = var8.getGLCallListForPass(par3);
 
-                if (var10 >= 0)
+                if (var9 >= 0)
                 {
-                    this.glListBuffer.put(var10);
+                    this.glListBuffer.put(var9);
                     ++var6;
                 }
             }
@@ -1040,14 +1009,14 @@
             }
 
             this.glListBuffer.flip();
-            EntityLivingBase var15 = this.mc.renderViewEntity;
-            double var16 = var15.lastTickPosX + (var15.posX - var15.lastTickPosX) * par4 - (double)WorldRenderer.globalChunkOffsetX;
-            double var11 = var15.lastTickPosY + (var15.posY - var15.lastTickPosY) * par4;
-            double var13 = var15.lastTickPosZ + (var15.posZ - var15.lastTickPosZ) * par4 - (double)WorldRenderer.globalChunkOffsetZ;
+            EntityLivingBase var14 = this.mc.renderViewEntity;
+            double var15 = var14.lastTickPosX + (var14.posX - var14.lastTickPosX) * par4 - (double)WorldRenderer.globalChunkOffsetX;
+            double var10 = var14.lastTickPosY + (var14.posY - var14.lastTickPosY) * par4;
+            double var12 = var14.lastTickPosZ + (var14.posZ - var14.lastTickPosZ) * par4 - (double)WorldRenderer.globalChunkOffsetZ;
             this.mc.entityRenderer.enableLightmap(par4);
-            GL11.glTranslatef((float)(-var16), (float)(-var11), (float)(-var13));
+            GL11.glTranslatef((float)(-var15), (float)(-var10), (float)(-var12));
             GL11.glCallLists(this.glListBuffer);
-            GL11.glTranslatef((float)var16, (float)var11, (float)var13);
+            GL11.glTranslatef((float)var15, (float)var10, (float)var12);
             this.mc.entityRenderer.disableLightmap(par4);
             return var6;
         }
@@ -1109,7 +1078,7 @@
             GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
             RenderHelper.disableStandardItemLighting();
             GL11.glDepthMask(false);
-            this.renderEngine.bindTexture(locationEndSkyPng);
+            this.renderEngine.func_110577_a(field_110926_k);
             Tessellator var20 = Tessellator.instance;
 
             for (int var22 = 0; var22 < 6; ++var22)
@@ -1258,7 +1227,7 @@
             if (Config.isSunMoonEnabled())
             {
                 var12 = 30.0F;
-                this.renderEngine.bindTexture(locationSunPng);
+                this.renderEngine.func_110577_a(field_110928_i);
                 var24.startDrawingQuads();
                 var24.addVertexWithUV((double)(-var12), 100.0D, (double)(-var12), 0.0D, 0.0D);
                 var24.addVertexWithUV((double)var12, 100.0D, (double)(-var12), 1.0D, 0.0D);
@@ -1266,7 +1235,7 @@
                 var24.addVertexWithUV((double)(-var12), 100.0D, (double)var12, 0.0D, 1.0D);
                 var24.draw();
                 var12 = 20.0F;
-                this.renderEngine.bindTexture(locationMoonPhasesPng);
+                this.renderEngine.func_110577_a(field_110927_h);
                 int var26 = this.theWorld.getMoonPhase();
                 int var27 = var26 % 4;
                 var15 = var26 / 4 % 2;
@@ -1391,7 +1360,7 @@
                     byte var25 = 32;
                     int var4 = 256 / var25;
                     Tessellator var5 = Tessellator.instance;
-                    this.renderEngine.bindTexture(locationCloudsPng);
+                    this.renderEngine.func_110577_a(field_110925_j);
                     GL11.glEnable(GL11.GL_BLEND);
                     GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
                     Vec3 var6 = this.theWorld.getCloudColour(par1);
@@ -1472,7 +1441,7 @@
         int var14 = MathHelper.floor_double(var10 / 2048.0D);
         var8 -= (double)(var13 * 2048);
         var10 -= (double)(var14 * 2048);
-        this.renderEngine.bindTexture(locationCloudsPng);
+        this.renderEngine.func_110577_a(field_110925_j);
         GL11.glEnable(GL11.GL_BLEND);
         GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
         Vec3 var15 = this.theWorld.getCloudColour(par1);
@@ -1763,7 +1732,7 @@
         if (!this.damagedBlocks.isEmpty())
         {
             GL11.glBlendFunc(GL11.GL_DST_COLOR, GL11.GL_SRC_COLOR);
-            this.renderEngine.bindTexture(TextureMap.locationBlocksTexture);
+            this.renderEngine.func_110577_a(TextureMap.field_110575_b);
             GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.5F);
             GL11.glPushMatrix();
             GL11.glDisable(GL11.GL_ALPHA_TEST);
@@ -2338,6 +2307,7 @@
         {
             case 1013:
             case 1018:
+
                 if (this.mc.renderViewEntity != null)
                 {
                     double var7 = (double)par2 - this.mc.renderViewEntity.posX;
@@ -2392,16 +2362,14 @@
             case 1000:
                 this.theWorld.playSound((double)par3, (double)par4, (double)par5, "random.click", 1.0F, 1.0F, false);
                 break;
-
             case 1001:
                 this.theWorld.playSound((double)par3, (double)par4, (double)par5, "random.click", 1.0F, 1.2F, false);
                 break;
-
             case 1002:
                 this.theWorld.playSound((double)par3, (double)par4, (double)par5, "random.bow", 1.0F, 1.2F, false);
                 break;
-
             case 1003:
+
                 if (Math.random() < 0.5D)
                 {
                     this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "random.door_open", 1.0F, this.theWorld.rand.nextFloat() * 0.1F + 0.9F, false);
@@ -2412,12 +2380,11 @@
                 }
 
                 break;
-
             case 1004:
                 this.theWorld.playSound((double)((float)par3 + 0.5F), (double)((float)par4 + 0.5F), (double)((float)par5 + 0.5F), "random.fizz", 0.5F, 2.6F + (var7.nextFloat() - var7.nextFloat()) * 0.8F, false);
                 break;
-
             case 1005:
+
                 if (Item.itemsList[par6] instanceof ItemRecord)
                 {
                     this.theWorld.playRecord(((ItemRecord)Item.itemsList[par6]).recordName, par3, par4, par5);
@@ -2428,59 +2395,45 @@
                 }
 
                 break;
-
             case 1007:
                 this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "mob.ghast.charge", 10.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F, false);
                 break;
-
             case 1008:
                 this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "mob.ghast.fireball", 10.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F, false);
                 break;
-
             case 1009:
                 this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "mob.ghast.fireball", 2.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F, false);
                 break;
-
             case 1010:
                 this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "mob.zombie.wood", 2.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F, false);
                 break;
-
             case 1011:
                 this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "mob.zombie.metal", 2.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F, false);
                 break;
-
             case 1012:
                 this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "mob.zombie.woodbreak", 2.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F, false);
                 break;
-
             case 1014:
                 this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "mob.wither.shoot", 2.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F, false);
                 break;
-
             case 1015:
                 this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "mob.bat.takeoff", 0.05F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F, false);
                 break;
-
             case 1016:
                 this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "mob.zombie.infect", 2.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F, false);
                 break;
-
             case 1017:
                 this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "mob.zombie.unfect", 2.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F, false);
                 break;
-
             case 1020:
                 this.theWorld.playSound((double)((float)par3 + 0.5F), (double)((float)par4 + 0.5F), (double)((float)par5 + 0.5F), "random.anvil_break", 1.0F, this.theWorld.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
-
             case 1021:
                 this.theWorld.playSound((double)((float)par3 + 0.5F), (double)((float)par4 + 0.5F), (double)((float)par5 + 0.5F), "random.anvil_use", 1.0F, this.theWorld.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
-
             case 1022:
                 this.theWorld.playSound((double)((float)par3 + 0.5F), (double)((float)par4 + 0.5F), (double)((float)par5 + 0.5F), "random.anvil_land", 0.3F, this.theWorld.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
-
             case 2000:
                 int var27 = par6 % 3 - 1;
                 int var28 = par6 / 3 % 3 - 1;
@@ -2501,7 +2454,6 @@
                 }
 
                 return;
-
             case 2001:
                 var16 = par6 & 4095;
 
@@ -2513,7 +2465,6 @@
 
                 this.mc.effectRenderer.addBlockDestroyEffects(par3, par4, par5, par6 & 4095, par6 >> 12 & 255);
                 break;
-
             case 2002:
                 var8 = (double)par3;
                 var10 = (double)par4;
@@ -2555,7 +2506,6 @@
 
                 this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "random.glass", 1.0F, this.theWorld.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
-
             case 2003:
                 var8 = (double)par3 + 0.5D;
                 var10 = (double)par4;
@@ -2574,8 +2524,8 @@
                 }
 
                 return;
-
             case 2004:
+
                 for (int var35 = 0; var35 < 20; ++var35)
                 {
                     double var36 = (double)par3 + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
@@ -2586,7 +2536,6 @@
                 }
 
                 return;
-
             case 2005:
                 ItemDye.func_96603_a(this.theWorld, par3, par4, par5, par6);
         }
@@ -2698,37 +2647,9 @@
                 if (entity instanceof AbstractClientPlayer)
                 {
                     AbstractClientPlayer player = (AbstractClientPlayer)entity;
-                    player.getTextureCape().enabled = showCapes;
-                }
-            }
-        }
-    }
-
-    public AxisAlignedBB getTileEntityBoundingBox(TileEntity te)
-    {
-        Block blockType = te.getBlockType();
-
-        if (blockType == Block.enchantmentTable)
-        {
-            return AxisAlignedBB.getAABBPool().getAABB((double)te.xCoord, (double)te.yCoord, (double)te.zCoord, (double)(te.xCoord + 1), (double)(te.yCoord + 1), (double)(te.zCoord + 1));
-        }
-        else if (blockType != Block.chest && blockType != Block.chestTrapped)
-        {
-            if (blockType != null && blockType != Block.beacon)
-            {
-                AxisAlignedBB blockAabb = te.getBlockType().getCollisionBoundingBoxFromPool(te.worldObj, te.xCoord, te.yCoord, te.zCoord);
-
-                if (blockAabb != null)
-                {
-                    return blockAabb;
+                    player.func_110310_o().enabled = showCapes;
                 }
             }
-
-            return AABB_INFINITE;
-        }
-        else
-        {
-            return AxisAlignedBB.getAABBPool().getAABB((double)(te.xCoord - 1), (double)te.yCoord, (double)(te.zCoord - 1), (double)(te.xCoord + 2), (double)(te.yCoord + 2), (double)(te.zCoord + 2));
         }
     }
 }
