--- a/net/minecraft/src/ConnectedTextures.java
+++ b/net/minecraft/src/ConnectedTextures.java
@@ -54,7 +54,7 @@
     public static final IBlockState AIR_DEFAULT_STATE = Blocks.air.getDefaultState();
     private static TextureAtlasSprite emptySprite = null;
 
-    public static synchronized BakedQuad getConnectedTexture(IBlockAccess blockAccess, IBlockState blockState, BlockPos blockPos, BakedQuad quad)
+    public static synchronized BakedQuad getConnectedTexture(IBlockAccess blockAccess, IBlockState blockState, BlockPos blockPos, BakedQuad quad, RenderEnv renderEnv)
     {
         TextureAtlasSprite spriteIn = quad.getSprite();
 
@@ -77,7 +77,7 @@
             }
 
             EnumFacing side1 = quad.getFace();
-            TextureAtlasSprite sprite = getConnectedTextureMultiPass(blockAccess, block, blockState, blockPos, side1, quad.getSprite());
+            TextureAtlasSprite sprite = getConnectedTextureMultiPass(blockAccess, blockState, blockPos, side1, spriteIn, renderEnv);
             return sprite == spriteIn ? quad : getQuad(sprite, block, blockState, quad);
         }
     }
@@ -144,124 +144,116 @@
         data[pos + 4 + 1] = Float.floatToRawIntBits(spriteTo.getInterpolatedV(sv16));
     }
 
-    private static TextureAtlasSprite getConnectedTextureMultiPass(IBlockAccess blockAccess, Block block, IBlockState blockState, BlockPos blockPos, EnumFacing side, TextureAtlasSprite icon)
+    private static TextureAtlasSprite getConnectedTextureMultiPass(IBlockAccess blockAccess, IBlockState blockState, BlockPos blockPos, EnumFacing side, TextureAtlasSprite icon, RenderEnv renderEnv)
     {
-        if (blockAccess == null)
+        TextureAtlasSprite newIcon = getConnectedTextureSingle(blockAccess, blockState, blockPos, side, icon, true, renderEnv);
+
+        if (!multipass)
         {
-            return icon;
+            return newIcon;
+        }
+        else if (newIcon == icon)
+        {
+            return newIcon;
         }
         else
         {
-            TextureAtlasSprite newIcon = getConnectedTextureSingle(blockAccess, block, blockState, blockPos, side, icon, true);
+            TextureAtlasSprite mpIcon = newIcon;
 
-            if (!multipass)
+            for (int i = 0; i < 3; ++i)
             {
-                return newIcon;
-            }
-            else if (newIcon == icon)
-            {
-                return newIcon;
-            }
-            else
-            {
-                TextureAtlasSprite mpIcon = newIcon;
+                TextureAtlasSprite newMpIcon = getConnectedTextureSingle(blockAccess, blockState, blockPos, side, mpIcon, false, renderEnv);
 
-                for (int i = 0; i < 3; ++i)
+                if (newMpIcon == mpIcon)
                 {
-                    TextureAtlasSprite newMpIcon = getConnectedTextureSingle(blockAccess, block, blockState, blockPos, side, mpIcon, false);
-
-                    if (newMpIcon == mpIcon)
-                    {
-                        break;
-                    }
-
-                    mpIcon = newMpIcon;
+                    break;
                 }
 
-                return mpIcon;
+                mpIcon = newMpIcon;
             }
+
+            return mpIcon;
         }
     }
 
-    public static TextureAtlasSprite getConnectedTextureSingle(IBlockAccess blockAccess, Block block, IBlockState blockState, BlockPos blockPos, EnumFacing facing, TextureAtlasSprite icon, boolean checkBlocks)
+    public static TextureAtlasSprite getConnectedTextureSingle(IBlockAccess blockAccess, IBlockState blockState, BlockPos blockPos, EnumFacing facing, TextureAtlasSprite icon, boolean checkBlocks, RenderEnv renderEnv)
     {
-        if (!(icon instanceof TextureAtlasSprite))
-        {
-            return icon;
-        }
-        else
+        Block block = blockState.getBlock();
+        int blockId;
+        ConnectedProperties[] cps;
+        int metadata;
+        int side;
+        int i;
+        ConnectedProperties cp;
+
+        if (tileProperties != null)
         {
-            int iconId = icon.getIndexInMap();
-            int metadata = -1;
-            int side;
+            blockId = icon.getIndexInMap();
 
-            if (tileProperties != null && iconId >= 0 && iconId < tileProperties.length)
+            if (blockId >= 0 && blockId < tileProperties.length)
             {
-                ConnectedProperties[] blockId = tileProperties[iconId];
+                cps = tileProperties[blockId];
 
-                if (blockId != null)
+                if (cps != null)
                 {
-                    if (metadata < 0)
-                    {
-                        metadata = block.getMetaFromState(blockState);
-                    }
+                    metadata = renderEnv.getMetadata();
+                    side = getSide(facing);
 
-                    int cps = getSide(facing);
-
-                    for (side = 0; side < blockId.length; ++side)
+                    for (i = 0; i < cps.length; ++i)
                     {
-                        ConnectedProperties i = blockId[side];
+                        cp = cps[i];
 
-                        if (i != null && i.matchesBlock(block))
+                        if (cp != null)
                         {
-                            TextureAtlasSprite cp = getConnectedTexture(i, blockAccess, blockState, blockPos, cps, icon, metadata);
+                            int newIcon = renderEnv.getBlockId();
 
-                            if (cp != null)
+                            if (cp.matchesBlock(newIcon))
                             {
-                                return cp;
+                                TextureAtlasSprite newIcon1 = getConnectedTexture(cp, blockAccess, blockState, blockPos, side, icon, metadata, renderEnv);
+
+                                if (newIcon1 != null)
+                                {
+                                    return newIcon1;
+                                }
                             }
                         }
                     }
                 }
             }
+        }
 
-            if (blockProperties != null && checkBlocks)
+        if (blockProperties != null && checkBlocks)
+        {
+            blockId = renderEnv.getBlockId();
+
+            if (blockId >= 0 && blockId < blockProperties.length)
             {
-                int var16 = Block.getIdFromBlock(block);
+                cps = blockProperties[blockId];
 
-                if (var16 >= 0 && var16 < blockProperties.length)
+                if (cps != null)
                 {
-                    ConnectedProperties[] var17 = blockProperties[var16];
+                    metadata = renderEnv.getMetadata();
+                    side = getSide(facing);
 
-                    if (var17 != null)
+                    for (i = 0; i < cps.length; ++i)
                     {
-                        if (metadata < 0)
-                        {
-                            metadata = block.getMetaFromState(blockState);
-                        }
+                        cp = cps[i];
 
-                        side = getSide(facing);
-
-                        for (int var18 = 0; var18 < var17.length; ++var18)
+                        if (cp != null && cp.matchesIcon(icon))
                         {
-                            ConnectedProperties var19 = var17[var18];
+                            TextureAtlasSprite var16 = getConnectedTexture(cp, blockAccess, blockState, blockPos, side, icon, metadata, renderEnv);
 
-                            if (var19 != null && var19.matchesIcon(icon))
+                            if (var16 != null)
                             {
-                                TextureAtlasSprite newIcon = getConnectedTexture(var19, blockAccess, blockState, blockPos, side, icon, metadata);
-
-                                if (newIcon != null)
-                                {
-                                    return newIcon;
-                                }
+                                return var16;
                             }
                         }
                     }
                 }
             }
-
-            return icon;
         }
+
+        return icon;
     }
 
     private static int getSide(EnumFacing facing)
@@ -272,7 +264,7 @@
         }
         else
         {
-            switch (ConnectedTextures.NamelessClass804130912.$SwitchMap$net$minecraft$util$EnumFacing[facing.ordinal()])
+            switch (ConnectedTextures.NamelessClass757140099.$SwitchMap$net$minecraft$util$EnumFacing[facing.ordinal()])
             {
                 case 1:
                     return 0;
@@ -325,91 +317,7 @@
         }
     }
 
-    public static ConnectedProperties getConnectedProperties(IBlockAccess blockAccess, Block block, IBlockState blockState, BlockPos blockPos, int side, TextureAtlasSprite icon)
-    {
-        if (blockAccess == null)
-        {
-            return null;
-        }
-        else if (!(icon instanceof TextureAtlasSprite))
-        {
-            return null;
-        }
-        else
-        {
-            int iconId = icon.getIndexInMap();
-            int metadata = -1;
-
-            if (tileProperties != null && iconId >= 0 && iconId < tileProperties.length)
-            {
-                ConnectedProperties[] blockId = tileProperties[iconId];
-
-                if (blockId != null)
-                {
-                    if (metadata < 0)
-                    {
-                        metadata = block.getMetaFromState(blockState);
-                    }
-
-                    ConnectedProperties cps = getConnectedProperties(blockId, blockAccess, blockState, blockPos, side, icon, metadata);
-
-                    if (cps != null)
-                    {
-                        return cps;
-                    }
-                }
-            }
-
-            if (blockProperties != null)
-            {
-                int blockId1 = Block.getIdFromBlock(block);
-
-                if (blockId1 >= 0 && blockId1 < blockProperties.length)
-                {
-                    ConnectedProperties[] cps1 = blockProperties[blockId1];
-
-                    if (cps1 != null)
-                    {
-                        if (metadata < 0)
-                        {
-                            metadata = block.getMetaFromState(blockState);
-                        }
-
-                        ConnectedProperties cp = getConnectedProperties(cps1, blockAccess, blockState, blockPos, side, icon, metadata);
-
-                        if (cp != null)
-                        {
-                            return cp;
-                        }
-                    }
-                }
-            }
-
-            return null;
-        }
-    }
-
-    private static ConnectedProperties getConnectedProperties(ConnectedProperties[] cps, IBlockAccess blockAccess, IBlockState blockState, BlockPos blockPos, int side, TextureAtlasSprite icon, int metadata)
-    {
-        for (int i = 0; i < cps.length; ++i)
-        {
-            ConnectedProperties cp = cps[i];
-
-            if (cp != null)
-            {
-                TextureAtlasSprite newIcon = getConnectedTexture(cp, blockAccess, blockState, blockPos, side, icon, metadata);
-
-                if (newIcon != null)
-                {
-                    return cp;
-                }
-            }
-        }
-
-        return null;
-    }
-
-    private static TextureAtlasSprite getConnectedTexture(ConnectedProperties cp, IBlockAccess blockAccess, IBlockState blockState, BlockPos blockPos, int side, TextureAtlasSprite icon, int metadata)
+    private static TextureAtlasSprite getConnectedTexture(ConnectedProperties cp, IBlockAccess blockAccess, IBlockState blockState, BlockPos blockPos, int side, TextureAtlasSprite icon, int metadata, RenderEnv renderEnv)
     {
         int y = blockPos.getY();
 
@@ -437,36 +345,36 @@
                 }
             }
 
-            int var14 = 0;
-            int var15 = metadata;
-            Block var16 = blockState.getBlock();
+            int var15 = 0;
+            int var16 = metadata;
+            Block var17 = blockState.getBlock();
 
-            if (var16 instanceof BlockRotatedPillar)
+            if (var17 instanceof BlockRotatedPillar)
             {
-                var14 = getWoodAxis(side, metadata);
-                var15 = metadata & 3;
+                var15 = getWoodAxis(side, metadata);
+                var16 = metadata & 3;
             }
 
-            if (var16 instanceof BlockQuartz)
+            if (var17 instanceof BlockQuartz)
             {
-                var14 = getQuartzAxis(side, metadata);
+                var15 = getQuartzAxis(side, metadata);
 
-                if (var15 > 2)
+                if (var16 > 2)
                 {
-                    var15 = 2;
+                    var16 = 2;
                 }
             }
 
             if (side >= 0 && cp.faces != 63)
             {
-                int var17 = side;
+                int var18 = side;
 
-                if (var14 != 0)
+                if (var15 != 0)
                 {
-                    var17 = fixSideByAxis(side, var14);
+                    var18 = fixSideByAxis(side, var15);
                 }
 
-                if ((1 << var17 & cp.faces) == 0)
+                if ((1 << var18 & cp.faces) == 0)
                 {
                     return null;
                 }
@@ -474,12 +382,12 @@
 
             if (cp.metadatas != null)
             {
-                int[] var18 = cp.metadatas;
+                int[] var19 = cp.metadatas;
                 boolean metadataFound = false;
 
-                for (int i = 0; i < var18.length; ++i)
+                for (int i = 0; i < var19.length; ++i)
                 {
-                    if (var18[i] == var15)
+                    if (var19[i] == var16)
                     {
                         metadataFound = true;
                         break;
@@ -495,13 +403,13 @@
             switch (cp.method)
             {
                 case 1:
-                    return getConnectedTextureCtm(cp, blockAccess, blockState, blockPos, side, icon, metadata);
+                    return getConnectedTextureCtm(cp, blockAccess, blockState, blockPos, side, icon, metadata, renderEnv);
 
                 case 2:
-                    return getConnectedTextureHorizontal(cp, blockAccess, blockState, blockPos, var14, side, icon, metadata);
+                    return getConnectedTextureHorizontal(cp, blockAccess, blockState, blockPos, var15, side, icon, metadata);
 
                 case 3:
-                    return getConnectedTextureTop(cp, blockAccess, blockState, blockPos, var14, side, icon, metadata);
+                    return getConnectedTextureTop(cp, blockAccess, blockState, blockPos, var15, side, icon, metadata);
 
                 case 4:
                     return getConnectedTextureRandom(cp, blockPos, side);
@@ -510,16 +418,16 @@
                     return getConnectedTextureRepeat(cp, blockPos, side);
 
                 case 6:
-                    return getConnectedTextureVertical(cp, blockAccess, blockState, blockPos, var14, side, icon, metadata);
+                    return getConnectedTextureVertical(cp, blockAccess, blockState, blockPos, var15, side, icon, metadata);
 
                 case 7:
                     return getConnectedTextureFixed(cp);
 
                 case 8:
-                    return getConnectedTextureHorizontalVertical(cp, blockAccess, blockState, blockPos, var14, side, icon, metadata);
+                    return getConnectedTextureHorizontalVertical(cp, blockAccess, blockState, blockPos, var15, side, icon, metadata);
 
                 case 9:
-                    return getConnectedTextureVerticalHorizontal(cp, blockAccess, blockState, blockPos, var14, side, icon, metadata);
+                    return getConnectedTextureVerticalHorizontal(cp, blockAccess, blockState, blockPos, var15, side, icon, metadata);
 
                 default:
                     return null;
@@ -719,9 +627,9 @@
         }
     }
 
-    private static TextureAtlasSprite getConnectedTextureCtm(ConnectedProperties cp, IBlockAccess blockAccess, IBlockState blockState, BlockPos blockPos, int side, TextureAtlasSprite icon, int metadata)
+    private static TextureAtlasSprite getConnectedTextureCtm(ConnectedProperties cp, IBlockAccess blockAccess, IBlockState blockState, BlockPos blockPos, int side, TextureAtlasSprite icon, int metadata, RenderEnv renderEnv)
     {
-        boolean[] borders = new boolean[6];
+        boolean[] borders = renderEnv.getBorderFlags();
 
         switch (side)
         {
@@ -840,167 +748,171 @@
         }
         else
         {
-            boolean[] edges = new boolean[6];
-
             switch (side)
             {
                 case 0:
+                    borders[0] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetNorth(), side, icon, metadata);
+                    borders[1] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetNorth(), side, icon, metadata);
+                    borders[2] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetSouth(), side, icon, metadata);
+                    borders[3] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetSouth(), side, icon, metadata);
+                    break;
+
                 case 1:
-                    edges[0] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetSouth(), side, icon, metadata);
-                    edges[1] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetSouth(), side, icon, metadata);
-                    edges[2] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetNorth(), side, icon, metadata);
-                    edges[3] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetNorth(), side, icon, metadata);
+                    borders[0] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetSouth(), side, icon, metadata);
+                    borders[1] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetSouth(), side, icon, metadata);
+                    borders[2] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetNorth(), side, icon, metadata);
+                    borders[3] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetNorth(), side, icon, metadata);
                     break;
 
                 case 2:
-                    edges[0] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetDown(), side, icon, metadata);
-                    edges[1] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetDown(), side, icon, metadata);
-                    edges[2] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetUp(), side, icon, metadata);
-                    edges[3] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetUp(), side, icon, metadata);
+                    borders[0] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetDown(), side, icon, metadata);
+                    borders[1] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetDown(), side, icon, metadata);
+                    borders[2] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetUp(), side, icon, metadata);
+                    borders[3] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetUp(), side, icon, metadata);
                     break;
 
                 case 3:
-                    edges[0] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetDown(), side, icon, metadata);
-                    edges[1] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetDown(), side, icon, metadata);
-                    edges[2] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetUp(), side, icon, metadata);
-                    edges[3] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetUp(), side, icon, metadata);
+                    borders[0] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetDown(), side, icon, metadata);
+                    borders[1] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetDown(), side, icon, metadata);
+                    borders[2] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetEast().offsetUp(), side, icon, metadata);
+                    borders[3] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetWest().offsetUp(), side, icon, metadata);
                     break;
 
                 case 4:
-                    edges[0] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetDown().offsetSouth(), side, icon, metadata);
-                    edges[1] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetDown().offsetNorth(), side, icon, metadata);
-                    edges[2] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetUp().offsetSouth(), side, icon, metadata);
-                    edges[3] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetUp().offsetNorth(), side, icon, metadata);
+                    borders[0] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetDown().offsetSouth(), side, icon, metadata);
+                    borders[1] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetDown().offsetNorth(), side, icon, metadata);
+                    borders[2] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetUp().offsetSouth(), side, icon, metadata);
+                    borders[3] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetUp().offsetNorth(), side, icon, metadata);
                     break;
 
                 case 5:
-                    edges[0] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetDown().offsetNorth(), side, icon, metadata);
-                    edges[1] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetDown().offsetSouth(), side, icon, metadata);
-                    edges[2] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetUp().offsetNorth(), side, icon, metadata);
-                    edges[3] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetUp().offsetSouth(), side, icon, metadata);
+                    borders[0] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetDown().offsetNorth(), side, icon, metadata);
+                    borders[1] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetDown().offsetSouth(), side, icon, metadata);
+                    borders[2] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetUp().offsetNorth(), side, icon, metadata);
+                    borders[3] = !isNeighbour(cp, blockAccess, blockState, blockPos.offsetUp().offsetSouth(), side, icon, metadata);
             }
 
-            if (index == 13 && edges[0])
+            if (index == 13 && borders[0])
             {
                 index = 4;
             }
-            else if (index == 15 && edges[1])
+            else if (index == 15 && borders[1])
             {
                 index = 5;
             }
-            else if (index == 37 && edges[2])
+            else if (index == 37 && borders[2])
             {
                 index = 16;
             }
-            else if (index == 39 && edges[3])
+            else if (index == 39 && borders[3])
             {
                 index = 17;
             }
-            else if (index == 14 && edges[0] && edges[1])
+            else if (index == 14 && borders[0] && borders[1])
             {
                 index = 7;
             }
-            else if (index == 25 && edges[0] && edges[2])
+            else if (index == 25 && borders[0] && borders[2])
             {
                 index = 6;
             }
-            else if (index == 27 && edges[3] && edges[1])
+            else if (index == 27 && borders[3] && borders[1])
             {
                 index = 19;
             }
-            else if (index == 38 && edges[3] && edges[2])
+            else if (index == 38 && borders[3] && borders[2])
             {
                 index = 18;
             }
-            else if (index == 14 && !edges[0] && edges[1])
+            else if (index == 14 && !borders[0] && borders[1])
             {
                 index = 31;
             }
-            else if (index == 25 && edges[0] && !edges[2])
+            else if (index == 25 && borders[0] && !borders[2])
             {
                 index = 30;
             }
-            else if (index == 27 && !edges[3] && edges[1])
+            else if (index == 27 && !borders[3] && borders[1])
             {
                 index = 41;
             }
-            else if (index == 38 && edges[3] && !edges[2])
+            else if (index == 38 && borders[3] && !borders[2])
             {
                 index = 40;
             }
-            else if (index == 14 && edges[0] && !edges[1])
+            else if (index == 14 && borders[0] && !borders[1])
             {
                 index = 29;
             }
-            else if (index == 25 && !edges[0] && edges[2])
+            else if (index == 25 && !borders[0] && borders[2])
             {
                 index = 28;
             }
-            else if (index == 27 && edges[3] && !edges[1])
+            else if (index == 27 && borders[3] && !borders[1])
             {
                 index = 43;
             }
-            else if (index == 38 && !edges[3] && edges[2])
+            else if (index == 38 && !borders[3] && borders[2])
             {
                 index = 42;
             }
-            else if (index == 26 && edges[0] && edges[1] && edges[2] && edges[3])
+            else if (index == 26 && borders[0] && borders[1] && borders[2] && borders[3])
             {
                 index = 46;
             }
-            else if (index == 26 && !edges[0] && edges[1] && edges[2] && edges[3])
+            else if (index == 26 && !borders[0] && borders[1] && borders[2] && borders[3])
             {
                 index = 9;
             }
-            else if (index == 26 && edges[0] && !edges[1] && edges[2] && edges[3])
+            else if (index == 26 && borders[0] && !borders[1] && borders[2] && borders[3])
             {
                 index = 21;
             }
-            else if (index == 26 && edges[0] && edges[1] && !edges[2] && edges[3])
+            else if (index == 26 && borders[0] && borders[1] && !borders[2] && borders[3])
             {
                 index = 8;
             }
-            else if (index == 26 && edges[0] && edges[1] && edges[2] && !edges[3])
+            else if (index == 26 && borders[0] && borders[1] && borders[2] && !borders[3])
             {
                 index = 20;
             }
-            else if (index == 26 && edges[0] && edges[1] && !edges[2] && !edges[3])
+            else if (index == 26 && borders[0] && borders[1] && !borders[2] && !borders[3])
             {
                 index = 11;
             }
-            else if (index == 26 && !edges[0] && !edges[1] && edges[2] && edges[3])
+            else if (index == 26 && !borders[0] && !borders[1] && borders[2] && borders[3])
             {
                 index = 22;
             }
-            else if (index == 26 && !edges[0] && edges[1] && !edges[2] && edges[3])
+            else if (index == 26 && !borders[0] && borders[1] && !borders[2] && borders[3])
             {
                 index = 23;
             }
-            else if (index == 26 && edges[0] && !edges[1] && edges[2] && !edges[3])
+            else if (index == 26 && borders[0] && !borders[1] && borders[2] && !borders[3])
             {
                 index = 10;
             }
-            else if (index == 26 && edges[0] && !edges[1] && !edges[2] && edges[3])
+            else if (index == 26 && borders[0] && !borders[1] && !borders[2] && borders[3])
             {
                 index = 34;
             }
-            else if (index == 26 && !edges[0] && edges[1] && edges[2] && !edges[3])
+            else if (index == 26 && !borders[0] && borders[1] && borders[2] && !borders[3])
             {
                 index = 35;
             }
-            else if (index == 26 && edges[0] && !edges[1] && !edges[2] && !edges[3])
+            else if (index == 26 && borders[0] && !borders[1] && !borders[2] && !borders[3])
             {
                 index = 32;
             }
-            else if (index == 26 && !edges[0] && edges[1] && !edges[2] && !edges[3])
+            else if (index == 26 && !borders[0] && borders[1] && !borders[2] && !borders[3])
             {
                 index = 33;
             }
-            else if (index == 26 && !edges[0] && !edges[1] && edges[2] && !edges[3])
+            else if (index == 26 && !borders[0] && !borders[1] && borders[2] && !borders[3])
             {
                 index = 44;
             }
-            else if (index == 26 && !edges[0] && !edges[1] && !edges[2] && edges[3])
+            else if (index == 26 && !borders[0] && !borders[1] && !borders[2] && borders[3])
             {
                 index = 45;
             }
@@ -1332,18 +1244,22 @@
     {
         blockProperties = (ConnectedProperties[][])null;
         tileProperties = (ConnectedProperties[][])null;
-        IResourcePack[] rps = Config.getResourcePacks();
 
-        for (int locEmpty = rps.length - 1; locEmpty >= 0; --locEmpty)
+        if (Config.isConnectedTextures())
         {
-            IResourcePack rp = rps[locEmpty];
-            updateIcons(textureMap, rp);
-        }
+            IResourcePack[] rps = Config.getResourcePacks();
+
+            for (int locEmpty = rps.length - 1; locEmpty >= 0; --locEmpty)
+            {
+                IResourcePack rp = rps[locEmpty];
+                updateIcons(textureMap, rp);
+            }
 
-        updateIcons(textureMap, Config.getDefaultResourcePack());
-        ResourceLocation var4 = new ResourceLocation("mcpatcher/ctm/default/empty");
-        emptySprite = textureMap.func_174942_a(var4);
-        spriteQuadMaps = new Map[textureMap.getCountRegisteredSprites() + 1];
+            updateIcons(textureMap, Config.getDefaultResourcePack());
+            ResourceLocation var4 = new ResourceLocation("mcpatcher/ctm/default/empty");
+            emptySprite = textureMap.func_174942_a(var4);
+            spriteQuadMaps = new Map[textureMap.getCountRegisteredSprites() + 1];
+        }
     }
 
     private static void updateIconEmpty(TextureMap textureMap) {}
@@ -1747,7 +1663,7 @@
         }
     }
 
-    static class NamelessClass804130912
+    static class NamelessClass757140099
     {
         static final int[] $SwitchMap$net$minecraft$util$EnumFacing = new int[EnumFacing.values().length];
 
