--- a/net/minecraft/src/WorldRenderer.java
+++ b/net/minecraft/src/WorldRenderer.java
@@ -9,8 +9,9 @@
 {
     /** Reference to the World object. */
     public World worldObj;
-    protected int glRenderList = -1;
-    public static volatile int chunksUpdated = 0;
+    private int glRenderList = -1;
+    private static Tessellator tessellator = Tessellator.instance;
+    public static int chunksUpdated;
     public int posX;
     public int posY;
     public int posZ;
@@ -32,7 +33,7 @@
 
     /** Pos Z clipped */
     public int posZClip;
-    public boolean isInFrustum = false;
+    public boolean isInFrustum;
 
     /** Should this renderer skip this render pass */
     public boolean[] skipRenderPass = new boolean[2];
@@ -47,7 +48,7 @@
     public int posZPlus;
 
     /** Boolean for whether this renderer needs to be updated or not */
-    public volatile boolean needsUpdate;
+    public boolean needsUpdate;
 
     /** Axis aligned bounding box */
     public AxisAlignedBB rendererBoundingBox;
@@ -66,23 +67,14 @@
 
     /** Is the chunk lit */
     public boolean isChunkLit;
-    protected boolean isInitialized = false;
+    private boolean isInitialized;
 
     /** All the tile entities that have special rendering code for this chunk */
     public List tileEntityRenderers = new ArrayList();
-    protected List tileEntities;
+    private List tileEntities;
 
     /** Bytes sent to the GPU */
-    protected int bytesDrawn;
-    public boolean isVisibleFromPosition = false;
-    public double visibleFromX;
-    public double visibleFromY;
-    public double visibleFromZ;
-    public boolean isInFrustrumFully = false;
-    protected boolean needsBoxUpdate = false;
-    public volatile boolean isUpdating = false;
-    public static int globalChunkOffsetX = 0;
-    public static int globalChunkOffsetZ = 0;
+    private int bytesDrawn;
 
     public WorldRenderer(World par1World, List par2List, int par3, int par4, int par5, int par6)
     {
@@ -114,11 +106,12 @@
             this.posXMinus = par1 - this.posXClip;
             this.posYMinus = par2 - this.posYClip;
             this.posZMinus = par3 - this.posZClip;
-            float var4 = 0.0F;
+            float var4 = 6.0F;
             this.rendererBoundingBox = AxisAlignedBB.getBoundingBox((double)((float)par1 - var4), (double)((float)par2 - var4), (double)((float)par3 - var4), (double)((float)(par1 + 16) + var4), (double)((float)(par2 + 16) + var4), (double)((float)(par3 + 16) + var4));
-            this.needsBoxUpdate = true;
+            GL11.glNewList(this.glRenderList + 2, GL11.GL_COMPILE);
+            RenderItem.renderAABB(AxisAlignedBB.getAABBPool().getAABB((double)((float)this.posXClip - var4), (double)((float)this.posYClip - var4), (double)((float)this.posZClip - var4), (double)((float)(this.posXClip + 16) + var4), (double)((float)(this.posYClip + 16) + var4), (double)((float)(this.posZClip + 16) + var4)));
+            GL11.glEndList();
             this.markDirty();
-            this.isVisibleFromPosition = false;
         }
     }
 
@@ -132,152 +125,126 @@
      */
     public void updateRenderer()
     {
-        if (this.worldObj != null)
+        if (this.needsUpdate)
         {
-            if (this.needsUpdate)
-            {
-                if (this.needsBoxUpdate)
-                {
-                    float var1 = 0.0F;
-                    GL11.glNewList(this.glRenderList + 2, GL11.GL_COMPILE);
-                    RenderItem.renderAABB(AxisAlignedBB.getAABBPool().getAABB((double)((float)this.posXClip - var1), (double)((float)this.posYClip - var1), (double)((float)this.posZClip - var1), (double)((float)(this.posXClip + 16) + var1), (double)((float)(this.posYClip + 16) + var1), (double)((float)(this.posZClip + 16) + var1)));
-                    GL11.glEndList();
-                    this.needsBoxUpdate = false;
-                }
-
-                this.isVisible = true;
-                this.isVisibleFromPosition = false;
-                this.needsUpdate = false;
-                int var24 = this.posX;
-                int var2 = this.posY;
-                int var3 = this.posZ;
-                int var4 = this.posX + 16;
-                int var5 = this.posY + 16;
-                int var6 = this.posZ + 16;
+            this.needsUpdate = false;
+            int var1 = this.posX;
+            int var2 = this.posY;
+            int var3 = this.posZ;
+            int var4 = this.posX + 16;
+            int var5 = this.posY + 16;
+            int var6 = this.posZ + 16;
 
-                for (int var7 = 0; var7 < 2; ++var7)
-                {
-                    this.skipRenderPass[var7] = true;
-                }
+            for (int var7 = 0; var7 < 2; ++var7)
+            {
+                this.skipRenderPass[var7] = true;
+            }
 
-                if (Reflector.LightCache.exists())
-                {
-                    Object var26 = Reflector.getFieldValue(Reflector.LightCache_cache);
-                    Reflector.callVoid(var26, Reflector.LightCache_clear, new Object[0]);
-                    Reflector.callVoid(Reflector.BlockCoord_resetPool, new Object[0]);
-                }
+            Chunk.isLit = false;
+            HashSet var21 = new HashSet();
+            var21.addAll(this.tileEntityRenderers);
+            this.tileEntityRenderers.clear();
+            byte var8 = 1;
+            ChunkCache var9 = new ChunkCache(this.worldObj, var1 - var8, var2 - var8, var3 - var8, var4 + var8, var5 + var8, var6 + var8, var8);
 
-                Chunk.isLit = false;
-                HashSet var25 = new HashSet();
-                var25.addAll(this.tileEntityRenderers);
-                this.tileEntityRenderers.clear();
-                byte var8 = 1;
-                ChunkCache var9 = new ChunkCache(this.worldObj, var24 - var8, var2 - var8, var3 - var8, var4 + var8, var5 + var8, var6 + var8, var8);
+            if (!var9.extendedLevelsInChunkCache())
+            {
+                ++chunksUpdated;
+                RenderBlocks var10 = new RenderBlocks(var9);
+                this.bytesDrawn = 0;
 
-                if (!var9.extendedLevelsInChunkCache())
+                for (int var11 = 0; var11 < 2; ++var11)
                 {
-                    ++chunksUpdated;
-                    RenderBlocks var10 = new RenderBlocks(var9);
-                    this.bytesDrawn = 0;
-                    Tessellator var11 = Tessellator.instance;
-                    boolean var12 = Reflector.ForgeHooksClient.exists();
+                    boolean var12 = false;
+                    boolean var13 = false;
+                    boolean var14 = false;
 
-                    for (int var13 = 0; var13 < 2; ++var13)
+                    for (int var15 = var2; var15 < var5; ++var15)
                     {
-                        boolean var14 = false;
-                        boolean var15 = false;
-                        boolean var16 = false;
-
-                        for (int var17 = var2; var17 < var5; ++var17)
+                        for (int var16 = var3; var16 < var6; ++var16)
                         {
-                            for (int var18 = var3; var18 < var6; ++var18)
+                            for (int var17 = var1; var17 < var4; ++var17)
                             {
-                                for (int var19 = var24; var19 < var4; ++var19)
-                                {
-                                    int var20 = var9.getBlockId(var19, var17, var18);
+                                int var18 = var9.getBlockId(var17, var15, var16);
 
-                                    if (var20 > 0)
+                                if (var18 > 0)
+                                {
+                                    if (!var14)
                                     {
-                                        if (!var16)
-                                        {
-                                            var16 = true;
-                                            GL11.glNewList(this.glRenderList + var13, GL11.GL_COMPILE);
-                                            var11.setRenderingChunk(true);
-                                            var11.startDrawingQuads();
-                                            var11.setTranslation((double)(-globalChunkOffsetX), 0.0D, (double)(-globalChunkOffsetZ));
-                                        }
+                                        var14 = true;
+                                        GL11.glNewList(this.glRenderList + var11, GL11.GL_COMPILE);
+                                        GL11.glPushMatrix();
+                                        this.setupGLTranslation();
+                                        float var19 = 1.000001F;
+                                        GL11.glTranslatef(-8.0F, -8.0F, -8.0F);
+                                        GL11.glScalef(var19, var19, var19);
+                                        GL11.glTranslatef(8.0F, 8.0F, 8.0F);
+                                        tessellator.startDrawingQuads();
+                                        tessellator.setTranslation((double)(-this.posX), (double)(-this.posY), (double)(-this.posZ));
+                                    }
 
-                                        Block var21 = Block.blocksList[var20];
+                                    Block var23 = Block.blocksList[var18];
 
-                                        if (var21 != null)
+                                    if (var23 != null)
+                                    {
+                                        if (var11 == 0 && var23.hasTileEntity())
                                         {
-                                            if (var13 == 0 && var21.hasTileEntity())
-                                            {
-                                                TileEntity var22 = var9.getBlockTileEntity(var19, var17, var18);
-
-                                                if (TileEntityRenderer.instance.hasSpecialRenderer(var22))
-                                                {
-                                                    this.tileEntityRenderers.add(var22);
-                                                }
-                                            }
+                                            TileEntity var20 = var9.getBlockTileEntity(var17, var15, var16);
 
-                                            int var28 = var21.getRenderBlockPass();
-                                            boolean var23 = true;
-
-                                            if (var28 != var13)
+                                            if (TileEntityRenderer.instance.hasSpecialRenderer(var20))
                                             {
-                                                var14 = true;
-                                                var23 = false;
+                                                this.tileEntityRenderers.add(var20);
                                             }
+                                        }
 
-                                            if (var12)
-                                            {
-                                                var23 = Reflector.callBoolean(var21, Reflector.ForgeBlock_canRenderInPass, new Object[] {Integer.valueOf(var13)});
-                                            }
+                                        int var24 = var23.getRenderBlockPass();
 
-                                            if (var23)
-                                            {
-                                                var15 |= var10.renderBlockByRenderType(var21, var19, var17, var18);
-                                            }
+                                        if (var24 != var11)
+                                        {
+                                            var12 = true;
+                                        }
+                                        else if (var24 == var11)
+                                        {
+                                            var13 |= var10.renderBlockByRenderType(var23, var17, var15, var16);
                                         }
                                     }
                                 }
                             }
                         }
+                    }
 
-                        if (var16)
-                        {
-                            this.bytesDrawn += var11.draw();
-                            GL11.glEndList();
-                            var11.setRenderingChunk(false);
-                            var11.setTranslation(0.0D, 0.0D, 0.0D);
-                        }
-                        else
-                        {
-                            var15 = false;
-                        }
+                    if (var14)
+                    {
+                        this.bytesDrawn += tessellator.draw();
+                        GL11.glPopMatrix();
+                        GL11.glEndList();
+                        tessellator.setTranslation(0.0D, 0.0D, 0.0D);
+                    }
+                    else
+                    {
+                        var13 = false;
+                    }
 
-                        if (var15)
-                        {
-                            this.skipRenderPass[var13] = false;
-                        }
+                    if (var13)
+                    {
+                        this.skipRenderPass[var11] = false;
+                    }
 
-                        if (!var14)
-                        {
-                            break;
-                        }
+                    if (!var12)
+                    {
+                        break;
                     }
                 }
-
-                HashSet var27 = new HashSet();
-                var27.addAll(this.tileEntityRenderers);
-                var27.removeAll(var25);
-                this.tileEntities.addAll(var27);
-                var25.removeAll(this.tileEntityRenderers);
-                this.tileEntities.removeAll(var25);
-                this.isChunkLit = Chunk.isLit;
-                this.isInitialized = true;
             }
+
+            HashSet var22 = new HashSet();
+            var22.addAll(this.tileEntityRenderers);
+            var22.removeAll(var21);
+            this.tileEntities.addAll(var22);
+            var21.removeAll(this.tileEntityRenderers);
+            this.tileEntities.removeAll(var21);
+            this.isChunkLit = Chunk.isLit;
+            this.isInitialized = true;
         }
     }
 
@@ -324,15 +291,6 @@
     public void updateInFrustum(ICamera par1ICamera)
     {
         this.isInFrustum = par1ICamera.isBoundingBoxInFrustum(this.rendererBoundingBox);
-
-        if (this.isInFrustum && Config.isOcclusionEnabled() && Config.isOcclusionFancy())
-        {
-            this.isInFrustrumFully = par1ICamera.isBoundingBoxInFrustumFully(this.rendererBoundingBox);
-        }
-        else
-        {
-            this.isInFrustrumFully = false;
-        }
     }
 
     /**
