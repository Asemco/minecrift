--- a/net/minecraft/server/integrated/IntegratedServer.java
+++ b/net/minecraft/server/integrated/IntegratedServer.java
@@ -18,6 +18,8 @@
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.profiler.PlayerUsageSnooper;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.src.Reflector;
+import net.minecraft.src.WorldServerOF;
 import net.minecraft.util.CryptManager;
 import net.minecraft.util.HttpUtil;
 import net.minecraft.world.EnumDifficulty;
@@ -51,18 +53,19 @@
         this.theWorldSettings = null;
     }
 
-    public IntegratedServer(Minecraft mcIn, String p_i1317_2_, String p_i1317_3_, WorldSettings p_i1317_4_)
+    public IntegratedServer(Minecraft mcIn, String folderName, String worldName, WorldSettings settings)
     {
         super(new File(mcIn.mcDataDir, "saves"), mcIn.getProxy(), new File(mcIn.mcDataDir, USER_CACHE_FILE.getName()));
         this.setServerOwner(mcIn.getSession().getUsername());
-        this.setFolderName(p_i1317_2_);
-        this.setWorldName(p_i1317_3_);
+        this.setFolderName(folderName);
+        this.setWorldName(worldName);
         this.setDemo(mcIn.isDemo());
-        this.canCreateBonusChest(p_i1317_4_.isBonusChestEnabled());
+        this.canCreateBonusChest(settings.isBonusChestEnabled());
         this.setBuildLimit(256);
         this.setConfigManager(new IntegratedPlayerList(this));
         this.mc = mcIn;
-        this.theWorldSettings = this.isDemo() ? DemoWorldServer.demoWorldSettings : p_i1317_4_;
+        this.theWorldSettings = this.isDemo() ? DemoWorldServer.demoWorldSettings : settings;
+        Reflector.callVoid(Reflector.ModLoader_registerServer, new Object[] {this});
     }
 
     protected ServerCommandManager createNewCommandManager()
@@ -73,9 +76,9 @@
     protected void loadAllWorlds(String p_71247_1_, String p_71247_2_, long seed, WorldType type, String p_71247_6_)
     {
         this.convertMapIfNeeded(p_71247_1_);
+        ISaveHandler var7 = this.getActiveAnvilConverter().getSaveLoader(p_71247_1_, true);
         this.worldServers = new WorldServer[3];
         this.timeOfLastDimensionTick = new long[this.worldServers.length][100];
-        ISaveHandler var7 = this.getActiveAnvilConverter().getSaveLoader(p_71247_1_, true);
         this.setResourcePackFromWorld(this.getFolderName(), var7);
         WorldInfo var8 = var7.loadWorldInfo();
 
@@ -110,7 +113,7 @@
                 }
                 else
                 {
-                    this.worldServers[var9] = (WorldServer)(new WorldServer(this, var7, var8, var10, this.theProfiler)).init();
+                    this.worldServers[var9] = (WorldServer)(new WorldServerOF(this, var7, var8, var10, this.theProfiler)).init();
                 }
 
                 this.worldServers[var9].initialize(this.theWorldSettings);
@@ -146,8 +149,33 @@
         this.setAllowFlight(true);
         logger.info("Generating keypair");
         this.setKeyPair(CryptManager.generateKeyPair());
+        Object inst;
+
+        if (Reflector.FMLCommonHandler_handleServerAboutToStart.exists())
+        {
+            inst = Reflector.call(Reflector.FMLCommonHandler_instance, new Object[0]);
+
+            if (!Reflector.callBoolean(inst, Reflector.FMLCommonHandler_handleServerAboutToStart, new Object[] {this}))
+            {
+                return false;
+            }
+        }
+
         this.loadAllWorlds(this.getFolderName(), this.getWorldName(), this.theWorldSettings.getSeed(), this.theWorldSettings.getTerrainType(), this.theWorldSettings.getWorldName());
         this.setMOTD(this.getServerOwner() + " - " + this.worldServers[0].getWorldInfo().getWorldName());
+
+        if (Reflector.FMLCommonHandler_handleServerStarting.exists())
+        {
+            inst = Reflector.call(Reflector.FMLCommonHandler_instance, new Object[0]);
+
+            if (Reflector.FMLCommonHandler_handleServerStarting.getReturnType() == Boolean.TYPE)
+            {
+                return Reflector.callBoolean(inst, Reflector.FMLCommonHandler_handleServerStarting, new Object[] {this});
+            }
+
+            Reflector.callVoid(inst, Reflector.FMLCommonHandler_handleServerStarting, new Object[] {this});
+        }
+
         return true;
     }
 
@@ -168,7 +196,8 @@
 
         if (this.isGamePaused)
         {
-            Queue var2 = this.futureTaskQueue;
+            Queue var10 = this.futureTaskQueue;
+            Queue var3 = this.futureTaskQueue;
 
             synchronized (this.futureTaskQueue)
             {
@@ -197,17 +226,17 @@
 
             if (this.mc.theWorld != null)
             {
-                WorldInfo var10 = this.worldServers[0].getWorldInfo();
-                WorldInfo var3 = this.mc.theWorld.getWorldInfo();
+                WorldInfo var101 = this.worldServers[0].getWorldInfo();
+                WorldInfo var11 = this.mc.theWorld.getWorldInfo();
 
-                if (!var10.isDifficultyLocked() && var3.getDifficulty() != var10.getDifficulty())
+                if (!var101.isDifficultyLocked() && var11.getDifficulty() != var101.getDifficulty())
                 {
-                    logger.info("Changing difficulty to {}, from {}", new Object[] {var3.getDifficulty(), var10.getDifficulty()});
-                    this.setDifficultyForAllWorlds(var3.getDifficulty());
+                    logger.info("Changing difficulty to {}, from {}", new Object[] {var11.getDifficulty(), var101.getDifficulty()});
+                    this.setDifficultyForAllWorlds(var11.getDifficulty());
                 }
-                else if (var3.isDifficultyLocked() && !var10.isDifficultyLocked())
+                else if (var11.isDifficultyLocked() && !var101.isDifficultyLocked())
                 {
-                    logger.info("Locking difficulty to {}", new Object[] {var3.getDifficulty()});
+                    logger.info("Locking difficulty to {}", new Object[] {var11.getDifficulty()});
                     WorldServer[] var4 = this.worldServers;
                     int var5 = var4.length;
 
@@ -335,32 +364,32 @@
     {
         try
         {
-            int var3 = -1;
+            int var6 = -1;
 
             try
             {
-                var3 = HttpUtil.getSuitableLanPort();
+                var6 = HttpUtil.getSuitableLanPort();
             }
             catch (IOException var5)
             {
                 ;
             }
 
-            if (var3 <= 0)
+            if (var6 <= 0)
             {
-                var3 = 25564;
+                var6 = 25564;
             }
 
-            this.getNetworkSystem().addLanEndpoint((InetAddress)null, var3);
-            logger.info("Started on " + var3);
+            this.getNetworkSystem().addLanEndpoint((InetAddress)null, var6);
+            logger.info("Started on " + var6);
             this.isPublic = true;
-            this.lanServerPing = new ThreadLanServerPing(this.getMOTD(), var3 + "");
+            this.lanServerPing = new ThreadLanServerPing(this.getMOTD(), var6 + "");
             this.lanServerPing.start();
             this.getConfigurationManager().func_152604_a(type);
             this.getConfigurationManager().setCommandsAllowedForAll(allowCheats);
-            return var3 + "";
+            return var6 + "";
         }
-        catch (IOException var6)
+        catch (IOException var61)
         {
             return null;
         }
